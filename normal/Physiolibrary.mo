package Physiolibrary
  "System biology, integrative physiology and pathophysiology modelling library"

  extends Modelica.Icons.Package;

  package UsersGuide "User's Guide"
    extends Modelica.Icons.Information;

    class Overview "Overview of Physiolibrary"
      extends Modelica.Icons.Information;
      annotation (
        Documentation(info = "<html>
<p>ThePhysiolibrary consists of the following main sub-libraries: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td><p align=\"center\"><b>Library Components</b></p></td>
<td><p align=\"center\"><b>Description</b></p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Hydraulic.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Fluid\">Fluid</a></p><p>The main usage of the hydraulic domain in human physiology is modeling of the cardio-vascular system. And because there are no extreme thermodynamic conditions, the system can be really simple &mdash;it is only necessary to model conditions for incompressible water, at normal liquid-water temperatures and with relative pressure 5-20kPa. This boring thermodynamic state leads to the very simple blocks of hydraulic resistance, hydrostatic pressure, volumetric flow, inertia and finally the block of blood accumulation in elastic vessels.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Thermal.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Thermal\">Thermal</a></p><p>For the human body to function optimally, it is critical to hold the core temperature at 35&ndash;39&deg;C. A fever of 41&deg;C for more than a short period of time causes brain damage. If the core temperature falls below 10&deg;C, the heart stops. As in the hydraulic domain, the thermal domain is simplified to these conditions. </p><p>In the Thermal package extends the package Modelica.Thermal.HeatTransfer from Modelica Standard Library 3.2 (MSL), where the connector is composed of temperature and heat flow. The main blocks in Thermal are: Conductor, IdealRadiator and HeatAccumulation. The heat conductor conducts the heat from the source, such us muscles or metabolically active tissue, to its surrounding. IdealRadiator delivers heat to tissues by blood circulation. HeatAccumulation plays a role in accumulating thermal energy in each tissue mass driven by its heat capacity. We recommend to use this block instead of Modelica.Thermal.HeatTransfer.HeatCapacitor to have possibility of variable mass amount or to have a support for calculation of steady state. </p></td>
</tr>
<tr>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Population.png\"/></p></td>
<td valign=\"middle\"><p><a href=\"modelica://Physiolibrary.Population\">Population</a></p><p>Population models are based on increasing and decreasing of average number of population members. The number of population member is a nonflow variable in connectors and flow variable is the change of population members. The growth or differentiation of cells can be modeled as stream from one population component to another, where each population component could be defined by selected age, type, function or wathever..</p><p>Even the domain is integer, all is modeled by real numbers. </p></td>
</tr>
</table>
</html>"));
    end Overview;

    class Connectors "Connectors"
      extends Modelica.Icons.Information;
      annotation (
        Documentation(info="<html>
<p>The Physiolibrary defines the most important <b>elementary connectors</b> in various domains. If any possible, a user should utilize these connectors in order that components from the Physiolibrary and from other libraries can be combined without problems. The following elementary connectors are defined (the meaning of potential, flow, and stream variables is explained in section &quot;Connector Equations&quot; below): </p>
<table cellspacing=\"0\" cellpadding=\"1\" border=\"1\"><tr>
<td valign=\"top\"><p><b>domain</b></p></td>
<td valign=\"top\"><p><b>potential</b></p><p>variables</p></td>
<td valign=\"top\"><p><b>flow</b></p><p>variables</p></td>
<td valign=\"top\"><p><b>stream</b></p><p>variables</p></td>
<td valign=\"top\"><p><b>connector definition</b></p></td>
<td valign=\"top\"><p><b>icons</b></p></td>
</tr>
<tr>
<td valign=\"top\"><p><b>hydraulic (fluid)</b></p></td>
<td valign=\"top\"><p>absolute pressure</p></td>
<td valign=\"top\"><p>mass flow</p></td>
<td valign=\"top\"><p>enthalpy, substances concentrations</p></td>
<td valign=\"top\"><p><br><br><br><a href=\"modelica://Modelica.Fluid.Interfaces\">Modelica.Fluid.Interfaces</a> </p><p>FluidPort, FluidPort_a, FluidPort_b</p>
<p><a href=\"modelica://Physiolibrary.Fluid.Interfaces\">Fluid.Interfaces</a> </p><p>FluidPort, FluidPort_a, FluidPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/FluidPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><p><b>thermal</b></p></td>
<td valign=\"top\"><p>temperature</p></td>
<td valign=\"top\"><p>heat flow rate</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><br><br><a href=\"modelica://Modelica.Thermal.HeatTransfer.Interfaces\">Modelica.Thermal.HeatTransfer.Interfaces</a> </p><p>HeatPort, HeatPort_a, HeatPort_b</p><p><a href=\"modelica://Physiolibrary.Thermal.Interfaces\">Thermal.Interfaces</a> </p><p>HeatPort, HeatPort_a, HeatPort_b</p></td>
<td valign=\"top\"><p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ThermalPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><p><b>population</b></p></td>
<td valign=\"top\"><p>the number</p><p>of population members</p></td>
<td valign=\"top\"><p>change </p><p>of the number of population members</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><br><br><a href=\"modelica://Physiolibrary.Population.Interfaces\">Population.Interfaces</a> </p><p>PopulationPort, PopulationPort_a, PopulationPort_b</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/PopulationPorts.png\"/></p></td>
</tr>
<tr>
<td valign=\"top\"><p><b>block</b></p><p>diagram</p></td>
<td valign=\"top\"><p>Real unit-typed variables</p></td>
<td valign=\"top\"></td>
<td valign=\"top\"></td>
<td valign=\"top\"><p><br><br><br><br><br><br><br><br><br><br><a href=\"modelica://Physiolibrary.Types.RealIO\">Types.RealIO</a> </p><p>EnergyInput, EnergyOutput, TimeInput, TimeOutput, MassInput, MassOutput, MassFlowRateInput, MassFlowRateOutput, HeightInput, HeightOutput, AccelerationInput, AccelerationOutput, PressureInput, PressureOutput, VolumeInput, VolumeOutput, VolumeFlowRateInput, VolumeFlowRateOutput, ConcentrationInput, ConcentrationOutput, OsmolarityInput, OsmolarityOutput, AmountOfSubstanceInput, AmountOfSubstanceOutput, MolarFlowRateInput, MolarFlowRateOutput, DiffusionPermeabilityInput, DiffusionPermeabilityOutput, HeatInput, HeatOutput, TemperatureInput, TemperatureOutput, HeatFlowRateInput, HeatFlowRateOutput, ThermalConductanceInput, ThermalConductanceOutput, ElectricCurrentInput, ElectricCurrentOutput, ElectricChargeInput, ElectricChargeOutput, ElectricPotentialInput, ElectricPotentialOutput, FractionInput, FractionOutput, FrequencyInput, FrequencyOutput, OsmoticPermeabilityInput, OsmoticPermeabilityOutput, HydraulicConductanceInput, HydraulicConductanceOutput, HydraulicComplianceInput, HydraulicComplianceOutput, HydraulicInertanceInput, HydraulicInertanceOutput, GasSolubilityInput, GasSolubilityOutput, DensityInput, SpecificEnergyInput, SpecificEnergyOutput, SpecificHeatCapacityInput, SpecificHeatCapacityOutput</p></td>
<td valign=\"top\"><p><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/Signals.png\"/></p></td>
</tr>
</table>
<p><br><br><br><br><br><br><br>In all domains, usually 2 connectors are defined. The variable declarations are <b>identical</b>, only the icons are different in order that it is easy to distinguish connectors of the same domain that are attached at the same component. </p>
</html>"));
    end Connectors;

    package ReleaseNotes "Release notes"
      class Version_3_0_0alpha "Version 3.0-alpha (Nov. 26, 2020)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li>using Chemical 1.4 instead of Physiolibrary.Chemical and Physiolibrary.Osmotic</li>
<li>support of Modelica.Fluid and Modelica.Media concept instead of Physiolibrary.Hydraulic</li>
<li>obsolete previous Physiolibrary steady state concept</li>
</ul>
</html>"));
      end Version_3_0_0alpha;

      extends Modelica.Icons.ReleaseNotes;

      class Version_2_3_1 "Version 2.3.1 (Sep. 15, 2015)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li>Change of license to <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD</a>: </li>
<li><ul>
<li><font style=\"color: #333333; \">no additional restricions</font></li>
<li><font style=\"color: #333333; \">supported decentralized development</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">External pressure of elastic vessel compartment.</font></li>
</ul></li>
<li>New example of pulsative blood circulation by Willem van Meurs 2011</li>
<li>Support of [Physiomodel 1.0.0] (https://github.com/physiology/Physiomodel/releases/tag/v1.0.0)</li>
</ul>
</html>"));
      end Version_2_3_1;

      class Version_2_3_0 "Version 2.3.0 (Feb. 16, 2015)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">Population domain for population models of organisms, cells,..</font></li>
<li><font style=\"color: #333333; \">cardiovascular models as example of Hydraulic domain</font></li>
<li><font style=\"color: #333333; \">components: osmotic reabsorption, ideal osmotic flow filtration</font></li>
<li><font style=\"color: #333333; \">display units: umol/min,nmol/min,pmol/min,l/day</font></li>
<li><font style=\"color: #333333; \">icons: heart ventricle icon, microcirculation, population</font></li>
<li><font style=\"color: #333333; \">blocks: 1(one) as constant, energy per mass, DegradationGain, FractionGain</font></li>
<li><font style=\"color: #333333; \">installation to System Modeler script (Resources/Install)</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">OsmoticCell with more possible membrane type interfaces</font></li>
<li><font style=\"color: #333333; \">factors: dissabling option and with decadic logarith</font></li>
<li><font style=\"color: #333333; \">redefinition of unmeasurables physical quantities</font></li>
<li><font style=\"color: #333333; \">manipulation with initial input and final output values of variables</font></li>
<li><font style=\"color: #333333; \">units of heart starling slopes in CardiovascularSystem_GCG</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">units Torr with capital 'T' (from name - Evangelista Torricelli)</font></li>
<li><font style=\"color: #333333; \">Blocks.Math.Exponentiation to Blocks.Math.Power</font></li>
</ul></li>
</ul>
</html>"));
      end Version_2_3_0;

      class Version_2_2_0 "Version 2.2.0 (Sep. 06, 2014)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">read/write of values in non-SI units</font></li>
<li><font style=\"color: #333333; \">outflow/inflow sources</font></li>
<li><font style=\"color: #333333; \">chemical internal heats</font></li>
<li><font style=\"color: #333333; \">passive fluxes through membranes</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">collapsing ElasticVessel at negative sucking pressures</font></li>
<li><font style=\"color: #333333; \">concentrations are always per volume of whole solution</font></li>
<li><font style=\"color: #333333; \">determining of Dymola installation folder</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">actualFlow, actualConc, .. in sensors</font></li>
<li><font style=\"color: #333333; \">FlowConcentrationMeasure to IncrementalFlowConcentrationMeasure</font></li>
<li><font style=\"color: #333333; \">thermal OutStream to MassOutflow</font></li>
</ul></li>
</ul>
</html>"));
      end Version_2_2_0;

      class Version_2_1_1 "Version 2.1.1 (May. 02, 2014)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">compoment HydraulicComponents.IdealValve for modeling aortic, pulmonary, triscupid and mitral valve</font></li>
<li><font style=\"color: #333333; \">types pH, VolumeDensityOfCharge</font></li>
<li><font style=\"color: #333333; \">examples: Osmotic.Examples.CelebrospinalFluid, Hydraulic.Examples.Windkessel and Hydraulic.Example.MinimalCirculation</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li>role of hydraulic pressure in Osmotic.Components.Membrane</li>
</ul></li>
</ul>
</html>"));
      end Version_2_1_1;

      class Version_2_1 "Version 2.1 (Feb. 28, 2014)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<ul>
<li><font style=\"color: #333333; \">Upgrade to MSL 3.2.1 (still compatible with MSL 3.2)</font></li>
<li><font style=\"color: #333333; \">New:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">constants HydraulicResistanceConst, HydraulicElastanceConst and HydraulicElastanceToComplianceConst and type HydraulicElastance</font></li>
<li><font style=\"color: #333333; \">display units for hydraulic resistance/conductance/compliance/elastance, for gas solubility</font></li>
<li><font style=\"color: #333333; \">steady state component ElectricChargeConservationLaw</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Rename:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">HydraulicResistanceConst to HydraulicResistanceToConductanceConst</font></li>
</ul></li>
<li><font style=\"color: #333333; \">Fix:</font></li>
<li><ul>
<li><font style=\"color: #333333; \">gas solution in liquid with corrected GasSolubility type</font></li>
<li><font style=\"color: #333333; \">bidirectional stream flows</font></li>
<li><font style=\"color: #333333; \">steady state example of dissolved oxygen</font></li>
<li><font style=\"color: #333333; \">installation batch file for Dymola in Windows</font></li>
<li><font style=\"color: #333333; \">references in overview (user&apos;s guide)</font></li>
</ul></li>
</ul>
</html>"));
      end Version_2_1;

      class Version_2_0 "Version 2.0 (Jan. 26, 2014)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<p><ul>
<li><font style=\"color: #333333; \">Renamed classes</font></li>
<li>Conditional inputs to blocks</li>
<li>Removed Mixed package</li>
<li>Rebuilt steady states</li>
<li><font style=\"color: #333333; \">New icons and examples</font></li>
</ul></p>
</html>"));
      end Version_2_0;

      class Version_1_2 "Version 1.2 (Jan 15, 2014)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<p><ul>
<li><font style=\"color: #333333; \">Package structure Physiolibrary.{domain}.[Examples|Components|Sources|Interfaces].{component}</font></li>
<li><font style=\"color: #333333; \">New icons</font></li>
<li><font style=\"color: #333333; \">Thermal: Relative heat energy to normal body temperature (37degC)</font></li>
<li><font style=\"color: #333333; \">New examples: Guyton-Coleman-Granger cardiovascular model, Coleman thermal energy transfers</font></li>
</ul></p>
</html>"));
      end Version_1_2;

      class Version_1_1 "Version 1.1 (Dec. 30, 2013)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<p><ul>
<li><font style=\"color: #333333; \">Heat connector compatibility between Thermal package and Modelica.Thermal.HeatTransfer package (MSL 3.2)</font></li>
<li><font style=\"color: #333333; \">Some English language corrections</font></li>
<li><font style=\"color: #333333; \">Hydrostatic pressure patch</font></li>
<li><font style=\"color: #333333; \">New examples</font></li>
</ul></p>
</html>"));
      end Version_1_1;

      class Version_1_0 "Version 1.0.0 (Dec. 09, 2013)"
        extends Modelica.Icons.ReleaseNotes;
        annotation (
          Documentation(info = "<html>
<p><ul>
<li>migration to GITHub https://github.com/MarekMatejak/Physiolibrary from http://patf-biokyb.lf1.cuni.cz/repos/Modelica/Physiolibrary svn repository, commit 4947 </li>
<li><font style=\"color: #333333; \">The library uses the Modelica Standard Library (MSL) version 3.2.</font></li>
<li><font style=\"color: #333333; \">Contains nice physiological icons.</font></li>
<li><font style=\"color: #333333; \">Support for physiological units: min,kcal,mmHg,ml,mEq,..</font></li>
<li><font style=\"color: #333333; \">Base blocks for chemical, hydraulical, osmotic, thermal or mixed domains</font></li>
<li><font style=\"color: #333333; \">Support of equilibrated systems</font></li>
<li><font style=\"color: #333333; \">Support for expandable inputs/outputs/tests lists</font></li>
</ul></p>
</html>"));
      end Version_1_0;
      annotation (
        Documentation(info = "<html>
<p>This section summarizes the changes that have been performed on the Physiolibrary. </p>
</html>"));
    end ReleaseNotes;

    class Contact "Contact"
      extends Modelica.Icons.Contact;
      annotation (
        Documentation(info = "<html>
<p>Marek Matej&aacute;k</p>
<p>email: marek@matfy.cz</p>
<p>skype: marek.matejak</p>
<p>tel: +420 776 301 395</p>
</html>"));
    end Contact;

    class License "BSD 3-Clause License"
      extends Modelica.Icons.Information;
      annotation (
        Documentation(info = "<html>
<p>All files in this directory (Physiolibrary) and in all subdirectories, especially all files that build package &quot;Physiolibrary&quot; are licensed by Marek Matejak under the <a href=\"http://opensource.org/licenses/BSD-3-Clause\">BSD 3-Clause License</a> (with exception of files &quot;Resources/*&quot;). </p>
<p><b>Licensor:</b></p>
<p>Marek Matej&aacute;k,</p>
<p>Hviezdoslavova 632/41,</p>
<p>916 01 Star&aacute; Tur&aacute;, </p>
<p>Slovak Republic,</p>
<p>email: marek@matfyz.cz</p>
<p><b><span style=\"color: #008000;\">Organization: </span></b></p>
<p>General University Hospital in Prague, U Nemocnice 499/2, 128 08 Prague 2, Czech Republic</p>
<p>Institute of Pathological Physiology, First Faculty of Medicine, Charles University in Prague,U Nemocnice 5, 128 53 Prague 2, Czech Republic</p>
<p><b>Copyright notices of the files:</b></p>
<p>Copyright (c) 2008-2022, Marek Matej&aacute;k, Charles University in Prague, General University Hospital in Prague</p>
<p><br>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<p>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </p>
<p>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </p>
<p>3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>"));
    end License;

    class NewRelease "Publishing new release"
      extends Modelica.Icons.Information;
      annotation (
        Documentation(info = "<html>
<p><br>New release must be numbered by Semantic Versioning 2.0.0, see <a href=\"http://semver.org/\">semver.org</a>. </p>
<p><br>If minor version, then the conversion script must be written and connected with package Physiolibrary using &quot;annotation(conversion(from(version=..)))&quot;! </p>
<p><br>To clean the code from dummy annotations try to use script <a href=\"https://github.com/dietmarw/trimtrailingwhitespaces\">ttws</a>. </p>
<p>To check english spelling try to use <a href=\"https://github.com/vlajos/misspell_fixer\">missspell_fixer</a>.</p>
<p><br>Update version number to &quot;X.Y.Z&quot;: </p>
<ul>
<li>At package Physiolibrary annotation: (version=&quot;X.Y.Z&quot;) together with &quot;versionBuild&quot;, &quot;versionDate&quot; and &quot;dateModified&quot; attribute </li>
<li>At file &quot;./Physiolibrary/libraryinfo.mos&quot; </li>
</ul>
<p><br>Update release notes: </p>
<ul>
<li>At UsersGuide.ReleaseNotes</li>
<li>At file &quot;./README.md&quot;, together with update of &quot;Current release&quot; section.</li>
</ul>
<p><br>Publish release in GitHub: </p>
<ul>
<li>Prepare release in &quot;master&quot; branch</li>
<li>Install, Check, Test, Test, Test.. </li>
<li>Draft a new <a href=\"https://github.com/impact/impact/blob/master/resources/docs/modelica2015/paper/impact.md#impact-on-library-developers\">release from &quot;master&quot;</a> branch with number &quot;vX.Y.Z&quot; and with release notes. </li>
</ul>
</html>"));
    end NewRelease;
    annotation (
      DocumentationClass = true,
      Documentation(info = "<html>
<p>Package <b>Physiolibrary</b> is a modelica package for <b>Human Physiology</b> that is developed from <b>HumMod</b> modelica implementation, see <a href=\"http://patf-biokyb.lf1.cuni.cz/wiki/hummod/hummod\">http://hummod.org</a>. It provides constants, types, connectors, partial models and model components fitted for physiological models of human body. </p>
<p>This is a short <b>User&apos;s Guide</b> for the overall library. Some of the main sublibraries have their own User&apos;s Guides that can be accessed by the following links: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Fluid\">Fluid</a></p></td>
<td valign=\"top\"><p>Library of hydraulic domain. For modeling of cardiovascular system.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Thermal\">Thermal</a></p></td>
<td valign=\"top\"><p>Library of termoregulation support. As extension of Modelica.Thermal.HeatTransfer.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Population\">Population</a></p></td>
<td valign=\"top\"><p>Library for population models such as predator-prey or cells population.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Icons\">Icons</a></p></td>
<td valign=\"top\"><p>Icons</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Types\">Types</a></p></td>
<td valign=\"top\"><p>Physiological types. Physiological unit vs. SI units, nominals, inputs/outputs, typed constants.</p></td>
</tr>
<tr>
<td valign=\"top\"><p><a href=\"modelica://Physiolibrary.Blocks\">Blocks</a></p></td>
<td valign=\"top\"><p>Useful blocks, that are missing in package Modelica.Blocks (MSL 3.2), cubic interpolation curves, multiplication factors.</p></td>
</tr>
</table>
</html>"));
  end UsersGuide;

  package Media
    extends Modelica.Icons.Package;

    package Blood "Blood"
      import Physiolibrary.Media.Substances.*;
      import Physiolibrary.Media.Substances.InitialValues.*;

      extends Media.Interfaces.PartialMedium(
        mediumName = "Blood",
        substanceNames={"H2O_E","O2","CO2","CO","Hb","MetHb","HbF","Alb","Glb","PO4","DPG",
          "Glucose","Lactate","Urea","AminoAcids","Lipids","KetoAcids",
          "SID",
          "Epinephrine", "Norepinephrine","Vasopressin",
          "Insulin","Glucagon","Thyrotropin","Thyroxine","Leptin",
          "Desglymidodrine","AlphaBlockers","BetaBlockers",
          "AnesthesiaVascularConductance",
          "Angiotensin2","Renin","Aldosterone",
          "H2O_P"},
        reference_X=X(),
        SubstanceFlowNominal=X() ./ Constants.TimeScale,
        ThermoStates=Modelica.Media.Interfaces.Choices.IndependentVariables.phX,
        reducedX=false,
        singleState=true,
        reference_T=310.15,
        reference_p=101325,
        SpecificEnthalpy(start=0, nominal=1e3),
        Density(start=1e3, nominal=1e3),
        AbsolutePressure(start=1.0e5, nominal=1.0e5),
        Temperature(
          min=273.15,
          max=320.15,
          start=310.15,
          nominal=310.15));

      constant Types.MassFraction ArterialDefault[nS]=X(tO2=D_Arterial_O2,tCO2=D_Arterial_CO2);

      constant Types.MassFraction VenousDefault[nS]=X(tO2=D_Venous_O2,tCO2=D_Venous_CO2);

    public
      redeclare connector extends SubstancesPort
           Chemical.Interfaces.SubstancePort_a CO2 "Free carbon dioxide molecule";
           Chemical.Interfaces.SubstancePort_a O2 "Free oxygen molecule";
           Chemical.Interfaces.SubstancePort_a CO "Free carbon monoxide moelcule";
           Chemical.Interfaces.SubstancePort_a HCO3 "Free bicarbonate molecule";
           Chemical.Interfaces.SubstancePort_a H3O "Free hydronium molecule";
           Chemical.Interfaces.SubstancePort_a H "Free protons";
           Chemical.Interfaces.SubstancePort_a H2O "Free water molecule (in pure water is only cca 1 mol/kg free water molecules, other cca 54.5 mols are bounded together by hydrogen bonds)";
      end SubstancesPort;

      redeclare replaceable model extends SubstancesDecomposition "Just because Modelica in today version cannot work properly with nested connectors"
        Chemical.Interfaces.SubstancePort_a O2 annotation (Placement(transformation(extent={{90,50},{110,70}})));
        Chemical.Interfaces.SubstancePort_a CO2 annotation (Placement(transformation(extent={{90,90},{110,110}})));
        Chemical.Interfaces.SubstancePort_a CO annotation (Placement(transformation(extent={{90,10},{110,30}})));
        Chemical.Interfaces.SubstancePort_a HCO3 annotation (Placement(transformation(extent={{-10,90},{10,110}})));
        Chemical.Interfaces.SubstancePort_a H3O annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));
        Chemical.Interfaces.SubstancePort_a H annotation (Placement(transformation(extent={{90,-70},{110,-50}}), iconTransformation(extent={{90,-70},{110,-50}})));
        Chemical.Interfaces.SubstancePort_a H2O annotation (Placement(transformation(extent={{90,-110},{110,-90}})));
      equation
        connect(O2, substances.O2) annotation (Line(points={{100,60},{-72,60},{-72,0},{-100,0}},      color={158,66,200}));
        connect(CO2, substances.CO2) annotation (Line(points={{100,100},{22,100},{22,80},{-76,80},{-76,0},{-100,0},{-100,0}},     color={158,66,200}));
        connect(CO, substances.CO) annotation (Line(points={{100,20},{-70,20},{-70,0},{-100,0}},      color={158,66,200}));
        connect(HCO3, substances.HCO3) annotation (Line(points={{0,100},{-82,100},{-82,0},{-100,0}},      color={158,66,200}));
        connect(H3O, substances.H3O) annotation (Line(points={{0,-60},{-78,-60},{-78,0},{-100,0}},      color={158,66,200}));
        connect(H, substances.H) annotation (Line(points={{100,-60},{88,-60},{88,-46},{-76,-46},{-76,0},{-100,0}},      color={158,66,200}));
        connect(H2O, substances.H2O) annotation (Line(points={{100,-100},{-82,-100},{-82,0},{-100,0}},      color={158,66,200}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end SubstancesDecomposition;

      redeclare replaceable record extends ThermodynamicState
        "A selection of variables that uniquely defines the thermodynamic state"
        extends Modelica.Icons.Record;
        AbsolutePressure p "Absolute pressure of medium";
        SpecificEnthalpy h "Specific enthalpy";
        MassFraction X[nS] "Mass fractions of substances";
        Types.ElectricPotential v "Electric potential of the substance";
        Types.MoleFraction I "Ionic strengh (mole fraction based)";
        annotation (Documentation(info="<html>
<p>Thermodynamic state of blood is represented by pressure, temperature and base substances composition.</p>
</html>"));
      end ThermodynamicState;

      package stateOfMatter = Chemical.Interfaces.Incompressible
        "Substances model to translate data into substance properties";

      redeclare replaceable model extends ChemicalSolution
        "Free chemical substances"

        Real I = 0 "mole-fraction-based ionic strength";
        ThermodynamicState state;
        BloodGases bloodGases(
          p=p,
          T=T,
          state=state);
        Modelica.Units.SI.MoleFraction aO2;
        Modelica.Units.SI.MoleFraction aCO2;
        Modelica.Units.SI.MoleFraction aHCO3;
        Modelica.Units.SI.MoleFraction aCO;
        Modelica.Units.SI.MoleFraction aH_plus;
        Modelica.Units.SI.ChemicalPotential uO2;
        Modelica.Units.SI.ChemicalPotential uCO2;
        Modelica.Units.SI.ChemicalPotential uHCO3;
        Modelica.Units.SI.ChemicalPotential uCO;
        Modelica.Units.SI.ChemicalPotential uH_plus;
        Modelica.Units.SI.MolarEnthalpy hO2;
        Modelica.Units.SI.MolarEnthalpy hCO2;
        Modelica.Units.SI.MolarEnthalpy hHCO3;
        Modelica.Units.SI.MolarEnthalpy hCO;
        Modelica.Units.SI.MolarEnthalpy hH_plus;

        Modelica.Units.SI.MolarVolume molarVolume;

      public
           Real water_S, water_H, water_G, water_G0, water_H0, u_water;

          Types.Fraction pct "Plasmacrit";
          Real fH2O_P "Amount of free H2O particles in 1 kg of blood plasma [mol/kg]";
          Real x_P "Amount of free particles in 1 kg of blood plasma [mol/kg]";

      equation

        v=0 "electric potential is not used without external flows of charge";

        state = setState_phX(p, h, X);

        T = temperature(state);

        aO2 = bloodGases.pO2/p;
        aCO2 = bloodGases.pCO2/p;
        aCO = bloodGases.pCO/p;
        aH_plus = 10^(-bloodGases.pH);
        aHCO3 = bloodGases.cHCO3 / molarVolume;

        molarVolume = 0.001 "0.001 L/mmol";

        uO2 = Modelica.Constants.R*T*log(aO2) +
          Chemical.Interfaces.IdealGas.electroChemicalPotentialPure(
            Substances.O2_g,
            T,
            p,
            v,
            I);
        uCO2 = Modelica.Constants.R*T*log(aCO2) +
          Chemical.Interfaces.IdealGas.electroChemicalPotentialPure(
            Substances.CO2_g,
            T,
            p,
            v,
            I);
        uHCO3 = Modelica.Constants.R*T*log(aHCO3) +
          Chemical.Interfaces.IdealGas.electroChemicalPotentialPure(
            Substances.HCO3,
            T,
            p,
            v,
            I);

        uCO = Modelica.Constants.R*T*log(aCO) +
          Chemical.Interfaces.IdealGas.electroChemicalPotentialPure(
            Substances.CO_g,
            T,
            p,
            v,
            I);
        uH_plus = Modelica.Constants.R*T*log(aH_plus) +
          Chemical.Interfaces.Incompressible.electroChemicalPotentialPure(
            Substances.H,
            T,
            p,
            v,
            I);

        hO2 = Chemical.Interfaces.IdealGas.molarEnthalpy(
            Substances.O2_g,
            T,
            p,
            v,
            I);
        hCO2 = Chemical.Interfaces.IdealGas.molarEnthalpy(
            Substances.CO2_g,
            T,
            p,
            v,
            I);
        hHCO3 = Chemical.Interfaces.IdealGas.molarEnthalpy(
            Substances.HCO3,
            T,
            p,
            v,
            I);
        hCO = Chemical.Interfaces.IdealGas.molarEnthalpy(
            Substances.CO,
            T,
            p,
            v,
            I);
        hH_plus = Chemical.Interfaces.Incompressible.molarEnthalpy(
            Substances.H,
            T,
            p,
            v,
            I);

        water_S=Chemical.Interfaces.Incompressible.molarEntropyPure(
            Substances.Water, T, p, v, I);
        water_H=Chemical.Interfaces.Incompressible.molarEnthalpyElectroneutral(
            Substances.Water, T, p, v, I);
        water_G=Chemical.Interfaces.Incompressible.electroChemicalPotentialPure(
            Substances.Water, T, p, v, I);

        water_H0=Chemical.Interfaces.Incompressible.molarEnthalpy(
            Substances.Water, 310.15, 101325, 0, 0);
        water_G0=Chemical.Interfaces.Incompressible.electroChemicalPotentialPure(
            Substances.Water, 310.15, 101325, 0, 0);

        pct = plasmacrit(state);

        fH2O_P = state.X[i("H2O_P")]/pct  "Amount of free H2O particles in 1 kg of blood plasma [mol/kg]";
        x_P =
         fH2O_P +
         (state.X[i("CO2")]/CO2.MolarWeight +
         state.X[i("Alb")]/Constants.MM_Alb +
         state.X[i("Glb")]/Constants.MM_Glb +
         state.X[i("Glucose")]/Constants.MM_Glucose +
         state.X[i("PO4")]/PO4.MolarWeight +
         state.X[i("Lactate")]/Constants.MM_Lactate +
         state.X[i("Urea")]/Constants.MM_Urea +
         state.X[i("AminoAcids")]/Constants.MM_AminoAcids +
         state.X[i("Lipids")]/Constants.MM_Lipids +
         state.X[i("KetoAcids")]/Constants.MM_KetoAcids)/pct "Amount of free particles in 1 kg of blood plasma [mol/kg]";

        u_water = Modelica.Constants.R*T*log(fH2O_P/x_P)  +  water_G;

       enthalpyFromSubstances =
         substances.O2.q * actualStream(substances.O2.h_outflow) +
         substances.CO2.q * actualStream(substances.CO2.h_outflow) +
         substances.CO.q * actualStream(substances.CO.h_outflow) +
         substances.HCO3.q * actualStream(substances.HCO3.h_outflow) +
         substances.H.q * actualStream(substances.H.h_outflow) +
         substances.H3O.q * actualStream(substances.H3O.h_outflow) +
         substances.H2O.q * actualStream(substances.H2O.h_outflow)
         "enthalpy from substances";

        massFlows = {
            0,substances.O2.q * Substances.O2.MolarWeight,
            substances.CO2.q * Substances.CO2.MolarWeight  + substances.HCO3.q .* Substances.CO2.MolarWeight,
            substances.CO.q * Substances.CO.MolarWeight,
            0,0,0,0,0,0,0,
            0,0,0,0,0,0,
            0,
            0,0,0,
            0,0,0,0,0,
            0,0,0,
            0,
            0,0,0,
            substances.H2O.q * Substances.Water.MolarWeight};

        substances.O2.u = uO2;
        substances.CO2.u = uCO2;
        substances.CO.u = uCO;
        substances.HCO3.u = uHCO3;
        substances.H3O.u = uH_plus;
        substances.H.u = uH_plus;
        substances.H2O.u = u_water;

        substances.O2.h_outflow = hO2;
        substances.CO2.h_outflow = hCO2;
        substances.CO.h_outflow = hCO;
        substances.HCO3.h_outflow = hHCO3;
        substances.H3O.h_outflow = hH_plus;
        substances.H.h_outflow = hH_plus;
        substances.H2O.h_outflow = water_H;

        annotation (Documentation(info="<html>
<p>Chemical equilibrium is represented by expression of electrochemical potentials of base blood substances.</p>
</html>"));
      end ChemicalSolution;

      replaceable model BloodGases "Hydrogen Ion, Carbon Dioxide, and Oxygen in the Blood"
        input Physiolibrary.Media.Blood.ThermodynamicState state "blood";
        input Modelica.Units.SI.Pressure p=101325 "Pressure";
        input Modelica.Units.SI.Temperature T=310.15 "Temperature";
        input Modelica.Units.SI.ElectricPotential electricPotential=0 "Electric potential";
        input Modelica.Units.SI.MoleFraction moleFractionBasedIonicStrength=0
          "Mole-fraction based ionic strength";
        output Modelica.Units.SI.Pressure pO2(start=101325*87/760)
          "Oxygen partial pressure";
        output Modelica.Units.SI.Pressure pCO2(start=101325*40/760)
          "Carbon dioxide partial pressure";
        output Modelica.Units.SI.Pressure pCO(start=1e-5)
          "Carbon monoxide partial pressure";
        output Physiolibrary.Types.pH pH
          "Blood plasma acidity";
        // protected
        Physiolibrary.Types.VolumeFraction Hct=hematocrit(state) "haematocrit";
        Types.Concentration _tO2=tO2(state) "oxygen content per volume of blood";
        Types.Concentration _tCO2=tCO2(state)
          "carbon dioxide content per volume of blood";
        Types.Concentration _tCO=tCO(state)
          "carbon monoxide content per volume of blood";
        Types.Concentration _tHb=tHb(state)
          "hemoglobin content per volume of blood";
        Types.MoleFraction _FMetHb=FMetHb(state) "fraction of methemoglobin";
        Types.MoleFraction _FHbF=FHbF(state) "fraction of foetalhemoglobin";
        Types.Concentration _ctHb_ery=ctHb_ery(state)
          "hemoglobin concentration in red cells";
        Types.Concentration _tAlb=tAlb(state)
          "albumin concentration in blood plasma";
        Types.MassConcentration _tGlb=tGlb(state)
          "globulin concentration in blood plasma";
        Types.Concentration _tPO4=tPO4(state)
          "inorganic phosphates concentration in blood plasma";
        Types.Concentration _cDPG=cDPG(state) "DPG concentration in blood plasma";
        Types.Concentration _SID=SID(state) "strong ion difference of blood";

        constant Physiolibrary.Types.Temperature T0=273.15 + 37 "normal temperature";
        constant Physiolibrary.Types.pH pH0=7.4 "normal pH";
        constant Physiolibrary.Types.pH pH_ery0=7.19 "normal pH in erythrocyte";
        constant Physiolibrary.Types.Pressure pCO20=(40/760)*101325
          "normal CO2 partial pressure";

        Physiolibrary.Types.Concentration NSIDP;
        Physiolibrary.Types.Concentration NSIDE;
        Physiolibrary.Types.Concentration NSID;
        Physiolibrary.Types.Concentration BEox;
        Physiolibrary.Types.Concentration cdCO2;

        Physiolibrary.Types.pH pH_ery;

        Physiolibrary.Types.GasSolubilityPa aCO2N=0.00023
          "solubility of CO2 in blood plasma at 37 degC";
        Physiolibrary.Types.GasSolubilityPa aCO2=0.00023*10^(-0.0092*(T - 310.15))
          "solubility of CO2 in blood plasma";
        Physiolibrary.Types.GasSolubilityPa aCO2_ery(displayUnit="mmol/l/mmHg") = 0.000195
          "solubility 0.23 (mmol/l)/kPa at 25degC";
        Physiolibrary.Types.GasSolubilityPa aO2=exp(log(0.0105) + (-0.0115*(T - T0)) + 0.5*
            0.00042*(T - T0)^2)/1000 "oxygen solubility in blood";
        Physiolibrary.Types.GasSolubilityPa aCO=(0.00099/0.0013)*aO2
          "carbon monoxide solubility in blood";

        Real pK=6.1 + (-0.0026)*(T - 310.15) "Henderson-Hasselbalch";
        Real pK_ery=6.125 - log10(1 + 10^(pH_ery - 7.84 - 0.06*sO2));

        parameter Real pKa1=2.1 "HPO4^2- dissociation";
        parameter Real pKa2=6.8 "H2PO4^- dissociation";
        parameter Real pKa3=12.7 "H3PO4 dissociation";

        parameter Real betaOxyHb=3.1 "Buffer value for oxygenated Hb without CO2";
        parameter Real pIo=7.13 "Isoelectric pH for oxygenated Hb without CO2";

        parameter Real pKzD=7.73 "Coefficient pKa for NH3+ end of deoxygenated hemoglobin chain";
        parameter Real pKzO=7.25 "Coefficient pKa for NH3+ end of oxygenated hemoglobin chain";
        parameter Real pKcD=7.54
          "10^(pH-pKcR) is the dissociation constatnt for HbNH2 + CO2 <-> HbNHCOO- + H+ ";
        parameter Real pKcO=8.35
          "10^(pH-pKcO) is the dissociation constatnt for O2HbNH2 + CO2 <-> O2HbNHCOO- + H+ ";
        parameter Real pKhD=7.52
          "10^(pH-pKhD) is the dissociation constatnt for HbAH <-> HbA- + H+ ";
        parameter Real pKhO=6.89
          "10^(pH-pKhO) is the dissociation constatnt for O2HbAH <-> O2HbA- + H+ ";

        Physiolibrary.Types.Concentration cdCO2N;
        Physiolibrary.Types.Fraction sCO2N;
        Physiolibrary.Types.Fraction fzcON;

        Physiolibrary.Types.Concentration beta;
        Physiolibrary.Types.Concentration cHCO3(start=24.524);

        Physiolibrary.Types.Fraction sO2CO(start=0.962774);
        Physiolibrary.Types.Fraction sCO(start=1.8089495e-07);
        Physiolibrary.Types.Fraction sO2;
        Physiolibrary.Types.Fraction FCOHb;
        Physiolibrary.Types.Concentration ceHb "effective hemoglobin";

        Physiolibrary.Types.Concentration tCO2_P(displayUnit="mmol/l");
        Physiolibrary.Types.Concentration tCO2_ery(displayUnit="mmol/l");

      equation
        cdCO2N = aCO2N*pCO20 "free disolved CO2 concentration at pCO2=40mmHg and T=37degC";

        NSIDP =-(-(_tAlb*66.463)*(0.123*pH0 - 0.631) - _tGlb*(2.5/28) - _tPO4*(10^(
          pKa2 - pH0) + 2 + 3*10^(pH0 - pKa3))/(10^(pKa1 + pKa2 - 2*pH0) + 10^(pKa2 -
          pH0) + 1 + 10^(pH0 - pKa3)) - cdCO2N*10^(pH0 - pK))
          "strong ion difference of blood plasma at pH=7.4, pCO2=40mmHg, T=37degC and sO2=1";

        fzcON = 1/(1 + 10^(pKzO - pH_ery0) + cdCO2N*10^(pH_ery0 - pKcO))
          "fraction of hemoglobin units with HN2 form of amino-terminus at pH=7.4 (pH_ery=7.19), pCO2=40mmHg, T=37degC and sO2=1";
        sCO2N = 10^(pH_ery0 - pKcO)*fzcON*cdCO2N
          "CO2 saturation of hemoglobin amino-termini at pH=7.4 (pH_ery=7.19), pCO2=40mmHg, T=37degC and sO2=1";
        NSIDE =-(-cdCO2N*10^(pH_ery0 - pK) - _ctHb_ery*(betaOxyHb*(pH_ery0 - pIo) +
          sCO2N*(1 + 2*10^(pKzO - pH_ery0))/(1 + 10^(pKzO - pH_ery0)) + 0.82))
          "strong ion difference of red cells at pH=7.4 (pH_ery=7.19), pCO2=40mmHg, T=37degC and sO2=1";

        NSID = Hct*NSIDE + (1 - Hct)*NSIDP
          "strong ion difference of blood at pH=7.4 (pH_ery=7.19), pCO2=40mmHg, T=37degC and sO2=1";

        BEox =NSID - _SID "base excess of oxygenated blood";

        beta =2.3*_tHb + 8*_tAlb + 0.075*_tGlb + 0.309*_tPO4
                                                          "buffer value of blood";

        pH =pH0 + (1/beta)*(((BEox + 0.3*(1 - sO2CO))/(1 - _tHb/43)) - (cHCO3 - 24.5))
          "Van Slyke (simplified electroneutrality equation)";
        pH_ery = 7.19 + 0.77*(pH - 7.4) + 0.035*(1 - sO2);

        sO2CO =hemoglobinDissociationCurve(
            pH,
            pO2,
            pCO2,
            pCO,
            T,
            _tHb,
            _cDPG,
            _FMetHb,
            _FHbF);

        sCO*(pO2 + 218*pCO) = 218*sO2CO*(pCO);
        FCOHb =sCO*(1 - _FMetHb);
        _tCO = aCO*pCO + FCOHb*_tHb;

        ceHb =_tHb*(1 - FCOHb - _FMetHb);
        sO2 =(sO2CO*(_tHb*(1 - _FMetHb)) - _tHb*FCOHb)/ceHb;
        _tO2 = aO2*pO2 + ceHb*sO2;

        cdCO2 = aCO2*pCO2;
        cdCO2*10^(pH - pK) = cHCO3;

        tCO2_P = cHCO3 + cdCO2;
        tCO2_ery = aCO2_ery*pCO2*(1 + 10^(pH_ery - pK_ery));
        _tCO2 = tCO2_ery*Hct + tCO2_P*(1 - Hct);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p><a href=\"https://www.siggaard-andersen.dk/\">Hydrogen Ion, Carbon Dioxide, and Oxygen in the Blood (siggaard-andersen.dk)</a></p>
<p><a href=\"https://www.creativeconnections.cz/medsoft/2013/Medsoft_2013_Matejak.pdf\">Medsoft_2013_Matejak.pdf (creativeconnections.cz)</a></p>
</html>"));
      end BloodGases;

      redeclare model extends BaseProperties(final standardOrderComponents=true)
        "Base properties of medium"

        InputElectricPotential v "electric potential";
        InputMassFraction I "ionic strength";

        // Local connector definition, used for equation balancing check
        connector InputElectricPotential = input Types.ElectricPotential
          "Electric potential as input signal connector";

      equation
        d = 1057;
        h = specificEnthalpies_TpvI(T,p,v,I)*X;
        u = h - p/d;
        MM = 1;
        R_s = 8.3144;
        state.p = p;
        state.h = h;
        state.X = X;
        state.v = v;
        state.I = I;
        annotation (Documentation(info="<html>
<p>Simplification of blood:</p>
<p>Constant density and constant heat capacity</p>
</html>"));
      end BaseProperties;

      redeclare function extends specificEnthalpies_TpvI
      algorithm
        specificEnthalpy:={0,
           Chemical.Interfaces.IdealGas.specificEnthalpy(Substances.O2,T,p,v,I),
           Chemical.Interfaces.IdealGas.specificEnthalpy(Substances.CO2,T,p,v,I),
           Chemical.Interfaces.IdealGas.specificEnthalpy(Substances.CO,T,p,v,I),
           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
           0,0,0,
           0,0,0,0,0,
           0,0,0,
           0,
           0,0,0,
           Chemical.Interfaces.Incompressible.specificEnthalpy(Substances.Water,T,p,v,I)};
      end specificEnthalpies_TpvI;

      replaceable function hemoglobinDissociationCurve "Hemoglobin dissociation curve as saturation of O2 and CO2 on hemoglobin (excluded methemoglobin)"
        input Real pH "acidity";
        input Real pO2 "oxygen partial pressure";
        input Real pCO2(min=Modelica.Constants.small) "carbon dioxide partial pressure";
        input Real pCO "carbon monoxide partial pressure";
        input Real T "temperature";
        input Real tHb "total hemoglobin";
        input Real cDPG "diphosphoglicerate";
        input Real FMetHb "methemoglobin fraction";
        input Real FHbF "foethel hemoglobin fraction";
        output Real sO2CO "oxygen and carbon monoxide saturation";
      protected
        constant Physiolibrary.Types.Temperature T0=273.15 + 37 "normal temperature";
        constant Physiolibrary.Types.pH pH0=7.4 "normal pH";
        constant Physiolibrary.Types.pH pH_ery0=7.19 "normal pH in erythrocyte";
        constant Physiolibrary.Types.Pressure pCO20=(40/760)*101325
          "normal CO2 partial pressure";

        parameter Physiolibrary.Types.Concentration cDPG0=5 "normal DPG,used by a";
        parameter Real dadcDPG0=0.3 "used by a";
        parameter Real dadcDPGxHbF=-0.1 "or perhabs -0.125";
        parameter Real dadpH=-0.88 "used by a";
        parameter Real dadlnpCO2=0.048 "used by a";
        parameter Real dadxMetHb=-0.7 "used by a";
        parameter Real dadxHbF=-0.25 "used by a";

        Real aO2;
        Real cdO2;
        Physiolibrary.Types.Fraction sO2;
        Physiolibrary.Types.Pressure pO2CO(min=Modelica.Constants.small);
        Physiolibrary.Types.Concentration cO2Hb;
        Physiolibrary.Types.Fraction sCO;
        Physiolibrary.Types.Concentration ceHb;
        Real a;
        Real k;
        Real x;
        Real y;
        Real h;
        Physiolibrary.Types.Fraction FCOHb;
      algorithm

        a := dadpH*(pH - pH0) + dadlnpCO2*log(max(1e-15 + 1e-22*pCO2, pCO2/pCO20)) +
          dadxMetHb*FMetHb + (dadcDPG0 + dadcDPGxHbF*FHbF)*(cDPG/cDPG0 - 1);
        k := 0.5342857;
        h := 3.5 + a;

        pO2CO := pO2 + 218*pCO;
        x := log(pO2CO/7000) - a - 0.055*(T - T0);
        y := 1.8747 + x + h*tanh(k*x);

        sO2CO := exp(y)/(1 + exp(y));

        annotation (
        derivative = hemoglobinDissociationCurve_der,
        Documentation(info="<html>
<p><span style=\"font-size: 8pt;\">Hemoglobin-Oxygen dissociation relation based on OSA (Oxygen Status Algorithm) by Siggaard Andersen.</span></p>
<p><a href=\"https://www.siggaard-andersen.dk/\">Hydrogen Ion, Carbon Dioxide, and Oxygen in the Blood (siggaard-andersen.dk)</a></p>
</html>"));
      end hemoglobinDissociationCurve;

      replaceable function hemoglobinDissociationCurve_der "Derivative of Hemoglobin dissociation curve as saturation of O2 and CO2 on hemoglobin (excluded methemoglobin)"
        input Real pH "acidity";
        input Real pO2 "oxygen partial pressure";
        input Real pCO2 "carbon dioxide partial pressure";
        input Real pCO "carbon monoxide partial pressure";
        input Real T "temperature";
        input Real tHb "total hemoglobin";
        input Real cDPG "diphosphoglicerate";
        input Real FMetHb "methemoglobin fraction";
        input Real FHbF "foethel hemoglobin fraction";
        input Real der_pH "derivative of acidity";
        input Real der_pO2 "derivative of oxygen partial pressure";
        input Real der_pCO2 "derivative of carbon dioxide partial pressure";
        input Real der_pCO "derivative of carbon monoxide partial pressure";
        input Real der_T "derivative of temperature";
        input Real der_tHb "derivative of total hemoglobin";
        input Real der_cDPG "derivative of diphosphoglicerate";
        input Real der_FMetHb "derivative of methemoglobin fraction";
        input Real der_FHbF "derivative of foethel hemoglobin fraction";
        output Real der_sO2CO "derivative of oxygen and carbon monoxide saturation";
      protected
        constant Physiolibrary.Types.Temperature T0=273.15 + 37 "normal temperature";
        constant Physiolibrary.Types.pH pH0=7.4 "normal pH";
        constant Physiolibrary.Types.pH pH_ery0=7.19 "normal pH in erythrocyte";
        constant Physiolibrary.Types.Pressure pCO20=(40/760)*101325
          "normal CO2 partial pressure";

        parameter Physiolibrary.Types.Concentration cDPG0=5 "normal DPG,used by a";
        parameter Real dadcDPG0=0.3 "used by a";
        parameter Real dadcDPGxHbF=-0.1 "or perhabs -0.125";
        parameter Real dadpH=-0.88 "used by a";
        parameter Real dadlnpCO2=0.048 "used by a";
        parameter Real dadxMetHb=-0.7 "used by a";
        parameter Real dadxHbF=-0.25 "used by a";

        Real aO2;
        Real cdO2;
        Physiolibrary.Types.Fraction sO2;
        Physiolibrary.Types.Pressure pO2CO;
        Physiolibrary.Types.Concentration cO2Hb;
        Physiolibrary.Types.Fraction sCO;
        Physiolibrary.Types.Concentration ceHb;
        Real a, a_der;
        Real k;
        Real x,x_der;
        Real y,y_der;
        Real h;
        Physiolibrary.Types.Fraction FCOHb;
      algorithm

        a := dadpH*(pH - pH0) + dadlnpCO2*log(max(1e-15 + 1e-22*pCO2, pCO2/pCO20)) +
          dadxMetHb*FMetHb + (dadcDPG0 + dadcDPGxHbF*FHbF)*(cDPG/cDPG0 - 1);

        a_der := dadpH*der_pH + dadlnpCO2*(der_pCO2/pCO20)/(max(1e-15 + 1e-22*pCO2, pCO2/pCO20)) +
          dadxMetHb*der_FMetHb +
          (dadcDPGxHbF*der_FHbF)*(cDPG/cDPG0 - 1)+(dadcDPG0 + dadcDPGxHbF*FHbF)*(der_cDPG/cDPG0);

        k := 0.5342857;
        h := 3.5 + a;

        pO2CO := pO2 + 218*pCO;
        x := log(pO2CO/7000) - a - 0.055*(T - T0);

        x_der := (der_pO2 + 218*der_pCO)/(pO2CO) - a_der - 0.055*der_T;
        y := 1.8747 + x + h*tanh(k*x);
        y_der := x_der + a_der*tanh(k*x) + h*(k*4*x_der/((exp(k*x)+exp(-k*x))^2));

        der_sO2CO := y_der*exp(y)/((1 + exp(y))^2);

        annotation (Documentation(info="<html>
<p><span style=\"font-size: 8pt;\">Hemoglobin-Oxygen dissociation relation based on OSA (Oxygen Status Algorithm) by Siggaard Andersen.</span></p>
<p><a href=\"https://www.siggaard-andersen.dk/\">Hydrogen Ion, Carbon Dioxide, and Oxygen in the Blood (siggaard-andersen.dk)</a></p>
</html>"));
      end hemoglobinDissociationCurve_der;

      redeclare replaceable function extends setState_pTX "Thermodynamic state"
        input Types.ElectricPotential v=0 "electric potential";
        input MassFraction I=0 "ionic strength";
      algorithm
        state.h := specificEnthalpies_TpvI(T,p,v,I)*X;
        state.p := p;
        state.X := X;
        state.v := v;
        state.I := I;
        annotation (Documentation(info="<html>
<p>Set thermodynamic state</p>
</html>"));
      end setState_pTX;

      redeclare replaceable function extends setState_phX "Thermodynamic state"
        input Types.ElectricPotential v=0 "electric potential";
        input MassFraction I=0 "ionic strength";
      algorithm
        state.p := p;
        state.h := h;
        state.X := X;
        state.v := v;
        state.I := I;
        annotation (Documentation(info="<html>
<p>Set thermodynamic state based on constant heat capacity</p>
</html>"));
      end setState_phX;

      redeclare replaceable function extends density "Density"
      algorithm
        d := 1057;
        annotation (Documentation(info="<html>
<p>constant density</p>
</html>"));
      end density;

      redeclare replaceable function extends specificEnthalpy "Specific enthalpy"
      algorithm
        h := state.h;
        annotation (Documentation(info="<html>
<p>Heat energy from temperature based on constant heat capacity</p>
</html>"));
      end specificEnthalpy;

      redeclare replaceable function extends specificHeatCapacityCp "Specific heat capacityReturn specific heat capacity at constant pressure"
      algorithm
        cp := 3490;
        annotation (Documentation(info="<html>
<p>Constant specific heat capacity</p>
</html>"));
      end specificHeatCapacityCp;

      redeclare replaceable function extends temperature "Temperature"
      algorithm
        T := Modelica.Math.Nonlinear.solveOneNonlinearEquation(function temperatureError(p=state.p, X=state.X,  h=state.h), 273.15, 330,     1e-2);
        annotation (Documentation(info="<html>
<p>Temperature</p>
</html>"));
      end temperature;

      redeclare replaceable function extends pressure "Pressure"
      algorithm
        p := state.p;
        annotation (Documentation(info="<html>
<p>Pressure</p>
</html>"));
      end pressure;

      function hematocrit "Blood hematocrit"
        extends GetFraction;
      protected
        Types.MassFraction XP "Mass fraction of blood plasma in blood", XE "Mass fraction of red cells in blood";
      algorithm
        XP := state.X[i("H2O_P")] + state.X[i("CO2")] + state.X[i("Alb")] + state.X[i("Glb")] + state.X[i("Glucose")] +
         state.X[i("PO4")] + state.X[i("Lactate")] + state.X[i("Urea")] + state.X[i("AminoAcids")] + state.X[i("Lipids")] + state.X[i("KetoAcids")];
        XE := state.X[i("H2O_E")] + state.X[i("Hb")] + state.X[i("DPG")];
        F := XE/ (XE + XP);
      end hematocrit;

      function plasmacrit "Blood plasmacrit"
        extends GetFraction;
      algorithm
        F := 1 - hematocrit(state);
      end plasmacrit;

      function tO2 "Total oxygen in blood"
        extends GetConcentration;
      algorithm
        C := density(state) * state.X[i("O2")] / O2.MolarWeight;
      end tO2;

      function sO2 "Oxygen saturation"
        extends GetFraction;
      algorithm
        F := (state.X[i("O2")] / O2.MolarWeight) / (state.X[i("Hb")] / Constants.MM_Hb);
      end sO2;

      function tCO2 "Total carbon dioxide in blood"
        extends GetConcentration;
      algorithm
        C := density(state) * state.X[i("CO2")] / CO2.MolarWeight;
      end tCO2;

      function tCO "Total carbon monoxide in blood"
        extends GetConcentration;
      algorithm
        C := density(state) * state.X[i("CO")] / CO.MolarWeight;
      end tCO;

      function tHb "Total hemoglobine in blood"
        extends GetConcentration;
      algorithm
        C := density(state) * state.X[i("Hb")] / Constants.MM_Hb;
      end tHb;

      function FMetHb "Methemoglobine fraction"
        extends GetFraction;
      algorithm
        F := (state.X[i("MetHb")] / state.X[i("Hb")]);
      end FMetHb;

      function FHbF "Foetalhemoglobine fraction"
        extends GetFraction;
      algorithm
        F := (state.X[i("HbF")] / state.X[i("Hb")]);
      end FHbF;

      function ctHb_ery "Total hemoglobine in erythrocytes"
        extends GetConcentration;
      algorithm
        C := tHb(state) / hematocrit(state);
      end ctHb_ery;

      function tAlb "Total albumine in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("Alb")] / Constants.MM_Alb) / plasmacrit(state);
      end tAlb;

      function tGlb "Total globulin in blood plasma [g/L]"
        extends GetMassConcentration;
      algorithm
        R := (density(state) * state.X[i("Glb")])  / plasmacrit(state);
      end tGlb;

      function tPO4 "Total anorganic phosphates in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("PO4")] / PO4.MolarWeight) / plasmacrit(state);
      end tPO4;

      function cDPG "Total diphosphoglycerate in erythrocytes"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("DPG")] / Constants.MM_DPG) / hematocrit(state);
      end cDPG;

      function SID "Strong ion difference of blood"
        extends GetConcentration;
      algorithm
        C := density(state) * state.X[i("SID")];
      end SID;

      function glucose "Total glucose in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("Glucose")] / Constants.MM_Glucose) / plasmacrit(state);
      end glucose;

      function lactate "Total lactate in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("Lactate")] / Constants.MM_Lactate) / plasmacrit(state);
      end lactate;

      function urea "Total urea in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("Urea")] / Constants.MM_Urea) / plasmacrit(state);
      end urea;

      function aminoAcids "Total amino acids in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("AminoAcids")] / Constants.MM_AminoAcids) / plasmacrit(state);
      end aminoAcids;

      function lipids "Total faty acids in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("Lipids")] / Constants.MM_Lipids) / plasmacrit(state);
      end lipids;

      function ketoAcids "Total ketoacids in blood plasma"
        extends GetConcentration;
      algorithm
        C := (density(state) * state.X[i("KetoAcids")] / Constants.MM_KetoAcids) / plasmacrit(state);
      end ketoAcids;

      function epinephrine "Epinephrine in blood plasma"
        extends GetMassConcentration(R(displayUnit="ng/l",nominal=SubstanceFlowNominal[i("Epinephrine")]));
      algorithm
        R := density(state) * state.X[i("Epinephrine")]  / plasmacrit(state);
      end epinephrine;

      function norepinephrine "Norepinephrine in blood plasma"
        extends GetMassConcentration(R(displayUnit="ng/l",nominal=SubstanceFlowNominal[i("Norepinephrine")]));
      algorithm
        R := density(state) * state.X[i("Norepinephrine")]  / plasmacrit(state);
      end norepinephrine;

      function vasopressin "Vasopressin in blood plasma"
        extends GetConcentration(C(displayUnit="pmol/l",nominal=SubstanceFlowNominal[i("Vasopressin")]));
      algorithm
        C := (density(state) * state.X[i("Vasopressin")] / Constants.MM_Vasopressin) / plasmacrit(state);
      end vasopressin;

      function insulin "Insulin in blood plasma"
        extends GetActivity(A(unit="U/m3",displayUnit="mU/l"));
      algorithm
        A := (density(state) * (state.X[i("Insulin")] / 6e-9) / Constants.MM_Insulin) / plasmacrit(state) "conversion factor for human insulin is 1 mU/L = 6.00 pmol/L";
      end insulin;

      function glucagon "Glucagon in blood plasma"
        extends GetMassConcentration(R(displayUnit="ng/l",nominal=SubstanceFlowNominal[i("Glucagon")]));
      algorithm
        R := density(state) * state.X[i("Glucagon")]  / plasmacrit(state);
      end glucagon;

      function thyrotropin "Thyrotropin in blood plasma"
        extends GetConcentration(C(displayUnit="pmol/l",nominal=SubstanceFlowNominal[i("Thyrotropin")]));
      algorithm
        C := (density(state) * state.X[i("Thyrotropin")] / Constants.MM_Thyrotropin) / plasmacrit(state);
      end thyrotropin;

      function thyroxine "Thyroxine in blood plasma"
        extends GetMassConcentration(R(displayUnit="ug/l",nominal=SubstanceFlowNominal[i("Thyroxine")]));
      algorithm
        R := density(state) * state.X[i("Thyroxine")]  / plasmacrit(state);
      end thyroxine;

      function leptin "Leptin in blood plasma"
        extends GetMassConcentration(R(displayUnit="ug/l",nominal=SubstanceFlowNominal[i("Leptin")]));
      algorithm
        R := density(state) * state.X[i("Leptin")]  / plasmacrit(state);
      end leptin;

      function desglymidodrine "Desglymidodrine in blood plasma"
        extends GetMassConcentration(R(displayUnit="ug/l"));
      algorithm
        R := density(state) * state.X[i("Desglymidodrine")]  / plasmacrit(state);
      end desglymidodrine;

      function angiotensin2 "Angiotensin2 in blood plasma"
        extends GetMassConcentration(R(displayUnit="ng/l",nominal=SubstanceFlowNominal[i("Angiotensin2")]));
      algorithm
         R := density(state) * state.X[i("Angiotensin2")]  / plasmacrit(state);
      end angiotensin2;

      function alphaBlockers "Alpha blockers effect in blood plasma"
        extends GetFraction;
      algorithm
        F := state.X[i("AlphaBlockers")]/1e-6;
      end alphaBlockers;

      function betaBlockers "Beta blockers effect in blood plasma"
        extends GetFraction;
      algorithm
        F := state.X[i("BetaBlockers")]/1e-6;
      end betaBlockers;

      function anesthesiaVascularConductance "Anesthesia vascular conductance effect in blood plasma"
        extends GetFraction;
      algorithm
        F := state.X[i("AnesthesiaVascularConductance")]/1e-6;
      end anesthesiaVascularConductance;

      function aldosterone "Aldosterone in blood plasma"
        extends GetConcentration(C(displayUnit="nmol/l",nominal=SubstanceFlowNominal[i("Aldosterone")]));
      algorithm
        C := (density(state) * state.X[i("Aldosterone")] / Constants.MM_Aldosterone) / plasmacrit(state);
      end aldosterone;

      function renin "Renin PRA in blood plasma"
        extends GetActivity(A(unit="ng/ml/h",displayUnit="ng/ml/h"));
      algorithm
        A := (density(state) * (state.X[i("Renin")] / (1e-12 * 0.6 * 11.2)))  / plasmacrit(state) "conversion factor from PRA (ng/mL/h) to DRC (mU/L) is 11.2, μIU/mL (mIU/L) * 0.6 = pg/mL";
      end renin;

      function X "To set mass fractions in blood"

        input Types.Fraction hematocrit = 0.44;
        input Types.Concentration tO2 = 8.16865,
                tCO2 = 21.2679 "Total carbon dioxide in arterial blood",
                tCO = 1.512e-6,
                tHb = 8.4;
        input Types.Fraction FMetHb=0.005,
                FHbF=0.005;
        input Types.Concentration tAlb = 0.66;
        input Types.MassConcentration tGlb = 28;

        input Types.Concentration tPO4 = 0.153,
                cDPG = 5.4,
                glucose = 6.08,
                lactate = 1.04,
                urea = 6.64,
                aminoAcids = 4.97,
                lipids = 1.23,
                ketoacids = 4.88e-2,
                BEox = 0;

         input Types.MassConcentration
                epinephrine(displayUnit="ng/L")=40e-9,
                norepinephrine(displayUnit="ng/L")=240e-9;
         input Types.Concentration
                vasopressin(displayUnit="pmol/L")=1.84e-9;
         input Real
                insulin(displayUnit="mU/L")=19.91;
         input Types.MassConcentration
                glucagon(displayUnit="ng/L")=69.68e-9;
         input Types.Concentration
                thyrotropin(displayUnit="pmol/L")=4.03e-9;
         input Types.MassConcentration
                thyroxine(displayUnit="ug/L")=79.6e-6,
                leptin(displayUnit="ug/L")=7.96e-6,
                desglymidodrine(displayUnit="ug/L")=1e-11;
        input Types.Fraction
                alphaBlockers = Modelica.Constants.small,
                betaBlockers = Modelica.Constants.small,
                anesthesiaVascularConductance = 1;
        input Types.MassConcentration
                angiotensin2(displayUnit="ng/L")=20e-9;
        input Real renin(displayUnit="ng/mL/h")=2;
        input Types.Concentration
                aldosterone(displayUnit="nmol/L")=0.33e-6;
        input Types.MassConcentration H2O_plasma = 932.75;
        input Types.MassConcentration H2O_ery = 694;
        output Types.MassFraction X[nS];
       // output Types.Fraction XE,XP,Hct;
      protected
        Types.Density density;
        Types.Fraction plasmacrit;
        Types.Concentration NSID;
      algorithm
        density := 1054;
        plasmacrit := 1-hematocrit;
        NSID := (1 - hematocrit) * (zAlbNAP * tAlb + zGlbNAP * tGlb + zPO4NAP * tPO4 + ztCO2NAP) + hematocrit * (zHbNAE * (tHb / hematocrit) + ztCO2NAE);

        //X[i("RBC")] := hematocrit;
        X[i("H2O_P")] := (plasmacrit*H2O_plasma)/density;
        X[i("H2O_E")] := (hematocrit*H2O_ery)/density;
        X[i("O2")] := (tO2*O2.MolarWeight)/density;
        X[i("CO2")] := (tCO2*CO2.MolarWeight)/density;
        X[i("CO")] := (tCO*CO.MolarWeight)/density;
        X[i("Hb")] := (tHb*Constants.MM_Hb)/density;
        X[i("MetHb")] := FMetHb*X[
          i("Hb")];
        X[i("HbF")] := FHbF*X[i("Hb")];
        X[i("Alb")] := plasmacrit*(tAlb*Constants.MM_Alb)/
          density;
        X[i("Glb")] := plasmacrit*tGlb/density;
        X[i("PO4")] := plasmacrit*(tPO4*PO4.MolarWeight)/
          density;
        X[i("DPG")] := hematocrit*(cDPG*Constants.MM_DPG)/
          density;
        X[i("Glucose")] := plasmacrit*(glucose*Constants.MM_Glucose)
          /density;
        X[i("Lactate")] := plasmacrit*(lactate*Constants.MM_Lactate)
          /density;
        X[i("Urea")] := plasmacrit*(urea*Constants.MM_Urea)
          /density;
        X[i("AminoAcids")] := plasmacrit*(aminoAcids*
          Constants.MM_AminoAcids)/density;
        X[i("Lipids")] := plasmacrit*(lipids*Constants.MM_Lipids)
          /density;
        X[i("KetoAcids")] := plasmacrit*(ketoacids*
          Constants.MM_KetoAcids)/density;
        X[i("SID")] := (NSID - BEox)/density;
        X[i("Epinephrine")] := plasmacrit*(epinephrine)/
          density;
        X[i("Norepinephrine")] := plasmacrit*(
          norepinephrine)/density;
        X[i("Vasopressin")] := plasmacrit*(vasopressin*
          Constants.MM_Vasopressin)/density;
        X[i("Insulin")] := plasmacrit*(6e-9*insulin*
          Constants.MM_Insulin)/density
          "conversion factor for human insulin is 1 mU/L = 6.00 pmol/L";
        X[i("Glucagon")] := plasmacrit*(glucagon)/density;
        X[i("Thyrotropin")] := plasmacrit*(thyrotropin*
          Constants.MM_Thyrotropin)/density;
        X[i("Thyroxine")] := plasmacrit*(thyroxine)/
          density;
        X[i("Leptin")] := plasmacrit*(leptin)/density;
        X[i("Desglymidodrine")] := plasmacrit*(
          desglymidodrine)/density;
        X[i("AlphaBlockers")] := 1e-6 * alphaBlockers;
        X[i("BetaBlockers")] := 1e-6 * betaBlockers;
        X[i("AnesthesiaVascularConductance")] :=
          1e-6 * anesthesiaVascularConductance;
        X[i("Angiotensin2")] := plasmacrit*(angiotensin2)/
          density;
        X[i("Renin")] := plasmacrit*(1e-12*0.6*11.2*renin)/
          density
          "conversion factor from PRA (ng/mL/h) to DRC (mU/L) is 11.2, μIU/mL (mIU/L) * 0.6 = pg/mL";
        X[i("Aldosterone")] := plasmacrit*(aldosterone*
          Constants.MM_Aldosterone)/density;
       /*
 XP := X[i("H2O_P")] + X[i("CO2")] + X[i("Alb")] + X[i("Glb")] + X[i("Glucose")] +
   X[i("PO4")] + X[i("Lactate")] + X[i("Urea")] + X[i("AminoAcids")] + X[i("Lipids")] + X[i("Keannotation 0toAcids")];
  XE := X[i("H2O_E")] + X[i("Hb")] + X[i("DPG")];
  Hct := XE/ (XE + XP);
  */
      end X;

    end Blood;

    package Water "Incompressible water with constant heat capacity"
      extends Interfaces.PartialMedium(
        ThermoStates=Modelica.Media.Interfaces.Choices.IndependentVariables.pTX,
        final mediumName="Water",
        substanceNames={"H2O"},
        final singleState=true,
        final reducedX=true,
        final fixedX=false,
        reference_T=310.15,
        reference_p=101325,
        reference_X={1},
        SpecificEnthalpy(nominal=1.0e5),
        Density(start=1e3, nominal=1e3),
        AbsolutePressure(start=1.0e5, nominal=1.0e5),
        Temperature(
          min=273,
          max=350,
          start=310.15));

    protected
      package stateOfMatter = Chemical.Interfaces.Incompressible
        "Substances model to translate data into substance properties";

    public
      redeclare connector extends SubstancesPort
         Chemical.Interfaces.SubstancePort_a H2O "Free water molecule (in pure water is only cca 1 mol/kg free water molecules, other cca 54.5 mols are bounded together by hydrogen bonds)";
         Chemical.Interfaces.SubstancePort_a H "Free hydrogen ion H+";
         Chemical.Interfaces.SubstancePort_a O2 "Free oxygen molecule";
         Chemical.Interfaces.SubstancePort_a H2 "Free hydrogen molecule";
         Chemical.Interfaces.SubstancePort_a OH "Free hydroxide molecule OH-";
         Modelica.Electrical.Analog.Interfaces.Pin cathode "Electric cathode";
         Modelica.Electrical.Analog.Interfaces.Pin anode "Electric anode";
      end SubstancesPort;

    redeclare replaceable model extends SubstancesDecomposition "Just because Modelica in today version cannot work properly with nested connectors"
      Chemical.Interfaces.SubstancePort_a H2O annotation (Placement(transformation(extent={{90,-110},{110,-90}})));
      Chemical.Interfaces.SubstancePort_a H annotation (Placement(transformation(extent={{90,-70},{110,-50}}), iconTransformation(extent={{90,-70},{110,-50}})));
      Chemical.Interfaces.SubstancePort_a O2 annotation (Placement(transformation(extent={{90,50},{110,70}})));
      Chemical.Interfaces.SubstancePort_a H2 annotation (Placement(transformation(extent={{90,90},{110,110}})));
      Chemical.Interfaces.SubstancePort_a OH annotation (Placement(transformation(extent={{92,-10},{112,10}})));
      Modelica.Electrical.Analog.Interfaces.PositivePin cathode annotation (Placement(transformation(extent={{-10,90},{10,110}})));
      Modelica.Electrical.Analog.Interfaces.NegativePin anode annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
    equation
      connect(H2O, substances.H2O) annotation (Line(points={{100,-100},{56,-100},{56,-70},{-80,-70},{-80,0},{-100,0}},
                                                                                                          color={158,66,200}));
      connect(H, substances.H) annotation (Line(points={{100,-60},{88,-60},{88,-46},{-76,-46},{-76,0},{-100,0}},      color={158,66,200}));
      connect(O2, substances.O2) annotation (Line(points={{100,60},{-72,60},{-72,0},{-100,0}},      color={158,66,200}));
      connect(H2, substances.H2) annotation (Line(points={{100,100},{22,100},{22,80},{-76,80},{-76,0},{-100,0},{-100,0}},     color={158,66,200}));
      connect(OH, substances.OH) annotation (Line(points={{102,0},{-100,0}},                        color={158,66,200}));
      connect(cathode, substances.cathode) annotation (Line(points={{0,100},{-100,100},{-100,0},{-100,0}}, color={0,0,255}));
      connect(anode, substances.anode) annotation (Line(points={{0,-100},{-100,-100},{-100,0}},                     color={0,0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end SubstancesDecomposition;

    public
      redeclare replaceable model extends ChemicalSolution
      protected
          Real I = 0 "mole-fraction-based ionic strength";
          Real logH,logOH,logO2,logH2,eq;
      equation
        v=substances.cathode.v-substances.anode.v;
        0=substances.cathode.i+substances.anode.i;
        _i = substances.cathode.i;
        _i + (-1)*Modelica.Constants.F*eq = 0 "electric current is flow of electrons";

        T = stateOfMatter.solution_temperature(
            {Substances.Water},
            h,
            {1},
            p);

        substances.H.u + substances.OH.u = substances.H2O.u "H+ + OH- <-> H2O";
        2*substances.H.q + 2*eq + 0.5*substances.O2.q = substances.H2O.q "2H+ + 2e- + (1/2)O2 <-> H2O";
        substances.H2.q = 2*substances.H.q + 2*eq "H2 <-> 2H+ + 2e-";

        logH=logOH;

        substances.H2O.u = stateOfMatter.electroChemicalPotentialPure( Substances.Water, T, p, v, I);
        substances.H.u = stateOfMatter.electroChemicalPotentialPure( Substances.H, T, p, v, I) +
                         Modelica.Constants.R*T*logH;
        substances.O2.u = stateOfMatter.electroChemicalPotentialPure( Substances.O2, T, p, v, I) +
                         Modelica.Constants.R*T*logO2;
        substances.H2.u = stateOfMatter.electroChemicalPotentialPure( Substances.H2, T, p, v, I) +
                         Modelica.Constants.R*T*logH2;
        substances.OH.u = stateOfMatter.electroChemicalPotentialPure( Substances.OH, T, p, v, I) +
                         Modelica.Constants.R*T*logOH;

        substances.H2O.h_outflow = stateOfMatter.molarEnthalpy( Substances.Water, T, p, v, I);
        substances.H.h_outflow = stateOfMatter.molarEnthalpy( Substances.H, T, p, v, I);
        substances.O2.h_outflow = stateOfMatter.molarEnthalpy( Substances.O2, T, p, v, I);
        substances.H2.h_outflow = stateOfMatter.molarEnthalpy( Substances.H2, T, p, v, I);
        substances.OH.h_outflow = stateOfMatter.molarEnthalpy( Substances.OH, T, p, v, I);

        enthalpyFromSubstances =
         substances.H2O.q * actualStream(substances.H2O.h_outflow) +
         substances.H.q * actualStream(substances.H.h_outflow) +
         substances.O2.q * actualStream(substances.O2.h_outflow) +
         substances.H2.q * actualStream(substances.H2.h_outflow) +
         substances.OH.q * actualStream(substances.OH.h_outflow)
          "enthalpy from substances";

        massFlows = {substances.H2O.q * Substances.Water.MolarWeight +
         substances.H.q * Substances.H.MolarWeight +
         substances.O2.q * Substances.O2.MolarWeight +
         substances.H2.q * Substances.H2.MolarWeight +
         substances.OH.q * Substances.OH.MolarWeight}
          "mass change of water";
      end ChemicalSolution;

      replaceable function extends specificEnthalpies_TpvI
      algorithm
         specificEnthalpy:=stateOfMatter.specificEnthalpy(
            {Substances.Water},
            T,p,v,I);
      end specificEnthalpies_TpvI;

    public
      redeclare model extends BaseProperties(final standardOrderComponents=true)
        "Base properties of medium"

      equation
        d = 1000;
        h = X*stateOfMatter.specificEnthalpy(
            {Substances.Water},
            T=T,
            p=p);
        u = h - p/d;
        MM = 1/(X*stateOfMatter.specificAmountOfParticles({Substances.Water}));
        R_s = 8.3144/MM;
        state.p = p;
        state.T = T;

      end BaseProperties;

      redeclare replaceable record extends ThermodynamicState
        "A selection of variables that uniquely defines the thermodynamic state"
        extends Modelica.Icons.Record;
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
        annotation (Documentation(info="<html>

</html>"));
      end ThermodynamicState;

      redeclare replaceable function extends setState_pTX
        "Return thermodynamic state as function of p, T and composition X or Xi"
      algorithm
        state.p := p;
        state.T := T;
      end setState_pTX;

      redeclare replaceable function extends setState_phX
        "Return thermodynamic state as function of p, h and composition X or Xi"
      algorithm
        state.p := p;
        state.T := stateOfMatter.solution_temperature(
            {Substances.Water},
            h,
            {1},
            p);
      end setState_phX;

      redeclare function extends specificEnthalpy "Return specific enthalpy"
      algorithm
        h := stateOfMatter.specificEnthalpy(
            Substances.Water,
            T=state.T,
            p=state.p);
      end specificEnthalpy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"
      algorithm
        cp := stateOfMatter.specificHeatCapacityCp(
            Substances.Water,
            T=state.T,
            p=state.p);
        annotation (Documentation(info="<html>

</html>"));
      end specificHeatCapacityCp;

      redeclare function extends density
      algorithm
        d := 1000;
      end density;

      redeclare function extends temperature
      algorithm
        T := state.T;
      end temperature;

      redeclare function extends pressure
      algorithm
        p := state.p;
      end pressure;

      annotation (Documentation(info="<html>
<p>
This package is a <strong>template</strong> for <strong>new medium</strong> models. For a new
medium model just make a copy of this package, remove the
\"partial\" keyword from the package and provide
the information that is requested in the comments of the
Modelica source.
</p>
</html>",   revisions="<html>
<p><i>2021</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
<p>All rights reserved. </p>
</html>"));
    end Water;

      package Air
        import Physiolibrary.Media.Substances.*;
        extends Interfaces.PartialMedium(
           ThermoStates=Modelica.Media.Interfaces.Choices.IndependentVariables.pTX,
           reducedX = false,
           singleState = false,
           substanceNames={"O2","CO2","H2O","N2"},
           reference_X=cat(1, Conc .* C2X, {1 - (Conc * C2X)}),
           SpecificEnthalpy(start=0, nominal=1e3),
           Density(start=1.0, nominal=1.0),
           AbsolutePressure(start=1.0e5, nominal=1.0e5),
           Temperature(min=273.15, max=320.15, start=298.15, nominal=298.15),
           MassFlowRate(nominal=1e-3));

    protected
        package stateOfMatter = Chemical.Interfaces.IdealGas
          "Substances model to translate data into substance properties";

        constant stateOfMatter.SubstanceData substanceData[nS]={
            Chemical.Substances.Oxygen_gas(),
            Chemical.Substances.CarbonDioxide_gas(),
            Chemical.Substances.Water_gas(),
            Chemical.Substances.Nitrogen_gas()} "Definition of the substances";

        constant Modelica.Units.SI.MoleFraction Conc[nS-1]={0.21,0.0004,0.02}
          "sum(*) = 1";

        constant Real C2X[nS-1] = aMM[1:nS-1] ./ (Conc * aMM[1:nS-1] + (1 - sum(Conc)) * aMM[nS]) "Conc to mass fraction coefficient";

        constant Real aMM[nS] = ones(nS) ./ stateOfMatter.specificAmountOfParticles(substanceData, T=298.15, p=101325) "Average molar mass of substance particle";

    public
        redeclare connector extends SubstancesPort
         Chemical.Interfaces.SubstancePort_a O2 "Gaseous oxygen molecule";
         Chemical.Interfaces.SubstancePort_a CO2 "Gaseous hydrogen molecule";
         Chemical.Interfaces.SubstancePort_a H2O "Gaseous H2O molecule";
         Chemical.Interfaces.SubstancePort_a N2 "Gaseaous nitrogen molecule";
        end SubstancesPort;

        redeclare replaceable model extends SubstancesDecomposition "Just because Modelica in today version cannot work properly with nested connectors"

        Chemical.Interfaces.SubstancePort_a O2 annotation (Placement(transformation(extent={{90,50},{110,70}})));
        Chemical.Interfaces.SubstancePort_a CO2 annotation (Placement(transformation(extent={{90,90},{110,110}})));
        Chemical.Interfaces.SubstancePort_a N2 annotation (Placement(transformation(extent={{90,-70},{110,-50}}), iconTransformation(extent={{90,-70},{110,-50}})));
        Chemical.Interfaces.SubstancePort_a H2O annotation (Placement(transformation(extent={{90,-110},{110,-90}})));
        equation
        connect(O2, substances.O2) annotation (Line(points={{100,60},{-72,60},{-72,0},{-100,0}},      color={158,66,200}));
        connect(CO2, substances.CO2) annotation (Line(points={{100,100},{22,100},{22,80},{-76,80},{-76,0},{-100,0},{-100,0}},     color={158,66,200}));
        connect(N2, substances.N2) annotation (Line(points={{100,-60},{88,-60},{88,-46},{-76,-46},{-76,0},{-100,0}},   color={158,66,200}));
        connect(H2O, substances.H2O) annotation (Line(points={{100,-100},{-82,-100},{-82,0},{-100,0}},      color={158,66,200}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end SubstancesDecomposition;

        redeclare replaceable model extends ChemicalSolution
      protected
          Real I = 0 "mole-fraction-based ionic strength";
           Modelica.Units.SI.Molality NpM[nS] "Amount of substance particles per mass of substance";
           Modelica.Units.SI.MoleFraction x_baseMolecule[nS] "Mole fraction of free base molecule of substance";

        //initial equation
        //  substanceMasses = startSubstanceMasses;
        equation
          v=0 "electric potential is not used without external flows of charge";

          NpM = stateOfMatter.specificAmountOfParticles(substanceData,T=T,p=p);

          x_baseMolecule = X.*stateOfMatter.specificAmountOfFreeBaseMolecule(substanceData,T=T,p=p)./(X*NpM);

          T = stateOfMatter.solution_temperature(
              substanceData,
              h,
              X,
              p);

          substances.O2.u =stateOfMatter.electroChemicalPotentialPure(
              Substances.O2_g,
              T,
              p,
              v,
              I) + Modelica.Constants.R*T*log(x_baseMolecule[
            i("O2")]);
          substances.CO2.u =stateOfMatter.electroChemicalPotentialPure(
              Substances.CO2_g,
              T,
              p,
              v,
              I) + Modelica.Constants.R*T*log(x_baseMolecule[
            i("CO2")]);
          substances.H2O.u =stateOfMatter.electroChemicalPotentialPure(
              Substances.H2O_g,
              T,
              p,
              v,
              I) + Modelica.Constants.R*T*log(x_baseMolecule[
            i("H2O")]);
          substances.N2.u =stateOfMatter.electroChemicalPotentialPure(
              Substances.N2_g,
              T,
              p,
              v,
              I) + Modelica.Constants.R*T*log(x_baseMolecule[
            i("N2")]);
          substances.O2.h_outflow = stateOfMatter.molarEnthalpy( Substances.O2_g, T, p, v, I);

          substances.CO2.h_outflow = stateOfMatter.molarEnthalpy( Substances.CO2_g, T, p, v, I);
          substances.H2O.h_outflow = stateOfMatter.molarEnthalpy( Substances.H2O_g, T, p, v, I);
          substances.N2.h_outflow = stateOfMatter.molarEnthalpy( Substances.N2_g, T, p, v, I);

          enthalpyFromSubstances =
           substances.O2.q * actualStream(substances.O2.h_outflow) +
           substances.CO2.q * actualStream(substances.CO2.h_outflow) +
           substances.H2O.q * actualStream(substances.H2O.h_outflow) +
           substances.N2.q * actualStream(substances.N2.h_outflow)
            "enthalpy from substances";

          massFlows[i("O2")] = substances.O2.q*Substances.O2_g.MolarWeight;
          massFlows[i("CO2")] = substances.CO2.q*Substances.CO2_g.MolarWeight;
          massFlows[i("H2O")] = substances.H2O.q*Substances.H2O_g.MolarWeight;
          massFlows[i("N2")] = substances.N2.q*Substances.N2_g.MolarWeight;

        end ChemicalSolution;

        redeclare function extends specificEnthalpies_TpvI
        algorithm
             specificEnthalpy:=stateOfMatter.specificEnthalpy(
                substanceData,
                T,p,v,I);
        end specificEnthalpies_TpvI;

    public
        redeclare replaceable record extends ThermodynamicState
          "A selection of variables that uniquely defines the thermodynamic state"
          extends Modelica.Icons.Record;
          AbsolutePressure p "Absolute pressure of medium";
          Temperature T "Temperature of medium";
          MassFraction X[nS] "Mass fractions of substances";
          annotation (Documentation(info="<html>

</html>"));
        end ThermodynamicState;

        replaceable function electrochemicalPotentials_pTXvI
          input Modelica.Units.SI.Pressure p;
          input Modelica.Units.SI.Temperature T;
          input Modelica.Units.SI.MoleFraction x_baseMolecule[nS] "Free mole fraction of substance base molecule";
          input Modelica.Units.SI.ElectricPotential electricPotential=0;
          input Modelica.Units.SI.MoleFraction moleFractionBasedIonicStrength=0;
          output Modelica.Units.SI.ChemicalPotential u[nS];
      protected
          Real a[nS];
          Modelica.Units.SI.ChargeNumberOfIon z[nS];
        algorithm
          a := stateOfMatter.activityCoefficient(
              substanceData,
              T,
              p,
              electricPotential,
              moleFractionBasedIonicStrength) .* x_baseMolecule;
          z := stateOfMatter.chargeNumberOfIon(
              substanceData,
              T,
              p,
              electricPotential,
              moleFractionBasedIonicStrength);
          u := stateOfMatter.chemicalPotentialPure(
              substanceData,
              T,
              p,
              electricPotential,
              moleFractionBasedIonicStrength) .+ Modelica.Constants.R*T*log(a) .+ z*Modelica.Constants.F*
            electricPotential;
        end electrochemicalPotentials_pTXvI;

        redeclare replaceable function extends setState_pTX
        algorithm
          state.T := T;
          state.p := p;
          state.X := X;
        end setState_pTX;

        redeclare replaceable function extends setState_phX
          "Return thermodynamic state as function of p, h and composition X or Xi"
        algorithm
          state.p := p;
          state.X := X;
          state.T := stateOfMatter.solution_temperature(
              substanceData,
              h,
              X,
              p);
        end setState_phX;

         redeclare replaceable function extends density
         algorithm
          d := 1/(state.X*stateOfMatter.specificVolume(
              substanceData,
              state.T,
              state.p));
         end density;

        redeclare replaceable function extends specificEnthalpy
        algorithm
          h := state.X * stateOfMatter.specificEnthalpy(
              substanceData,
              state.T,
              state.p);
          /*, electricPotential, moleFractionBasedIonicStrength*/
        end specificEnthalpy;

        redeclare replaceable function extends temperature
        algorithm
          T := state.T;
        end temperature;

        redeclare replaceable function extends pressure
        algorithm
          p := state.p;
        end pressure;

        function X "To set mass fractions"
          input Types.AmountOfSubstance
              tO2 = 0.21,
              tCO2 = 0.0003,
              tH2O = 0.06,
              tN2 = 1-tO2-tCO2-tH2O;
          output Types.MassFraction X[nS];
      protected
          Types.Mass tm;
        algorithm
          tm :=tO2*O2_g.MolarWeight + tCO2*CO2_g.MolarWeight + tH2O*H2O_g.MolarWeight +
            tN2*N2_g.MolarWeight;
          X[i("O2")] := (tO2*O2_g.MolarWeight)/tm;
          X[i("CO2")] := (tCO2*CO2_g.MolarWeight)/tm;
          X[i("H2O")] := (tH2O*H2O_g.MolarWeight)/tm;
          X[i("N2")] := (tN2*N2_g.MolarWeight)/tm;
        end X;

        annotation (Documentation(revisions="<html>
<p><i>2021</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
<p>All rights reserved. </p>
</html>"));
      end Air;

    package BodyFluid "Simplified Human body fluid"
      import Physiolibrary.Media.Substances.*;
      import Physiolibrary.Media.Substances.InitialValues.*;
      extends Interfaces.PartialMedium(
        mediumName="SimpleBodyFluid (Physiolibrary)",
        substanceNames={"Na","HCO3","K","Glucose","Urea","Cl","Ca","Mg","Alb",
      "Glb","Others","H2O"},
        singleState=true,
        reducedX=false,
        fixedX=false,
        ThermoStates = Modelica.Media.Interfaces.Choices.IndependentVariables.pTX,
        reference_X = X(),
        reference_T = 310.15,
        reference_p = 101325,
        Temperature(
          min=273,
          max=350,
          start=310.15));

    protected
      package stateOfMatter = Chemical.Interfaces.Incompressible
      "Substances model to translate data into substance properties";

      constant stateOfMatter.SubstanceData substanceData[nS] = {
        Chemical.Substances.Sodium_aqueous(),
        Chemical.Substances.Bicarbonate_aqueous(),
        Chemical.Substances.Potassium_aqueous(),
        Chemical.Substances.Glucose_solid(),
        Chemical.Substances.Urea_aqueous(),
        Chemical.Substances.Chloride_aqueous(),
        Chemical.Substances.Calcium_aqueous(),
        Chemical.Substances.Magnesium_aqueous(),
        Chemical.Substances.Albumin_aqueous(),
        Chemical.Substances.Globulins_aqueous(),
        Chemical.Substances.Water_liquid_without_selfClustering(),
        Chemical.Substances.Water_liquid()}
         "Definition of the substances";

      replaceable function electrochemicalPotentials_pTXvI
         "electrochemical potentials for base molecules (for Chemical Substance interface)"
        input Modelica.Units.SI.Pressure p;
        input Modelica.Units.SI.Temperature T;
        input Modelica.Units.SI.MoleFraction x_baseMolecule[nS] "Mole fraction of free base molecule";
        input Modelica.Units.SI.ElectricPotential electricPotential=0;
        input Modelica.Units.SI.MoleFraction moleFractionBasedIonicStrength=0;
        output Modelica.Units.SI.ChemicalPotential u[nS];
      protected
        Real a[nS];
        Modelica.Units.SI.ChargeNumberOfIon z[nS];
      algorithm
        a := stateOfMatter.activityCoefficient(substanceData, T, p, electricPotential, moleFractionBasedIonicStrength)
             .* x_baseMolecule;
        z := stateOfMatter.chargeNumberOfIon(substanceData, T, p, electricPotential, moleFractionBasedIonicStrength);
        u := stateOfMatter.chemicalPotentialPure(substanceData, T, p, electricPotential, moleFractionBasedIonicStrength)
           .+ Modelica.Constants.R*T*log(a)
           .+ z*Modelica.Constants.F*electricPotential;
      end electrochemicalPotentials_pTXvI;

      replaceable function molarEnthalpies_pTvI
        "enthalpies for base molecules (for Chemical Substance interface)"
        input Modelica.Units.SI.Pressure p;
        input Modelica.Units.SI.Temperature T;
        input Modelica.Units.SI.ElectricPotential electricPotential=0;
        input Modelica.Units.SI.MoleFraction moleFractionBasedIonicStrength=0;
        output Modelica.Units.SI.MolarEnthalpy h[nS];
      algorithm
        h:= stateOfMatter.molarEnthalpy(
            substanceData, T, p, electricPotential, moleFractionBasedIonicStrength);
      end molarEnthalpies_pTvI;

    public
      redeclare connector extends SubstancesPort
       Chemical.Interfaces.SubstancePort_a Na "Free natrium ions Na+";
       Chemical.Interfaces.SubstancePort_a HCO3 "Free bicarbonates HCO3-";
       Chemical.Interfaces.SubstancePort_a K "Free potasium ions K+";
       Chemical.Interfaces.SubstancePort_a Glucose "Free glucose molecule";
       Chemical.Interfaces.SubstancePort_a Urea "Free urea molecule";
       Chemical.Interfaces.SubstancePort_a Cl "Free chloride ion Cl-";
       Chemical.Interfaces.SubstancePort_a Ca "Free calcium ion Ca++";
       Chemical.Interfaces.SubstancePort_a Mg "Free magnesium ion Mg++";
       Chemical.Interfaces.SubstancePort_a H2O "Free H2O molecule";
      end SubstancesPort;

    redeclare replaceable model extends SubstancesDecomposition "Just because Modelica in today version cannot work properly with nested connectors"
      Chemical.Interfaces.SubstancePort_a Na annotation (Placement(transformation(extent={{90,50},{110,70}})));
      Chemical.Interfaces.SubstancePort_a HCO3 annotation (Placement(transformation(extent={{92,-70},{112,-50}})));
      Chemical.Interfaces.SubstancePort_a K annotation (Placement(transformation(extent={{90,90},{110,110}})));
      Chemical.Interfaces.SubstancePort_a Glucose annotation (Placement(transformation(extent={{-10,10},{10,30}})));
      Chemical.Interfaces.SubstancePort_a Urea annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));
      Chemical.Interfaces.SubstancePort_a Cl annotation (Placement(transformation(extent={{92,-110},{112,-90}}),iconTransformation(extent={{92,-110},{112,-90}})));
      Chemical.Interfaces.SubstancePort_a Ca annotation (Placement(transformation(extent={{92,10},{112,30}})));
      Chemical.Interfaces.SubstancePort_a Mg   annotation (Placement(transformation(extent={{92,-30},{112,-10}})));
      Chemical.Interfaces.SubstancePort_a H2O  annotation (Placement(transformation(extent={{-10,90},{10,110}})));
    equation
      connect(Na, substances.Na) annotation (Line(points={{100,60},{-72,60},{-72,0},{-100,0}},      color={158,66,200}));
      connect(HCO3, substances.HCO3) annotation (Line(points={{102,-60},{16,-60},{16,0},{-100,0}},      color={158,66,200}));
      connect(K, substances.K) annotation (Line(points={{100,100},{22,100},{22,80},{-76,80},{-76,0},{-100,0},{-100,0}},     color={158,66,200}));
      connect(Glucose, substances.Glucose) annotation (Line(points={{0,20},{-70,20},{-70,0},{-100,0}},        color={158,66,200}));
      connect(Urea, substances.Urea) annotation (Line(points={{0,-60},{-78,-60},{-78,0},{-100,0}},      color={158,66,200}));
      connect(Cl, substances.Cl) annotation (Line(points={{102,-100},{-86,-100},{-86,0},{-100,0}},                      color={158,66,200}));
      connect(Ca, substances.Ca) annotation (Line(points={{102,20},{18,20},{18,4},{-68,4},{-68,0},{-100,0}},
                                                                                                        color={158,66,200}));
      connect(Mg, substances.Mg) annotation (Line(points={{102,-20},{-70,-20},{-70,-4},{-76,-4},{-76,0},{-100,0}}, color={158,66,200}));
      connect(H2O, substances.H2O) annotation (Line(points={{0,100},{-82,100},{-82,0},{-100,0}}, color={158,66,200}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end SubstancesDecomposition;

    public
      redeclare replaceable model extends ChemicalSolution
      protected
        Real I = 0 "mole-fraction-based ionic strength";
        Modelica.Units.SI.Molality NpM[nS] "Amount of substance particles per mass of substance";
        Modelica.Units.SI.MoleFraction x_baseMolecule[nS] "Mole fraction of free base molecule of substance";
        Modelica.Units.SI.ChargeNumberOfIon z[nS] "Charge of base molecule of substance";

      equation
        NpM = stateOfMatter.specificAmountOfParticles(substanceData,T=T,p=p);

        x_baseMolecule = X.*stateOfMatter.specificAmountOfFreeBaseMolecule(substanceData,T=T,p=p)./(X*NpM);

        T = stateOfMatter.solution_temperature(
            substanceData,
            h,
            X,
            p,
            v,
            I);

        z = stateOfMatter.chargeNumberOfIon(substanceData,T,p,v,I);

        _i = Modelica.Constants.F*(
         substances.Na.q +
         (-substances.HCO3.q)  +
         substances.K.q +
         (-substances.Cl.q) +
         2*substances.Ca.q  +
         2*substances.Mg.q)
        "electric current";

        substances.Na.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Na,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Na")]);
        substances.HCO3.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.HCO3,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("HCO3")]);
        substances.K.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.K,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("K")]);
        substances.Glucose.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Glucose,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Glucose")]);
        substances.Urea.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Urea,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Urea")]);
        substances.Cl.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Cl,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Cl")]);
        substances.Ca.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Ca,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Ca")]);
        substances.Mg.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Mg,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("Mg")]);
        substances.H2O.u =stateOfMatter.electroChemicalPotentialPure(
            Substances.Water,
            T,
            p,
            v,
            I) + Modelica.Constants.R*T*log(x_baseMolecule[
          i("H2O")]);

        substances.Na.h_outflow = stateOfMatter.molarEnthalpy( Substances.Na, T, p, v, I);
        substances.HCO3.h_outflow = stateOfMatter.molarEnthalpy( Substances.HCO3, T, p, v, I);
        substances.K.h_outflow = stateOfMatter.molarEnthalpy( Substances.K, T, p, v, I);
        substances.Glucose.h_outflow = stateOfMatter.molarEnthalpy( Substances.Glucose, T, p, v, I);
        substances.Urea.h_outflow = stateOfMatter.molarEnthalpy( Substances.Urea, T, p, v, I);
        substances.Cl.h_outflow = stateOfMatter.molarEnthalpy( Substances.Cl, T, p, v, I);
        substances.Ca.h_outflow = stateOfMatter.molarEnthalpy( Substances.Ca, T, p, v, I);
        substances.Mg.h_outflow = stateOfMatter.molarEnthalpy( Substances.Mg, T, p, v, I);
        substances.H2O.h_outflow = stateOfMatter.molarEnthalpy( Substances.Water, T, p, v, I);

        enthalpyFromSubstances =
         substances.Na.q * actualStream(substances.Na.h_outflow) +
         substances.HCO3.q * actualStream(substances.HCO3.h_outflow) +
         substances.K.q * actualStream(substances.K.h_outflow) +
         substances.Glucose.q * actualStream(substances.Glucose.h_outflow) +
         substances.Urea.q * actualStream(substances.Urea.h_outflow) +
         substances.Cl.q * actualStream(substances.Cl.h_outflow) +
         substances.Ca.q * actualStream(substances.Ca.h_outflow) +
         substances.Mg.q * actualStream(substances.Mg.h_outflow) +
         substances.H2O.q * actualStream(substances.H2O.h_outflow)
          "enthalpy from substances";

        massFlows[i("Na")] = substances.Na.q*Substances.Na.MolarWeight;
        massFlows[i("HCO3")] = substances.HCO3.q*
          Substances.HCO3.MolarWeight;
        massFlows[i("K")] = substances.K.q*Substances.K.MolarWeight;
        massFlows[i("Glucose")] = substances.Glucose.q*
          Substances.Glucose.MolarWeight;
        massFlows[i("Urea")] = substances.Urea.q*
          Substances.Urea.MolarWeight;
        massFlows[i("Cl")] = substances.Cl.q*Substances.Cl.MolarWeight;
        massFlows[i("Ca")] = substances.Ca.q*Substances.Ca.MolarWeight;
        massFlows[i("Mg")] = substances.Mg.q*Substances.Mg.MolarWeight;
        massFlows[i("H2O")] = substances.H2O.q*Substances.Water.MolarWeight;
        massFlows[i("Alb")] = 0;
        massFlows[i("Glb")] = 0;
        massFlows[i("Others")] = 0;

      end ChemicalSolution;

      redeclare function extends specificEnthalpies_TpvI
      algorithm
           specificEnthalpy:=stateOfMatter.specificEnthalpy(
              substanceData,
              T,p,v,I);
      end specificEnthalpies_TpvI;

    public
      redeclare model extends BaseProperties(final standardOrderComponents=true)
        "Base properties of medium"

      protected
        Modelica.Units.SI.Molality NpM[nS]=stateOfMatter.specificAmountOfParticles(
          substanceData,T=T,p=p);
      equation

        1/d = X * stateOfMatter.specificVolume(substanceData,T=T,p=p);
        h = X * stateOfMatter.specificEnthalpy(substanceData,T=T,p=p);
        u = h - p/d;
        MM = 1/sum(X .* NpM);
        R_s = 8.3144/MM;
        state.p = p;
        state.T = T;
        state.X = X;
        state.v = 0;
      end BaseProperties;

      redeclare replaceable record ThermodynamicState
        "A selection of variables that uniquely defines the thermodynamic state"
        extends Modelica.Icons.Record;
        AbsolutePressure p "Absolute pressure of medium";
        Temperature T "Temperature of medium";
        Modelica.Units.SI.ElectricPotential v "Electric potential of medium";
        MassFraction X[nS] "Mass fractions of substances";
        annotation (Documentation(info="<html>

</html>"));
      end ThermodynamicState;

      redeclare function extends setState_pTX
        "Return thermodynamic state as function of p, T and composition X or Xi"
        input Modelica.Units.SI.ElectricPotential v=0;
      algorithm
        state.p :=p;
        state.T :=T;
        state.X :=X;
        state.v :=v;
      end setState_pTX;

      redeclare function extends setState_phX
        "Return thermodynamic state as function of p, h and composition X or Xi"
        input Modelica.Units.SI.ElectricPotential v=0;
      algorithm
        state.p :=p;
        state.T := stateOfMatter.solution_temperature(substanceData,h=h,X=X,p=p);
        state.X :=X;
        state.v :=v;
      end setState_phX;

      redeclare function extends dynamicViscosity "Return dynamic viscosity"
      algorithm
        eta := (2.414e-5)*10^(247.8/(state.T-140));  //https://www.engineersedge.com/physics/water__density_viscosity_specific_weight_13146.htm
        annotation (Documentation(info="<html>

</html>"));
      end dynamicViscosity;

      redeclare function extends thermalConductivity
        "Return thermal conductivity"
      algorithm
        lambda := 0.6; //google
        annotation (Documentation(info="<html>

</html>"));
      end thermalConductivity;

      redeclare function extends specificEnthalpy "Return specific enthalpy"
      algorithm
        h := state.X * stateOfMatter.specificEnthalpy(substanceData,T=state.T,p=state.p);
      end specificEnthalpy;

      redeclare function extends specificHeatCapacityCp
        "Return specific heat capacity at constant pressure"
      algorithm
        cp := state.X * stateOfMatter.specificHeatCapacityCp(substanceData,T=state.T,p=state.p);
        annotation (Documentation(info="<html>

</html>"));
      end specificHeatCapacityCp;

      redeclare function extends isentropicExponent "Return isentropic exponent"
        extends Modelica.Icons.Function;
      algorithm
        gamma := 23128; //http://twt.mpei.ac.ru/MCS/Worksheets/WSP/WKDiag15.xmcd
        annotation (Documentation(info="<html>

</html>"));
      end isentropicExponent;

      redeclare function extends velocityOfSound "Return velocity of sound"
        extends Modelica.Icons.Function;
      algorithm
        a := 1481; //wikipedia
        annotation (Documentation(info="<html>

</html>"));
      end velocityOfSound;

      redeclare function extends density
      algorithm
        d := 1/( state.X * stateOfMatter.specificVolume(substanceData));
      end density;

      redeclare function extends temperature
      algorithm
        T := state.T;
      end temperature;

      redeclare function extends pressure
      algorithm
        p := state.p;
      end pressure;

      function X "To set mass fractions"
      input Types.Concentration
              tNa = 135,
              tHCO3 = 24,
              tK = 5,
              tGlucose = 5,
              tUrea = 1.5,
              tCl = 105,
              tCa = 1.5,
              tMg = 0.5,
              tAlb = 0.7;
      input Types.MassConcentration
              tGlb = 28,
              tOthers = 1e-6;

      output Types.MassFraction X[nS];
      protected
      Types.Density density;
      algorithm
      density := 1054;

      X[i("Na")] := (tNa*Na.MolarWeight)/density;
      X[i("HCO3")] := (tHCO3*HCO3.MolarWeight)/density;
      X[i("K")] := (tK*K.MolarWeight)/density;
      X[i("Glucose")] := (tGlucose*Constants.MM_Glucose)/density;
      X[i("Urea")] := (tUrea*Constants.MM_Urea)/density;
      X[i("Cl")] := (tCl*Cl.MolarWeight)/density;
      X[i("Ca")] := (tCa*Ca.MolarWeight)/density;
      X[i("Mg")] := (tMg*Mg.MolarWeight)/density;
      X[i("Alb")] := (tAlb*Constants.MM_Alb)/density;
      X[i("Glb")] := tGlb/density;
      X[i("Others")] := tOthers/ density;
      X[i("H2O")] := 1-sum(X[1:(nS-1)]);
      end X;

      annotation (Documentation(revisions="<html>
<p><i>2021</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
<p>All rights reserved. </p>
</html>"));
    end BodyFluid;

    package Interfaces
      partial package PartialMedium

      extends Modelica.Media.Interfaces.PartialMedium;

        replaceable connector SubstancesPort

        annotation (
            Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Rectangle(
                  extent={{-20,2},{20,-2}},
                  lineColor={158,66,200},
                  lineThickness=0.5),                                                                                                                                                                                                      Polygon(points={{-80,50},
                      {80,50},{100,30},{80,-40},{60,-50},{-60,-50},{-80,-40},{-100,30},{-80,50}},                                                                                                                                                                                                        lineColor = {0, 0, 0}, fillColor = {158,66,200}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-65, 25}, {-55, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-5, 25}, {5, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{55, 25}, {65, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-35, -15}, {-25, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{25, -15}, {35, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid)}),
            Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Polygon(points = {{-40, 25}, {40, 25}, {50, 15}, {40, -20}, {30, -25}, {-30, -25}, {-40, -20}, {-50, 15}, {-40, 25}}, lineColor = {0, 0, 0}, fillColor = {158,66,200}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-32.5, 7.5}, {-27.5, 12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-2.5, 12.5}, {2.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{27.5, 12.5}, {32.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-17.5, -7.5}, {-12.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{12.5, -7.5}, {17.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 70}, {150, 40}}, lineColor = {0, 0, 0}, textString = "%name")}),
            Documentation(info = "<html>
        <p>
        This connector defines the \"substances port\" that
        is used for cross-membrane transports of selected free base chemical substances.
        </p>
        </html>"));
        end SubstancesPort;

        replaceable partial model SubstancesDecomposition "Just because Modelica in today version cannot work properly with nested connectors"
          SubstancesPort substances annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
        equation

        end SubstancesDecomposition;

        replaceable partial model ChemicalSolution
          "Adaptor between selected free base chemical substances and medium substances"
          outer Modelica.Fluid.System system "System wide properties";

          SubstancesPort substances "free base chemical substances";
          Physiolibrary.Types.RealIO.PressureInput p "pressure";
          Physiolibrary.Types.RealIO.SpecificEnthalpyInput h "specific enthalpy";
          Physiolibrary.Types.RealIO.MassFractionInput X[nS] "mass fractions of medium substances";
          Physiolibrary.Types.RealIO.ElectricCurrentInput _i "electric current from substances";

          Physiolibrary.Types.RealIO.MassFlowRateInput substanceMassFlowsFromStream[nS] "flow of medium substances";
          Physiolibrary.Types.RealIO.MassOutput substanceMasses[nS](nominal=SubstanceFlowNominal) "mass od medium substances";

          parameter Types.Mass startSubstanceMasses[nS]=fill(Modelica.Constants.small,nS) "Initial value of medium substance masses";

          Physiolibrary.Types.RealIO.MassFlowRateOutput massFlows[nS](nominal=SubstanceFlowNominal) "mass flows trough substancesPort";
          Physiolibrary.Types.RealIO.TemperatureOutput T "temperature";
          Physiolibrary.Types.RealIO.HeatFlowRateOutput enthalpyFromSubstances "enthalpy from substances";

          Physiolibrary.Types.RealIO.ElectricPotentialOutput v "electric potential";

          Real logm[nS] "natutal logarithm of medium substance masses (as state variables)";
        initial equation
          //substanceMasses = startSubstanceMasses;
          logm = log(startSubstanceMasses);
        equation
        /* 
  enthalpyFromSubstances = 
   substances.*.q * actualStream(substances.*.h_outflow) "enthalpy from substances";
 

  massFlows = substances.\(*\).q .* MMb[\1];
*/

          //The main accumulation equation is "der(substanceMasses)= substanceMassFlowsFromStream + massFlows"
          // However, the numerical solvers can handle it in form of log(m) much better. :-)
          der(logm) = ((substanceMassFlowsFromStream + massFlows)./substanceMasses) "accumulation of substances=exp(logm) [kg]";
          substanceMasses = exp(logm);
        end ChemicalSolution;

        function i "Find index of substance"
          input String searchName "Name of substance to find in substanceNames";
          output Integer index "Index of searchName in substanceNames";
        algorithm
            index := -1;
            for i in 1:nS loop
              if ( Modelica.Utilities.Strings.isEqual(substanceNames[i], searchName)) then
               index := i;
              end if;
            end for;
            assert(index > 0, "Substance '" + searchName + "' is not present between Substances in Medium\n"
               + "Check parameters and medium model.");
        end i;

        constant Modelica.Units.SI.MassFlowRate SubstanceFlowNominal[nS]=ones(nS) "Nominal of substance flow";
        constant Modelica.Units.SI.SpecificEnthalpy SpecificEnthalpyNominal=-1E6 "Nominal of specific enthalpy";

         replaceable function specificEnthalpies_TpvI
              "Specific enthalpies of medium substances"
               input Modelica.Units.SI.Temperature T=298.15 "Temperature";
               input Modelica.Units.SI.Pressure p=100000 "Pressure";
               input Modelica.Units.SI.ElectricPotential v=0
                "Electric potential of the substance";
               input Modelica.Units.SI.MoleFraction I=0
                "Ionic strengh (mole fraction based)";
               output Modelica.Units.SI.SpecificEnthalpy specificEnthalpy[nS]
                 "Specific enthalpies of medium substances";

         end specificEnthalpies_TpvI;

         function temperatureError  "To find u as temperature, where temperatureError(u,p,X,h)->0"
         extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;
           input Real p;
           input Real X[nS];
           input Real h;
        protected
            Real hs[nS];
         algorithm
           hs:=specificEnthalpies_TpvI(u,p);
           y:=h-sum(hs[i]*X[i] for i in 1:nS);
         end temperatureError;

         partial function GetConcentration
           input ThermodynamicState state;
           output Types.Concentration C;
         end GetConcentration;

         partial function GetMassConcentration
           input ThermodynamicState state;
           output Types.MassConcentration R;
         end GetMassConcentration;

         partial function GetFraction
           input ThermodynamicState state;
           output Types.Fraction F;
         end GetFraction;

         partial function GetActivity
           input ThermodynamicState state;
           output Real A;
         end GetActivity;

        annotation (Documentation(revisions="<html>
<p><i>2021</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
<p>All rights reserved. </p>
</html>"));
      end PartialMedium;
    end Interfaces;

    package Substances
      package Constants

        constant Types.MolarMass
             MM_Glucose = 0.1806 "Glucose molar mass [kg/mol]",
             MM_Lactate = 0.09008 "Lactate molar mass [kg/mol]",
             MM_Urea = 0.06006 "Urea molar mass [kg/mol]",
             MM_AminoAcids = 0.1 "Amino acids molar mass [kg/mol]",
             MM_Lipids = 0.80645 "Fatty acids molar mass [kg/mol]",
             MM_KetoAcids = 0.102 "Keto acids molar mass [kg/mol]",
             MM_Hb=65.494/4 "Hemoglobin unit molar mass [kg/mol]",
             MM_MetHb=65.494/4 "Methemoglobin unit molar mass [kg/mol]",
             MM_HbF=65.494/4 "Foetal hemoglobin unit molar mass [kg/mol]",
             MM_Alb=66.463 "Albumin molar mass [kg/mol]",
             MM_Glb=34 "Average plasma globulin molar mass [kg/mol]",
             MM_DPG=0.266 "Biphosphoglycerate molar mass [kg/mol]",
             MM_Epinephrine=0.183204 "Epinephrine molar mass [kg/mol]",
             MM_Norepinephrine=0.16918 "Norepinephrine molar mass [kg/mol]",
             MM_Vasopressin=1.084 "Vasopressin molar mass [kg/mol]",
             MM_Insulin=5.808 "Insulin molar mass [kg/mol]",
             MM_Glucagon=3.485 "Glucagon molar mass [kg/mol]",
             MM_Thyrotropin=28 "Thyrotropin molar mass [kg/mol]",
             MM_Thyroxine=0.777 "Thyroxine molar mass [kg/mol]",
             MM_Leptin=16.026 "Leptin molar mass [kg/mol]",
             MM_Angiotensin2=1.046 "Angiotensin2 molar mass [kg/mol]",
             MM_Renin=48 "Renin molar mass [kg/mol]",
             MM_Aldosterone=0.36044 "Aldosterone molar mass [kg/mol]",
             MM_Desglymidodrine=0.19723 "Desglymidodrine molar mass [kg/mol]";

         constant Real TimeScale=6000 "Time scale of simulation";

      end Constants;

      package InitialValues
        import Physiolibrary.Media.Substances.*;
        constant Real
            D_Epinephrine_ng=40 "Default epinephrine [ng/L]",
            D_Norepinephrine_ng=240 "Dafault norepinephrine [ng/L]",
            D_Vasopressin_pmol=1.84 "Defaul vasopresin (ADH) [pmol/L]",
            D_Insulin_mU=19.91 "Default insulin [mU/L]",
            D_Glucagon_ng=69.68 "Default glucagon [ng/L]",
            D_Thyrotropin_pmol=4.03 "Default thyrotropin [pmol/L]",
            D_Thyroxine_ug=79.6 "Default thyroxin T3 and T4 [ug/L]",
            D_Leptin_ug=7.96 "Default leptin [ug/L]",
            D_Desglymidodrine_ug=1e-5 "Default desglymidodrine [ug/L]",
            D_AlphaBlockers_f=Modelica.Constants.small "Default aplpha blockers effect [%/L]",
            D_BetaBlockers_f=Modelica.Constants.small "Default beta blockers effect [%/L]",
            D_AnesthesiaVascularConductance_f=1 "Default effect of anesthesia to vascular conductance [%/L]",
            D_Angiotensin2_ng=20 "Default angiotensin II [ng/L]",
            D_Renin_ng_mL_h=2 "Default renin PRA [ng/mL/h]",
            D_Aldosterone_nmol=0.33 "Default aldosterone [nmol/L]";

        constant Types.Fraction D_Hct = 0.44 "Default hematocrit";
        constant Types.Concentration  D_Arterial_O2 = 8.16865 "Default Total oxygenin arterial blood",
                                      D_Arterial_CO2 = 21.2679 "Default Total carbon dioxide in arterial blood",
                                      D_Venous_O2 = 5.48 "Default Total oxygen in venous blood",
                                      D_Venous_CO2 = 23.77 "Default Total carbon dioxide in venous blood",
                                      D_CO = 1.512e-6 "Default Total carbon monoxide",
                                      D_Hb = 8.4 "Default Hemoglobin",
                                      D_MetHb = 0.042 "Default Methemoglobin",
                                      D_HbF = 0.042 "Default Foetal hemoglobin",
                                      D_Alb = 0.66 "Default Albumin",
                                      D_PO4 = 0.153 "Default Inorganic phosphates",
                                      D_DPG = 5.4 "Default Diphosphoglycerate";
        constant Real D_Glb = 28 "Default Globulins [g/L!!!]",
                      D_SID = D_NSID - D_BEox "Default Strong ion difference";
        constant Real D_BEox = 0 "Default Base excess of oxygenated blood from normal arterial conditions";
        constant Real D_NSID = (1 - D_Hct) * (zAlbNAP * D_Alb + zGlbNAP * D_Glb + zPO4NAP * D_PO4 + ztCO2NAP) + D_Hct * (zHbNAE * (D_Hb / D_Hct) + ztCO2NAE)
                             "Default Total charge number on buffers at normal arterial conditions per total volume";
        constant Real zAlbNAP = 18.5565 "charge on albumin at normal arterial plasma conditions",
                      zGlbNAP = 0.0892857 "charge on globilins at normal arterial plasma conditions",
                      zPO4NAP = 1.79924 "charge on inorganic phosphates at normal arterial plasma conditions",
                      ztCO2NAP = 24.4732 "charge of bicarbonate and carbonate at normal arterial plasma conditions",
                      ztCO2NAE = 15.0901 "charge of bicarbonate and carbonate at normal arterial erythrocyte conditions",
                      zHbNAE = 1.06431 "relative charge on oxygenated hemoglobin at normal arterial eruthrocyte conditions";
        constant Types.Concentration
             D_Glucose = 6.08 "Default glucose [mmol/L]",
             D_Lactate = 1.04 "Default lactate [mmol/L]",
             D_Urea = 6.64 "Default urea [mmol/L]",
             D_AminoAcids = 4.97 "Default amino acids [mmol/L]",
             D_Lipids = 1.23 "Default lipids [mmol/L]",
             D_Ketoacids = 4.88e-2 "Default keto acids [mmol/L]";

        constant Types.Concentration
            D_Epinephrine = 1e-9 * D_Epinephrine_ng / Constants.MM_Epinephrine "Default epinephrine [mmol/L]",
            D_Norepinephrine = 1e-9 * D_Norepinephrine_ng / Constants.MM_Norepinephrine "Dafault norepinephrine [mmol/L]",
            D_Vasopressin = 1e-9 * D_Vasopressin_pmol "Defaul vasopresin (ADH) [mmol/L]",
            D_Insulin = 6e-9 * D_Insulin_mU "Default insulin [mmol/L] - conversion factor for human insulin is 1 mU/L = 6.00 pmol/L",
            D_Glucagon = 1e-9 * D_Glucagon_ng / Constants.MM_Glucagon "Default glucagon [mmol/L]",
            D_Thyrotropin = 1e-9 * D_Thyrotropin_pmol "Default thyrotropin [mmol/L]",
            D_Thyroxine = 1e-6 * D_Thyroxine_ug / Constants.MM_Thyroxine "Default thyroxin T3 and T4 [mmol/L]",
            D_Leptin = 1e-6 * D_Leptin_ug / Constants.MM_Leptin "Default leptin [mmol/L]",
            D_Desglymidodrine = 1e-6 * D_Desglymidodrine_ug / Constants.MM_Desglymidodrine "Default desglymidodrine [mmol/L]",
            D_AlphaBlockers = D_AlphaBlockers_f "Default aplpha blockers effect [%/L]",
            D_BetaBlockers = D_BetaBlockers_f "Default beta blockers effect [%/L]",
            D_AnesthesiaVascularConductance = D_AnesthesiaVascularConductance_f "Default effect of anesthesia to vascular conductance [%/L]",
            D_Angiotensin2 = 1e-9 * D_Angiotensin2_ng / Constants.MM_Angiotensin2 "Default angiotensin II [mmol/L]",
            D_Renin = 1e-12 * 0.6 * 11.2 * D_Renin_ng_mL_h / Constants.MM_Renin "Default renin [mU/L] - conversion factor PRA (ng/mL/h) to DRC (mU/L) is 11.2, μIU/mL (mIU/L) * 0.6 = pg/mL",
            D_Aldosterone = 1e-6 * D_Aldosterone_nmol "Default aldosterone [mmol/L]";

      end InitialValues;
      constant Chemical.Interfaces.IdealGas.SubstanceData O2_g=
            Chemical.Substances.Oxygen_gas();
        constant Chemical.Interfaces.IdealGas.SubstanceData CO2_g=
            Chemical.Substances.CarbonDioxide_gas();
        constant Chemical.Interfaces.IdealGas.SubstanceData CO_g=
            Chemical.Substances.CarbonMonoxide_gas();
        constant Chemical.Interfaces.IdealGas.SubstanceData H2O_g=
            Chemical.Substances.Water_gas();
        constant Chemical.Interfaces.IdealGas.SubstanceData N2_g=
            Chemical.Substances.Nitrogen_gas();

       constant Chemical.Interfaces.Incompressible.SubstanceData O2=
            Chemical.Substances.Oxygen_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData CO2=
            Chemical.Substances.CarbonDioxide_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData CO=
            Chemical.Substances.CarbonMonoxide_aqueous();

        constant Chemical.Interfaces.Incompressible.SubstanceData H2=
            Chemical.Substances.Hydrogen_aqueous();

         constant Chemical.Interfaces.Incompressible.SubstanceData Cl=
            Chemical.Substances.Chloride_aqueous();
         constant Chemical.Interfaces.Incompressible.SubstanceData Ca=
            Chemical.Substances.Calcium_aqueous();
         constant Chemical.Interfaces.Incompressible.SubstanceData K=
            Chemical.Substances.Potassium_aqueous();
         constant Chemical.Interfaces.Incompressible.SubstanceData Mg=
            Chemical.Substances.Magnesium_aqueous();
         constant Chemical.Interfaces.Incompressible.SubstanceData Na=
            Chemical.Substances.Sodium_aqueous();

        constant Chemical.Interfaces.Incompressible.SubstanceData H=
            Chemical.Substances.Proton_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData H3O=
            Chemical.Substances.Hydronium_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData OH=
            Chemical.Substances.Hydroxide_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData e=
         Chemical.Interfaces.Incompressible.SubstanceData(
            MolarWeight=5.4857990946e-7,
            z=-1,
            DfH=0,
            DfG=0,
            Cp=0,
            density=1e20) "electrone";

        constant Chemical.Interfaces.Incompressible.SubstanceData PO4=
              Chemical.Substances.Phosphate_aqueous();

        constant Chemical.Interfaces.Incompressible.SubstanceData HCO3=
              Chemical.Substances.Bicarbonate_aqueous();

        constant Chemical.Interfaces.Incompressible.SubstanceData Glucose=
             Chemical.Substances.Glucose_solid();
        constant Chemical.Interfaces.Incompressible.SubstanceData Urea=
             Chemical.Substances.Urea_aqueous();
        constant Chemical.Interfaces.Incompressible.SubstanceData Water=
             Chemical.Substances.Water_liquid();
    end Substances;
  end Media;

  package Fluid "Physiological fluids with static and dynamic properties"
    extends Modelica.Icons.Package;

    package Components
      extends Modelica.Icons.Package;

      model Conductor "Hydraulic resistor, where conductance=1/resistance"
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        extends Physiolibrary.Icons.HydraulicResistor;
        parameter Boolean useConductanceInput = false "=true, if external conductance value is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.HydraulicConductance Conductance = 0 "Hydraulic conductance if useConductanceInput=false" annotation (
          Dialog(enable = not useConductanceInput));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput cond(start = Conductance) = c if useConductanceInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 60})));
      protected
        Physiolibrary.Types.HydraulicConductance c;
        constant Boolean GenerateConductanceConnection = true;
      equation
        if not useConductanceInput and GenerateConductanceConnection then
          c = Conductance;
        end if;
        volumeFlowRate = c * (q_in.p - q_out.p);
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-220, -40}, {200, -80}}, lineColor = {127, 0, 0}, fillColor = {58, 117, 175}, fillPattern = FillPattern.Solid, textString = "%name")}),
          Documentation(revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
<p>All rights reserved. </p>
</html>", info = "<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
      end Conductor;

      model Resistor
        extends Physiolibrary.Fluid.Components.Conductor(final Conductance = 1 / Resistance, final useConductanceInput = false, final GenerateConductanceConnection = false);
        parameter Physiolibrary.Types.HydraulicResistance Resistance = Modelica.Constants.inf "Hydraulic conductance if useConductanceInput=false" annotation (
          Dialog(enable = not useResistanceInput));
        parameter Boolean useResistanceInput = false "=true, if external resistance value is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Physiolibrary.Types.RealIO.HydraulicResistanceInput resistance(start = Resistance) = 1 / c if useResistanceInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 60})));
      equation
        if not useResistanceInput then
          c = 1 / Resistance;
        end if;
      end Resistor;

      model ElasticVessel "Elastic compartment as chemical solution envelop"
        extends Physiolibrary.Icons.ElasticBalloon;
        extends Physiolibrary.Fluid.Interfaces.Accumulation(final pressure_start = p_initial);
        parameter String stateName=getInstanceName();
        parameter Types.HydraulicCompliance Compliance = 1e+3
        "Compliance e.g. TidalVolume/TidalPressureGradient if useComplianceInput=false"                                                       annotation (
          Dialog(enable = not useComplianceInput));
        parameter Types.Volume ZeroPressureVolume = 1e-11
        "Functional Residual Capacity. Maximal fluid volume, that does not generate pressure if useV0Input=false"                                                   annotation (
          Dialog(enable = not useV0Input));
        //default = 1e-5 ml
        parameter Types.Pressure ExternalPressure = if isExternalPressureAbsolute then system.p_ambient else 0
        "External pressure if useExternalPressureInput=false."                                                                                                        annotation (
          Dialog(enable = not useExternalPressureInput));
        parameter Types.Volume ResidualVolume = 1e-9
        "Residual volume. Or maximal fluid volume, which generate negative collapsing pressure in linear model"                                              annotation (
          Dialog(tab = "Advanced", group = "Pressure-Volume relationship"));
        Types.Volume excessVolume
        "Additional cavity volume (=fluid volume + internal space volume), that generate pressure";
        parameter Boolean useV0Input = false "=true, if zero-pressure-fluid_volume input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Types.RealIO.VolumeInput zeroPressureVolume(start = ZeroPressureVolume) = zpv
        if useV0Input                                                                                                                           annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 80}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={-70,90})));
        parameter Boolean useComplianceInput = false "=true, if compliance input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Types.RealIO.HydraulicComplianceInput compliance( start = Compliance) = c
        if useComplianceInput                                                                           annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={0,90})));
        parameter Boolean useExternalPressureInput = false "=true, if external pressure input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Boolean isExternalPressureAbsolute = false "external pressure as absolute pressure? Relative to ambient otherwise." annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));

        Types.RealIO.PressureInput externalPressure(start = ExternalPressure) = ep
        if useExternalPressureInput                                                                            annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {80, 80}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={70,90})));
        Types.RealIO.VolumeOutput fluidVolume= volume annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {116, -60}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {100, -80})));
        parameter Boolean useSigmoidCompliance = false "sigmoid compliance e.g. lungs" annotation (
          Evaluate = true,
          choices(checkBox = true),
          Dialog(tab = "Advanced", group = "Pressure-Volume relationship"));
        parameter Types.Volume VitalCapacity = 0.00493
        "Relative volume capacity if useSigmoidCompliance"                                                annotation (
          Dialog(enable = useSigmoidCompliance, tab = "Advanced", group = "Pressure-Volume relationship"));
        parameter Types.Volume BaseTidalVolume = 0.000543
        "Base value of tidal volume"                                                   annotation (
          Dialog(enable = useSigmoidCompliance, tab = "Advanced", group = "Pressure-Volume relationship"));
        Types.RealIO.VolumeInput internalSpace(
          start=InternalSpace)=is if useInternalSpaceInput
        "additional internal volume (e.g. another inserted compartment inside)"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={100,8}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={90,60})));
        parameter Boolean useInternalSpaceInput = false "=true, if internal space input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Types.Volume InternalSpace = 0
        "Internal space if there is no pressure gradient"                                          annotation (
          Dialog(tab = "Advanced", group = "Pressure-Volume relationship"));
        Types.Pressure relative_pressure;

      protected
        constant Boolean GenerateComplianceConnection = true;
        parameter Types.Pressure p_initial = system.p_ambient;
        parameter Types.Volume BaseMeanVolume = ZeroPressureVolume + BaseTidalVolume / 2
        "Point of equality with linear presentation such as (FunctionalResidualCapacity + TidalVolume/2)";

        Types.Pressure d_sigmoid = (BaseMeanVolume - ResidualVolume) * (VitalCapacity - (BaseMeanVolume - ResidualVolume)) / (c * VitalCapacity);
        Types.Pressure c_sigmoid = (BaseMeanVolume - ZeroPressureVolume) / c + d_sigmoid * log(VitalCapacity / (BaseMeanVolume - ResidualVolume) - 1);

        Types.Volume zpv;
        Types.Pressure ep;
        Types.HydraulicCompliance c;
        Types.Volume is;

      equation
      //elastic compartment
        if not useV0Input then
          zpv = ZeroPressureVolume;
        end if;
        if not useComplianceInput and GenerateComplianceConnection then
          c = Compliance;
        end if;
        if not useExternalPressureInput then
          ep = ExternalPressure;
        end if;
        if not useInternalSpaceInput then
          is = InternalSpace;
        end if;
        excessVolume = max(0, volume + is - zpv + InternalSpace) - InternalSpace;
        relative_pressure = pressure - (if isExternalPressureAbsolute then ep else ep + system.p_ambient);

        pressure = (if not useSigmoidCompliance
        then
          smooth(0,
          if noEvent(volume > ResidualVolume)
             then
                excessVolume / c
             else   (-(if isExternalPressureAbsolute then ep-system.p_ambient else ep) / log(Modelica.Constants.eps)) * log(max(Modelica.Constants.eps, volume / ResidualVolume)))
        else
          (-d_sigmoid * log(VitalCapacity / (volume - ResidualVolume) - 1)) + c_sigmoid)
        + (if isExternalPressureAbsolute then ep else ep + system.p_ambient);

        assert(volume > Modelica.Constants.eps, "Attempt to reach negative volume!");

        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-280, -104}, {280, -142}}, lineColor = {127, 0, 0}, fillColor = {58, 117, 175}, fillPattern = FillPattern.Solid, textString = "%name")}),
          Documentation(revisions = "<html>
<p>2020 by Marek Matejak, http://www.physiolib.com </p>
</html>", info = "<html>
<h4>amountOfSolution = &sum; amountOfSubstances</h4>
<h4>mass = &sum; massOfSubstances</h4>
<h4>volume = &sum; volumeOfSubstances</h4>
<h4>freeGibbsEnergy = &sum; freeGibbsEnergiesOfSubstances</h4>
<p>To calculate the sum of extensive substance's properties is misused the Modelica \"flow\" prefix even there are not real physical flows. </p>
</html>"));
      end ElasticVessel;

      model ElasticVesselElastance
        extends Physiolibrary.Fluid.Components.ElasticVessel(final Compliance = 1 / Elastance, final useComplianceInput = false, final GenerateComplianceConnection = false);
        parameter Physiolibrary.Types.HydraulicElastance Elastance = 1 "Elastance if useComplianceInput=false" annotation (
          Dialog(enable = not useComplianceInput));
        Types.RealIO.HydraulicElastanceInput elastance(start = Elastance) = 1 / c if useElastanceInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {20, 90})));
        parameter Boolean useElastanceInput = false "=true, if elastance input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
      equation
        if not useElastanceInput then
          c = 1 / Elastance;
        end if;
      end ElasticVesselElastance;

      model HydrostaticColumn "Hydrostatic column pressure between two connectors (with specific muscle pump effect)"
        extends Physiolibrary.Icons.HydrostaticGradient;
        extends Interfaces.OnePort_UpDown;
        replaceable package Medium = Media.Water constrainedby
          Media.Interfaces.PartialMedium                                                      "Medium model" annotation (
           choicesAllMatching = true);
        outer Modelica.Fluid.System system "System wide properties";
        parameter Boolean useHeightInput = false "=true, if height input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Height H = 0 "Height of hydrostatic column if useHeightInput=false" annotation (
          Dialog(enable = not useHeightInput));
        Physiolibrary.Types.RealIO.HeightInput height(start = H) = h if useHeightInput "Vertical distance between top and bottom connector" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, origin = {-110, 0}), iconTransformation(extent = {{-130, -20}, {-90, 20}})));
        parameter Boolean usePumpEffect = false "=true, if musce pump effect is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Physiolibrary.Types.RealIO.FractionInput pumpEffect(start = PumpEffect) = pe if usePumpEffect annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 100})));
      protected
        parameter Physiolibrary.Types.Fraction PumpEffect = 1 "Pump effect if usePumpEffect=false" annotation (
          Dialog(enable = not usePumpEffect));
      protected
        Physiolibrary.Types.Fraction pe;
        Physiolibrary.Types.Height h;
      equation
        if not useHeightInput then
          h = H;
        end if;
        if not usePumpEffect then
          pe = PumpEffect;
        end if;
        q_down.p = q_up.p + system.g * density * h * pe;
        annotation (
          Documentation(revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
</html>", info = "<html>
<p>The hydrostatic pressure is proportional to height of the column.&nbsp;</p>
</html>"),Icon(graphics={  Text(extent = {{-210, -66}, {210, -106}}, lineColor = {127, 0, 0}, fillColor = {58, 117, 175}, fillPattern = FillPattern.Solid, textString = "%name")}));
      end HydrostaticColumn;

      model Inertia "Inertia of the volumetric flow"
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        //(q_in(m_flow(start=massFlow_start)));
        extends Physiolibrary.Icons.Inertance;
        parameter Physiolibrary.Types.MassFlowRate massFlow_start = 0 "Mass flow start value" annotation (
          Dialog(group = "Initialization"));
        parameter Physiolibrary.Types.HydraulicInertance I "Inertance";
      initial equation
        q_in.m_flow = massFlow_start;
      equation
        I * der(q_in.m_flow) = q_in.p - q_out.p;
        annotation (
          Documentation(info = "<html>
<p>Inertance I of the simple tube could be calculated as I=ro*l/A, where ro is fuid density, l is tube length and A is tube cross-section area.</p>
</html>", revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
</html>"),Icon(graphics={  Text(extent = {{-212, -58}, {208, -98}}, lineColor = {127, 0, 0}, fillColor = {58, 117, 175}, fillPattern = FillPattern.Solid, textString = "%name")}));
      end Inertia;

      model IdealValve
        extends Icons.IdealValve;
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        Boolean open(start = true) "Switching state";
        Real passableVariable(start = 0, final unit = "1") "Auxiliary variable for actual position on the ideal diode characteristic";
        /*  = 0: knee point
              < 0: below knee point, diode locking
              > 0: above knee point, diode conducting */
        parameter Physiolibrary.Types.HydraulicConductance _Gon(final min = 0, displayUnit = "l/(mmHg.min)") = 1.2501026264094e-02 "Forward state-on conductance (open valve conductance)" annotation (
          Dialog(enable = not useLimitationInputs));
        //= the same as resistance 1e-5 mmHg/(l/min)
        parameter Physiolibrary.Types.HydraulicConductance _Goff(final min = 0, displayUnit = "l/(mmHg.min)") = 1.2501026264094e-12 "Backward state-off conductance (closed valve conductance)" annotation (
          Dialog(enable = not useLimitationInputs));
        //= 1e-5 (l/min)/mmHg
        parameter Physiolibrary.Types.Pressure Pknee(final min = 0) = 0 "Forward threshold pressure";
        parameter Boolean useLimitationInputs = false "=true, if Gon and Goff are from inputs" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput Gon(start = _Gon) = gon if useLimitationInputs "open valve conductance = infinity for ideal case" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 100})));
        Physiolibrary.Types.RealIO.HydraulicConductanceInput Goff(start = _Goff) = goff if useLimitationInputs "closed valve conductance = zero for ideal case" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {60, 100})));
      protected
        constant Boolean GenerateConductanceConnection = true;
        Physiolibrary.Types.HydraulicConductance gon;
        Physiolibrary.Types.HydraulicConductance goff;
        constant Physiolibrary.Types.Pressure unitPressure = 1;
        constant Physiolibrary.Types.VolumeFlowRate unitFlow = 1;
      equation
        if not useLimitationInputs and GenerateConductanceConnection then
          gon = _Gon;
          goff = _Goff;
        end if;
        open = passableVariable > Modelica.Constants.eps;
        dp = passableVariable * unitFlow * (if open then 1 / gon else 1) + Pknee;
        volumeFlowRate = passableVariable * unitPressure * (if open then 1 else goff) + goff * Pknee;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-188, -100}, {196, -130}}, lineColor = {127, 0, 0}, fillPattern = FillPattern.Sphere, fillColor = {255, 85, 85}, textString = "%name")}),
          Documentation(info = "<html>
<p>Ideal Valve allows a volumetric flow in one direction in case of pressure gradient is greater. </p>
</html>", revisions = "<html>
</html>"));
      end IdealValve;

      model IdealValveResistance
        extends Physiolibrary.Fluid.Components.IdealValve(final _Gon = 1 / _Ron, final _Goff = 1 / _Roff, final useLimitationInputs = false, GenerateConductanceConnection = false);
        parameter Physiolibrary.Types.HydraulicResistance _Ron(displayUnit = "(mmHg.min)/l") = 79.993432449 "forward state resistance" annotation (
          Dialog(enable = not useResistanceInputs));
        parameter Physiolibrary.Types.HydraulicResistance _Roff = 799934324490.0 "Backward state-off resistance (closed valve resistance)" annotation (
          Dialog(enable = not useResistanceInputs));
        parameter Boolean useResistanceInputs = false "=true, if Ron and Roff are from inputs" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        Physiolibrary.Types.RealIO.HydraulicResistanceInput Ron(start = _Ron) = 1 / gon if useResistanceInputs "open valve resistancece = zero for ideal case" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 100})));
        Physiolibrary.Types.RealIO.HydraulicResistanceInput Roff(start = _Roff) = 1 / goff if useResistanceInputs "closed valve resistance = infinity for ideal case" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {60, 100})));
      equation
        if not useResistanceInputs then
          gon = 1 / _Ron;
          goff = 1 / _Roff;
        end if;
      end IdealValveResistance;

      model MassPump "Prescribed mass flow"
        extends Icons.Pump;
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        extends Physiolibrary.Fluid.Interfaces.ConditionalMassFlow;
      equation
        massFlowRate = q;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-150, -90}, {150, -50}}, lineColor = {127, 0, 0}, textString = "%name")}),
          Documentation(revisions = "<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<td>Web:</td>
<td>http://www.physiolib.com</td>
</tr>
<tr>
<td>Date of:</td>
<td>october 2017-2018</td>
</tr>
</table>
</html>", info = "<html>
<p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
</html>"));
      end MassPump;

      model VolumePump "Prescribed mass flow"
        extends Icons.Pump;
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        extends Physiolibrary.Fluid.Interfaces.ConditionalVolumeFlow;
      equation
        volumeFlowRate = q;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-150, -90}, {150, -50}}, lineColor = {127, 0, 0}, textString = "%name")}),
          Documentation(revisions = "<html>
<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<td>Web:</td>
<td>http://www.physiolib.com</td>
</tr>
<tr>
<td>Date of:</td>
<td>october 2017-2018</td>
</tr>
</table>
</html>", info = "<html>
<p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
</html>"));
      end VolumePump;

      model Reabsorption "Divide inflow to outflow and reabsorption"
        import Physiolibrary;
        extends Physiolibrary.Icons.Reabsorption;
        replaceable package Medium = Physiolibrary.Media.Water constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                    "Medium model" annotation (
           choicesAllMatching = true);
        Physiolibrary.Fluid.Interfaces.FluidPort_a Inflow(redeclare package
            Medium =                                                                 Medium) annotation (
          Placement(transformation(extent = {{-114, 26}, {-86, 54}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_b Outflow(redeclare package
            Medium =                                                                  Medium) annotation (
          Placement(transformation(extent = {{86, 26}, {114, 54}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_b Reabsorption(redeclare
            package
            Medium =                                                                       Medium) annotation (
          Placement(transformation(extent = {{-14, -114}, {14, -86}})));
        Physiolibrary.Types.RealIO.FractionInput FractReab annotation (
          Placement(transformation(extent = {{-100, -60}, {-60, -20}})));
        parameter Boolean useExternalOutflowMin = false "=true, if minimal outflow is garanted" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.VolumeFlowRate OutflowMin = 0 "Minimal outflow if useExternalOutflowMin=false" annotation (
          Dialog(enable = not useExternalOutflowMin));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput outflowMin(start = OutflowMin) = om if useExternalOutflowMin annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {40, 80})));
      protected
        Physiolibrary.Types.VolumeFlowRate om;
        Physiolibrary.Types.Density density;
      equation
        if not useExternalOutflowMin then
          om = OutflowMin;
        end if;
        Inflow.p = Outflow.p;
        0 = Inflow.m_flow + Outflow.m_flow + Reabsorption.m_flow;
      // assert(Inflow.q>=-Modelica.Constants.eps,"Only one directional flow is supported!");
        Reabsorption.m_flow = -max(0, FractReab * (Inflow.m_flow - om * density));
        density = Medium.density(Medium.setState_phX(Inflow.p, inStream(Inflow.h_outflow), inStream(Inflow.Xi_outflow)));
      //Solve streams variable as in connection of all three connectors:
        0 = Inflow.m_flow * Inflow.h_outflow + Outflow.m_flow * actualStream(Outflow.h_outflow) + Reabsorption.m_flow * actualStream(Reabsorption.h_outflow);
        0 = Inflow.m_flow * actualStream(Inflow.h_outflow) + Outflow.m_flow * Outflow.h_outflow + Reabsorption.m_flow * actualStream(Reabsorption.h_outflow);
        0 = Inflow.m_flow * actualStream(Inflow.h_outflow) + Outflow.m_flow * actualStream(Outflow.h_outflow) + Reabsorption.m_flow * Reabsorption.h_outflow;
        zeros(Inflow.Medium.nXi) = Inflow.m_flow * Inflow.Xi_outflow + Outflow.m_flow * actualStream(Outflow.Xi_outflow) + Reabsorption.m_flow * actualStream(Reabsorption.Xi_outflow);
        zeros(Outflow.Medium.nXi) = Inflow.m_flow * actualStream(Inflow.Xi_outflow) + Outflow.m_flow * Outflow.Xi_outflow + Reabsorption.m_flow * actualStream(Reabsorption.Xi_outflow);
        zeros(Reabsorption.Medium.nXi) = Inflow.m_flow * actualStream(Inflow.Xi_outflow) + Outflow.m_flow * actualStream(Outflow.Xi_outflow) + Reabsorption.m_flow * Reabsorption.Xi_outflow;
        zeros(Inflow.Medium.nC) = Inflow.m_flow * Inflow.C_outflow + Outflow.m_flow * actualStream(Outflow.C_outflow) + Reabsorption.m_flow * actualStream(Reabsorption.C_outflow);
        zeros(Outflow.Medium.nC) = Inflow.m_flow * actualStream(Inflow.C_outflow) + Outflow.m_flow * Outflow.C_outflow + Reabsorption.m_flow * actualStream(Reabsorption.C_outflow);
        zeros(Reabsorption.Medium.nC) = Inflow.m_flow * actualStream(Inflow.C_outflow) + Outflow.m_flow * actualStream(Outflow.C_outflow) + Reabsorption.m_flow * Reabsorption.C_outflow;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-100, 130}, {100, 108}}, lineColor = {127, 0, 0}, textString = "%name")}),
          Documentation(revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
</html>", info = "<html>
<p><h4><font color=\"#008000\">Hydraulic Reabsorption</font></h4></p>
<p>If useOutflowMin=false then the next schema is used.</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorption.png\"/></li>
</ul></p>
<p><br/>If  useOutflowMin=true then the extended schema is used:</p>
<p><ul>
<li><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/HydraulicReabsorptionWithOutflowMin.png\"/></li>
</ul></p>
</html>"));
      end Reabsorption;

      model BodyFluidMembrane
        import Physiolibrary;
        extends Physiolibrary.Icons.Membrane;

        replaceable package BloodPlasma = Physiolibrary.Media.BodyFluid constrainedby Physiolibrary.Media.BodyFluid "Medium model of blood plasma" annotation (
           choicesAllMatching = true);
        replaceable package Dialysate = Physiolibrary.Media.BodyFluid constrainedby Physiolibrary.Media.BodyFluid "Medium model of dialysate" annotation (
           choicesAllMatching = true);

        parameter Physiolibrary.Types.Permeability Permeabilities[BloodPlasma.nS]={1e-06,
            1e-06,1e-06,1e-06,1e-06,1e-06,1e-06,1e-06,0,0,0,1e-06}                                                                                           "Membrane permeability coeficients for {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others,H2O}";

        Chemical.Components.Membrane Na(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Na")])
          annotation (Placement(transformation(extent={{-10,76},{10,96}})));
        Chemical.Components.Membrane HCO3(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "HCO3")])
          annotation (Placement(transformation(extent={{-10,58},{10,78}})));
        Chemical.Components.Membrane K(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i("K")])
          annotation (Placement(transformation(extent={{-8,40},{12,60}})));
        Chemical.Components.Membrane Glucose(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Glucose")])
          annotation (Placement(transformation(extent={{-8,22},{12,42}})));
        Chemical.Components.Membrane Urea(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Urea")])
          annotation (Placement(transformation(extent={{-8,2},{12,22}})));
        Chemical.Components.Membrane Cl(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Cl")])
          annotation (Placement(transformation(extent={{-8,-16},{12,4}})));
        Chemical.Components.Membrane Mg(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Mg")])
          annotation (Placement(transformation(extent={{-6,-58},{14,-38}})));
        Chemical.Components.Membrane H2O(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "H2O")])
          annotation (Placement(transformation(extent={{-6,-82},{14,-62}})));
        Chemical.Components.Membrane Ca(each EnthalpyNotUsed=false, KC=
              Permeabilities[Physiolibrary.Media.BodyFluid.i(
              "Ca")])
          annotation (Placement(transformation(extent={{-6,-36},{14,-16}})));
        Dialysate.SubstancesPort bodyFluid_b annotation (Placement(transformation(extent={{80,-20},{120,20}})));
        BloodPlasma.SubstancesPort bodyFluid_a annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
      equation

        connect(Na.port_a,bodyFluid_a. Na) annotation (Line(points={{-10,86},{-74,86},{-74,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(Na.port_b, bodyFluid_b.Na) annotation (Line(points={{10,86},{74,86},{74,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(HCO3.port_a,bodyFluid_a. HCO3) annotation (Line(points={{-10,68},{-72,68},{-72,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(HCO3.port_b, bodyFluid_b.HCO3) annotation (Line(points={{10,68},{72,68},{72,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(K.port_a,bodyFluid_a. K) annotation (Line(points={{-8,50},{-70,50},{-70,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(K.port_b, bodyFluid_b.K) annotation (Line(points={{12,50},{70,50},{70,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(Glucose.port_a,bodyFluid_a. Glucose) annotation (Line(points={{-8,32},{-68,32},{-68,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(Glucose.port_b, bodyFluid_b.Glucose) annotation (Line(points={{12,32},{68,32},{68,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(Urea.port_a,bodyFluid_a. Urea) annotation (Line(points={{-8,12},{-66,12},{-66,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(Urea.port_b, bodyFluid_b.Urea) annotation (Line(points={{12,12},{66,12},{66,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(Cl.port_a,bodyFluid_a. Cl) annotation (Line(points={{-8,-6},{-66,-6},{-66,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(Cl.port_b, bodyFluid_b.Cl) annotation (Line(points={{12,-6},{68,-6},{68,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(Mg.port_a,bodyFluid_a. Mg) annotation (Line(points={{-6,-48},{-74,-48},{-74,0},{-99.9,0},{-99.9,0.1}}, color={158,66,200}));
        connect(Mg.port_b, bodyFluid_b.Mg) annotation (Line(points={{14,-48},{74,-48},{74,0},{100.1,0},{100.1,0.1}}, color={158,66,200}));
        connect(Ca.port_a,bodyFluid_a. Ca) annotation (Line(points={{-6,-26},{-72,-26},{-72,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(Ca.port_b, bodyFluid_b.Ca) annotation (Line(points={{14,-26},{72,-26},{72,0.1},{100.1,0.1}}, color={158,66,200}));
        connect(H2O.port_a,bodyFluid_a. H2O) annotation (Line(points={{-6,-72},{-76,-72},{-76,0.1},{-99.9,0.1}}, color={158,66,200}));
        connect(H2O.port_b, bodyFluid_b.H2O) annotation (Line(points={{14,-72},{76,-72},{76,0.1},{100.1,0.1}}, color={158,66,200}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end BodyFluidMembrane;
      annotation (
        Documentation(info = "<html>
<p>Main components for physiological fluid modeling.</p>
</html>"));
    end Components;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;
      connector FluidPort = Modelica.Fluid.Interfaces.FluidPort(redeclare
            replaceable package Medium =
            Physiolibrary.Media.Water);

      connector FluidPort_a "Hydraulical inflow connector"
        extends FluidPort;
        annotation (
          defaultComponentName = "port_a",
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 110}, {150, 50}}, textString = "%name")}),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {127, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid, lineThickness = 0.5), Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid)}),
          Documentation(info = "<html>
<p>
Connector with one flow signal of type Real.
</p>
</html>", revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>"));
      end FluidPort_a;

      connector FluidPort_b "Hydraulical outflow connector"
        extends FluidPort;
        annotation (
          defaultComponentName = "port_b",
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-30, 30}, {30, -30}}, lineColor = {127, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 110}, {150, 50}}, textString = "%name")}),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {127, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid, lineThickness = 0.5), Ellipse(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-80, 80}, {80, -80}}, lineColor = {127, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}));
      end FluidPort_b;

      connector FluidPorts_a "Fluid connector with filled, large icon to be used for vectors of FluidPorts (vector dimensions must be added after dragging)"
        extends FluidPort;
        annotation (
          defaultComponentName = "ports_a",
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-50, -200}, {50, 200}}, initialScale = 0.2), graphics={  Text(extent = {{-75, 130}, {75, 100}}, textString = "%name"), Rectangle(extent = {{25, -100}, {-25, 100}}, lineColor = {127, 0, 0}), Ellipse(extent = {{-25, 90}, {25, 40}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-25, 25}, {25, -25}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-25, -40}, {25, -90}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid)}),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-50, -200}, {50, 200}}, initialScale = 0.2), graphics={  Rectangle(extent = {{50, -200}, {-50, 200}}, lineColor = {127, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, lineThickness = 0.5), Ellipse(extent = {{-50, 180}, {50, 80}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-50, 50}, {50, -50}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-50, -80}, {50, -180}}, lineColor = {0, 0, 0}, fillColor = {127, 0, 0}, fillPattern = FillPattern.Solid)}));
      end FluidPorts_a;

      partial model OnePort "Hydraulical OnePort"
        replaceable package Medium = Media.Water constrainedby
          Media.Interfaces.PartialMedium                                                      "Medium model" annotation (
           choicesAllMatching = true);
        outer Modelica.Fluid.System system "System wide properties";
        FluidPort_a q_in(redeclare package Medium = Medium) "Inflow" annotation (
          Placement(transformation(extent = {{-114, -14}, {-86, 14}})));
        FluidPort_b q_out(redeclare package Medium = Medium) "Outflow" annotation (
          Placement(transformation(extent = {{86, -14}, {114, 14}})));
        Physiolibrary.Types.MassFlowRate massFlowRate "Mass flow";
        Physiolibrary.Types.VolumeFlowRate volumeFlowRate "Volume flow";
        Physiolibrary.Types.Pressure dp "Pressure gradient";
        Modelica.Units.SI.Density density(start = Medium.density_pTX(system.p_ambient, system.T_ambient, Medium.reference_X));
        parameter Boolean EnthalpyNotUsed = false annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(tab = "Advanced", group = "Performance"));
      equation
        q_in.m_flow + q_out.m_flow = 0;
        massFlowRate = q_in.m_flow;
        dp = q_in.p - q_out.p;
        q_in.Xi_outflow = inStream(q_out.Xi_outflow);
        q_in.C_outflow = inStream(q_out.C_outflow);
        q_out.Xi_outflow = inStream(q_in.Xi_outflow);
        q_out.C_outflow = inStream(q_in.C_outflow);
        volumeFlowRate * density = massFlowRate;
        if EnthalpyNotUsed then
          q_in.h_outflow = Medium.specificEnthalpy_pTX(system.p_ambient, system.T_ambient, Medium.reference_X);
          q_out.h_outflow = Medium.specificEnthalpy_pTX(system.p_ambient, system.T_ambient, Medium.reference_X);
          density = Medium.density_pTX(q_in.p, system.T_ambient, Medium.reference_X);
        else
          q_in.h_outflow = inStream(q_out.h_outflow);
          q_out.h_outflow = inStream(q_in.h_outflow);
          // medium density
          density = if q_in.m_flow >= 0 then Medium.density_phX(q_in.p, inStream(q_in.h_outflow), inStream(q_in.Xi_outflow)) else Medium.density_phX(q_out.p, inStream(q_out.h_outflow), inStream(q_out.Xi_outflow));
        end if;
      end OnePort;

      partial model OnePort_UpDown "OnePort with different position of connectors"
        replaceable package Medium = Media.Water constrainedby
          Media.Interfaces.PartialMedium                                                      "Medium model" annotation (
           choicesAllMatching = true);
        //Physiolibrary.Chemical.Examples.Media.SimpleBodyFluid_C
        Physiolibrary.Fluid.Interfaces.FluidPort_a q_up(redeclare package Medium = Medium) "Top site" annotation (
          Placement(transformation(extent = {{86, 26}, {114, 54}}), iconTransformation(extent = {{86, 26}, {114, 54}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_a q_down(redeclare package
            Medium =                                                                 Medium) "Bottom site" annotation (
          Placement(transformation(extent = {{84, -56}, {112, -28}}), iconTransformation(extent = {{84, -56}, {112, -28}})));
        Physiolibrary.Types.MassFlowRate massFlowRate "Mass flow";
        Physiolibrary.Types.VolumeFlowRate volumeFlowRate "Volume flow";
        Physiolibrary.Types.Pressure dp "Pressure gradient";
        Modelica.Units.SI.Density density;
      equation
        q_up.m_flow + q_down.m_flow = 0;
        massFlowRate = q_up.m_flow;
        dp = q_up.p - q_down.p;
        q_up.h_outflow = inStream(q_down.h_outflow);
        q_up.Xi_outflow = inStream(q_down.Xi_outflow);
        q_up.C_outflow = inStream(q_down.C_outflow);
        q_down.h_outflow = inStream(q_up.h_outflow);
        q_down.Xi_outflow = inStream(q_up.Xi_outflow);
        q_down.C_outflow = inStream(q_up.C_outflow);
        volumeFlowRate * density = massFlowRate;
      // medium density
        density = if q_up.m_flow >= 0 then Medium.density(Medium.setState_phX(q_up.p, inStream(q_up.h_outflow), inStream(q_up.Xi_outflow))) else Medium.density(Medium.setState_phX(q_down.p, inStream(q_down.h_outflow), inStream(q_down.Xi_outflow)));
        annotation (
          Documentation(revisions = "<html>
<p><i>2017-2018</i></p>
<p>Marek Matejak, http://www.physiolib.com </p>
</html>", info = "<html>
      <p>One port for hydrostatic column.&nbsp;</p>
</html>"));
      end OnePort_UpDown;

      partial model ConditionalMassFlow "Input of solution mass flow vs. parametric solution mass flow"
        parameter Boolean useSolutionFlowInput = false "=true, if solution flow input is used instead of parameter SolutionFlow" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.MassFlowRate SolutionFlow = 0 "Mass flow of solution if useSolutionFlowInput=false" annotation (
          HideResult = not useSolutionFlowInput,
          Dialog(enable = not useSolutionFlowInput));
        Physiolibrary.Types.RealIO.MassFlowRateInput solutionFlow(start = SolutionFlow) = q if useSolutionFlowInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 40}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 70})));
        Physiolibrary.Types.MassFlowRate q "Current solution flow";
      equation
        if not useSolutionFlowInput then
          q = SolutionFlow;
        end if;
      end ConditionalMassFlow;

      partial model ConditionalVolumeFlow "Input of solution volume flow vs. parametric solution volume flow"
        parameter Boolean useSolutionFlowInput = false "=true, if solution flow input is used instead of parameter SolutionFlow" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.VolumeFlowRate SolutionFlow = 0 "Mass flow of solution if useSolutionFlowInput=false" annotation (
          HideResult = not useSolutionFlowInput,
          Dialog(enable = not useSolutionFlowInput));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput solutionFlow(start = SolutionFlow) = q if useSolutionFlowInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 40}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 70})));
        Physiolibrary.Types.VolumeFlowRate q "Current solution flow";
      equation
        if not useSolutionFlowInput then
          q = SolutionFlow;
        end if;
      end ConditionalVolumeFlow;

      partial model CompositionSetup "Initial substances composition setup"
        replaceable package Medium = Media.Water
            constrainedby Media.Interfaces.PartialMedium "Medium model" annotation (
           choicesAllMatching = true);

        outer Modelica.Fluid.System system "System wide properties";
        parameter Modelica.Units.SI.MassFraction massFractions_start[:] = Medium.reference_X "* Masses of all base molecules. If size is nS-1 then last value is 1-sum(others). If size is nS then all values are scaled to sum==1." annotation (
          Dialog(enable = not use_concentration_start, group = "Initialization of medium composition"));
        parameter Real extraConcentration_start[Medium.nC] = Medium.C_default "Extra substance amounts per kilogram of solution"
          annotation(Dialog(group = "Initialization of medium composition"));
        parameter Modelica.Units.SI.Temperature temperature_start = system.T_ambient "Initial temperature" annotation (
          Dialog(group = "Initialization"));
        parameter Modelica.Units.SI.Pressure pressure_start = system.p_ambient "Initial pressure" annotation (
          Dialog(group = "Initialization"));

      protected
        parameter Modelica.Units.SI.MassFraction x_mass_start[Medium.nS] =
          if Medium.nS < 2 then {1} else
                if size(massFractions_start, 1) == Medium.nS - 1 then
                 cat(1, massFractions_start, {1 - sum(massFractions_start)})
                elseif size(massFractions_start, 1) == Medium.nS then
                  massFractions_start
                else
                 ones(Medium.nS) "Initial mass fractions of substances";
        parameter Real C_start[Medium.nC] = extraConcentration_start "Extra substance amounts per kilogram of solution";
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end CompositionSetup;

      partial model Accumulation
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        parameter Integer nPorts = 0 "Number of hydraulic ports" annotation (
          Evaluate = true,
          Dialog(connectorSizing = true, group = "Ports"));
        Interfaces.FluidPorts_a q_in[nPorts](redeclare package Medium = Medium, each h_outflow(nominal=Medium.SpecificEnthalpyNominal)) annotation (
          Placement(transformation(extent = {{-10, -28}, {10, 28}}), iconTransformation(extent = {{-7, -26}, {7, 26}}, rotation = 180, origin = {-1, 0})));
        parameter Boolean useSubstances = false "=true, if substance ports are used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Boolean onElectricGround = false "=true, if electric potencial is zero" annotation (
          Evaluate = true,
          choices(checkBox = true));
        //,Dialog(group="Conditional inputs"));
        Medium.SubstancesPort substances if useSubstances annotation (
          Placement(transformation(extent={{-120,-20},{-80,20}}),      iconTransformation(extent={{-120,
                  -20},{-80,20}})));

        Medium.ChemicalSolution chemicalSolution(
          startSubstanceMasses = m_start,
          p = pressure,
          h = enthalpy / mass,
          X = if not Medium.reducedX then massFractions else cat(1, massFractions, {1 - sum(massFractions)}),
          _i = i)  if useSubstances;                              //enthalpy / mass,

        parameter Boolean use_mass_start = false "Use mass_start, otherwise volume_start" annotation (
          Evaluate = true,
          choices(checkBox = true),
          Dialog(group = "Initialization"));
        parameter Physiolibrary.Types.Volume volume_start=0.001   "Total volume of solution start value" annotation (
          HideResult = use_mass_start,
          Dialog(enable = not use_mass_start, group = "Initialization"));
        parameter Physiolibrary.Types.Mass mass_start(displayUnit="kg")=1     "Total mass of solution start value" annotation (
          HideResult = not use_mass_start,
          Dialog(enable = use_mass_start, group = "Initialization"));

        parameter Boolean useThermalPort = false "Is thermal port pressent?" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));

        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort(T = Medium.temperature_phX(pressure, enthalpy / mass, massFractions), Q_flow = heatFromEnvironment) if useThermalPort annotation (
          Placement(transformation(extent = {{-70, -90}, {-50, -70}}), iconTransformation(extent={{-70,
                -110},{-50,-90}})));

      protected
        parameter Physiolibrary.Types.Mass tm_start(displayUnit = "kg") = if use_mass_start then mass_start else volume_start * Medium.density_pTX(pressure_start, temperature_start, x_mass_start) "If both mass_start and volume_start are filled";

        parameter Modelica.Units.SI.Mass m_start[Medium.nS] = tm_start * x_mass_start[1:Medium.nS];
        Modelica.Units.SI.ElectricCurrent i;
      public
        Physiolibrary.Types.HeatFlowRate heatFromEnvironment;

        Physiolibrary.Types.Enthalpy enthalpy( start = m_start * Medium.specificEnthalpies_TpvI(temperature_start,pressure_start));

        Physiolibrary.Types.Mass mass(start = tm_start);
        Physiolibrary.Types.MassFraction massFractions[Medium.nXi];
        Physiolibrary.Types.MassFraction xx_mass[nPorts, Medium.nXi] "Substance mass fraction per fluid port";

        Real xC_mass[nPorts, Medium.nC] "Extra substance in 1 kg of solution per fluid port";
        Real extraSubstanceAmounts[Medium.nC](start = tm_start * C_start) "Current amount of extra substances";
        Real extraSubstanceConcentrations[Medium.nC](start = C_start) "Current anount per kg of extra substances";

        Physiolibrary.Types.Volume volume;
        Physiolibrary.Types.Density density;
      protected
        Physiolibrary.Types.Pressure pressure;
        Physiolibrary.Types.RealIO.HeatFlowRateOutput enthalpyFromSubstances "Enthalpy inflow in substances connectors [J/s]";
        Physiolibrary.Types.RealIO.MassFlowRateOutput massFlows[Medium.nS](nominal=Medium.SubstanceFlowNominal);
        Physiolibrary.Types.RealIO.ElectricPotentialOutput v;

        Physiolibrary.Types.RealIO.MassFlowRateOutput substanceMassFlowsFromStream[Medium.nS](nominal=Medium.SubstanceFlowNominal);
        Physiolibrary.Types.RealIO.MassInput substanceMasses[Medium.nS](nominal=Medium.SubstanceFlowNominal);

      initial equation
      //  assert(abs(1 - sum(x_mass_start)) < 1e-5, "Sum of x_mass_start must be 1. (Composition initialization failed)");
      /* assert(
  not ((compositionType == Physiolibrary.Fluid.Interfaces.CompositionType.Concentration) and (size(concentration_start,1)==Medium.nS-2) and (Medium.nS<2) or 
  (Medium.zb[Medium.nS - 1]==0)), "Initial electroneutral concentration composition is not supported with this medium (try to use mass fractions)!");
*/
      /*  assert(
  not ((compositionType == Physiolibrary.Fluid.Interfaces.CompositionType.Concentration) and (size(concentration_start,1)>=Medium.nS-2)),
  "Initial concentration composition must have at least 
  -2 values!");
  */
        if not useSubstances then
          substanceMasses = m_start;
        end if;
        if Medium.reducedX then
          mass = tm_start;
        end if;

        enthalpy = m_start * Medium.specificEnthalpies_TpvI(temperature_start,pressure_start,v);

      equation

        if onElectricGround then
          v = 0;
        else
          i = 0;
        end if;
        if not useThermalPort then
          heatFromEnvironment = 0;
        end if;
        if useSubstances then
          connect(substances, chemicalSolution.substances);
          connect(chemicalSolution.massFlows, massFlows);
          connect(chemicalSolution.enthalpyFromSubstances, enthalpyFromSubstances);
          connect(chemicalSolution.substanceMasses, substanceMasses);
          connect(chemicalSolution.substanceMassFlowsFromStream, substanceMassFlowsFromStream);
          connect(v, chemicalSolution.v);
        else
          der(substanceMasses) = substanceMassFlowsFromStream;

          massFlows = zeros(Medium.nS);

          enthalpyFromSubstances = 0;

          if not onElectricGround then
          //both electric variables set to zero
            v = 0;
          else
            i = 0;
          end if;
        end if;

        substanceMassFlowsFromStream =  (if not Medium.reducedX then q_in.m_flow*xx_mass else cat(1, q_in.m_flow*xx_mass, {q_in.m_flow*(ones(nPorts) - xx_mass*ones(Medium.nXi))}));

        der(extraSubstanceAmounts) = q_in.m_flow * xC_mass;

        mass = sum(substanceMasses);

        massFractions = substanceMasses[1:Medium.nXi] ./ mass;

        der(enthalpy) = q_in.m_flow * actualStream(q_in.h_outflow) + enthalpyFromSubstances + heatFromEnvironment;

        volume = mass / density;
        density = Medium.density_phX(pressure, enthalpy / mass, massFractions);

        extraSubstanceConcentrations = extraSubstanceAmounts ./ mass;
        for i in 1:nPorts loop
          xx_mass[i, :] = actualStream(q_in[i].Xi_outflow);
          xC_mass[i, :] = actualStream(q_in[i].C_outflow);
          q_in[i].p = pressure;
          q_in[i].h_outflow = enthalpy / mass;
          q_in[i].Xi_outflow = massFractions;
          q_in[i].C_outflow  = extraSubstanceConcentrations;
        end for;

        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end Accumulation;

      partial model PartialAbsoluteSensor "Partial component to model a sensor that measures a potential variable"
        replaceable package Medium = Physiolibrary.Media.Water constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                    "Medium in the sensor" annotation (
           choicesAllMatching = true);
        Modelica.Fluid.Interfaces.FluidPort_a
                    port(redeclare package Medium = Medium, m_flow(min = 0)) annotation (
          Placement(transformation(origin = {0, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
      equation
        port.m_flow = 0;
        port.h_outflow = Medium.h_default;
        port.Xi_outflow = Medium.X_default[1:Medium.nXi];
        port.C_outflow = Medium.C_default;
        annotation (
          Documentation(info = "<html>
<p>
Partial component to model an <strong>absolute sensor</strong>. Can be used for pressure sensor models.
Use for other properties such as temperature or density is discouraged, because the enthalpy at the connector can have different meanings, depending on the connection topology. Use <code>PartialFlowSensor</code> instead.
as signal.
</p>
</html>"));
      end PartialAbsoluteSensor;

    end Interfaces;

    package Sensors
      extends Modelica.Icons.SensorsPackage;

      model FlowMeasure "Volumetric flow between ports"
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        // extends Icons.FlowMeasure;
        extends Modelica.Icons.RoundSensor;
        Physiolibrary.Types.RealIO.MassFlowRateOutput massFlow
        "Actual mass flow rate"                                                        annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {0, 120})));
        Physiolibrary.Types.VolumeFlowRate volumeInflowRate;
        Physiolibrary.Types.VolumeFlowRate volumeOutflowRate;
      protected
        Medium.ThermodynamicState state_inflow "state for medium inflowing through q_in";
        Medium.ThermodynamicState state_outflow "state for medium outflowing through q_out";
        Modelica.Units.SI.Density density_inflow;
        Modelica.Units.SI.Density density_outflow;
      equation
        q_out.p = q_in.p;
        massFlow = q_in.m_flow;
      // medium states
        state_inflow = Medium.setState_phX(q_in.p, inStream(q_in.h_outflow), inStream(q_in.Xi_outflow));
        state_outflow = Medium.setState_phX(q_out.p, inStream(q_out.h_outflow), inStream(q_out.Xi_outflow));
        density_inflow = Medium.density(state_inflow);
        density_outflow = Medium.density(state_outflow);
        volumeInflowRate = massFlow / density_inflow;
        volumeOutflowRate = massFlow / density_outflow;
        annotation (
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-25, -11}, {34, -70}}, lineColor = {0, 0, 0}, textString = "V'")}));
      end FlowMeasure;

      model PressureMeasure "Hydraulic pressure at port"
        extends Physiolibrary.Icons.PressureMeasure;
        extends Fluid.Interfaces.PartialAbsoluteSensor;

        outer Modelica.Fluid.System system "System wide properties";
        parameter Boolean GetAbsolutePressure = false "if false then output pressure is relative to ambient pressure" annotation (
          Evaluate = true,
          choices(checkBox = true));
        Physiolibrary.Types.RealIO.PressureOutput pressure "Pressure" annotation (
          Placement(transformation(extent = {{40, -60}, {80, -20}})));
      equation
        pressure =port.p  - (if GetAbsolutePressure then 0 else system.p_ambient);

        annotation (
          Documentation(revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"));
      end PressureMeasure;

      /*
      	  model MolarConcentrations "Ideal one port molarity sensor"
      	    extends Modelica.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor(redeclare
      		package Medium = Physiolibrary.Media.SimpleWater);
      	    extends Modelica.Icons.RotationalSensor;
      	    parameter String substanceName = "CO2" "Name of substance";
      
      	    Types.RealIO.ConcentrationOutput c "Molar concentration in port medium"
      	      annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      
      	  protected
      	    parameter Integer ind(fixed=false)
      	      "Index of species in vector of independent mass fractions";
      	    Types.Concentration cVec[Medium.nCS]
      	      "Concentration vector, needed because indexed argument for the operator inStream is not supported";
      	    Medium.ThermodynamicState state = Medium.setState_phX(port.p,inStream(port.h_outflow));
      
      	  initial algorithm
      	    ind:= -1;
      	    for i in 1:Medium.nXi loop
      	      if ( Modelica.Utilities.Strings.isEqual(Medium.substanceNames[i], substanceName)) then
      		ind := i;
      	      end if;
      	    end for;
      	    assert(ind > 0, "Mass fraction '" + substanceName + "' is not present in medium '"
      		   + Medium.mediumName + "'.\n"
      		   + "Check sensor parameter and medium model.");
      	  equation
      	    cVec = Medium.concentration(state,inStream(port.Xi_outflow),inStream(port.C_outflow));
      	    c = cVec[ind];
      	  annotation (defaultComponentName="massFraction",
      	    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
      		      100}}), graphics={
      		  Line(points={{0,-70},{0,-100}}, color={0,0,127}),
      		  Text(
      		    extent={{-150,80},{150,120}},
      		    textString="%name",
      		    lineColor={0,0,255}),
      		  Text(
      		    extent={{160,-30},{60,-60}},
      		    textString="Xi"),
      		  Line(points={{70,0},{100,0}}, color={0,0,127})}),
      	    Documentation(info="<html>
      	<p>
      	This component monitors the mass fraction contained in the fluid passing its port.
      	The sensor is ideal, i.e., it does not influence the fluid.
      	</p>
      	</html>",   revisions="<html>
      	<ul>
      	<li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
      	</ul>
      	</html>"));
      	end MolarConcentrations;
      	*/

      model PartialPressure "Measure of partial pressure of the substance"
        extends Modelica.Icons.RoundSensor;
        extends Fluid.Interfaces.PartialAbsoluteSensor;
        extends Chemical.Interfaces.PartialSubstance;

        Physiolibrary.Types.RealIO.PressureOutput partialPressure "Partial pressure of the substance in gaseous solution" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, origin = {-100, 0}, rotation = 180)));

      protected
        Medium.ThermodynamicState state;
      equation
        partialPressure = x * state.p;
        state =Medium.setState_phX(
          port.p,
          inStream(port.h_outflow),
          inStream(port.Xi_outflow));
      //aliases
        temperature = Medium.temperature(state);
        pressure = state.p;

        electricPotential = 0;
        moleFractionBasedIonicStrength = 0;
        port_a.q = 0;

        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-31, -3}, {28, -62}}, lineColor = {0, 0, 0}, textString = "p"), Line(points = {{70, 0}, {80, 0}}, color = {127, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33})}),
          Documentation(revisions = "<html>
<p><i>2009-2015</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end PartialPressure;

      model Temperature "Temperature sensor"

        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor;

        Physiolibrary.Types.RealIO.TemperatureOutput T "Temperature" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
        Real inX[:] = inStream( port.Xi_outflow);
      equation
        T = Medium.temperature_phX(port.p, inStream(port.h_outflow), inX);

        annotation (defaultComponentName="temperature",
          Documentation(info="<html>
<p>
This component monitors the temperature of the fluid passing its port.
The sensor is ideal, i.e., it does not influence the fluid.
</p>
</html>"),     Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Line(points={{0,-70},{0,-100}}, color={0,0,127}),
              Ellipse(
                extent={{-20,-98},{20,-60}},
                lineThickness=0.5,
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-12,40},{12,-68}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-12,40},{-12,80},{-10,86},{-6,88},{0,90},{6,88},{10,86},{
                    12,80},{12,40},{-12,40}},
                lineThickness=0.5),
              Line(
                points={{-12,40},{-12,-64}},
                thickness=0.5),
              Line(
                points={{12,40},{12,-64}},
                thickness=0.5),
              Line(points={{-40,-20},{-12,-20}}),
              Line(points={{-40,20},{-12,20}}),
              Line(points={{-40,60},{-12,60}}),
              Line(points={{12,0},{60,0}}, color={0,0,127})}),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}), graphics={
              Ellipse(
                extent={{-20,-88},{20,-50}},
                lineThickness=0.5,
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-12,50},{12,-58}},
                lineColor={191,0,0},
                fillColor={191,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-12,50},{-12,90},{-10,96},{-6,98},{0,100},{6,98},{10,96},{
                    12,90},{12,50},{-12,50}},
                lineThickness=0.5),
              Line(
                points={{-12,50},{-12,-54}},
                thickness=0.5),
              Line(
                points={{12,50},{12,-54}},
                thickness=0.5),
              Line(points={{-40,-10},{-12,-10}}),
              Line(points={{-40,30},{-12,30}}),
              Line(points={{-40,70},{-12,70}}),
              Text(
                extent={{126,-30},{6,-60}},
                textString="T"),
              Text(
                extent={{-150,110},{150,150}},
                textString="%name",
                textColor={0,0,255}),
              Line(points={{12,0},{60,0}}, color={0,0,127})}));
      end Temperature;

      model pH "Measure of pH (acidity) of the solution"
        extends Modelica.Icons.RoundSensor;
        extends Fluid.Interfaces.PartialAbsoluteSensor;
        extends Chemical.Interfaces.PartialSubstance(final substanceData = if useHydronium then Chemical.Substances.Hydronium_aqueous() else Chemical.Substances.Proton_aqueous(), redeclare
            final package stateOfMatter =
            Chemical.Interfaces.Incompressible);

        Physiolibrary.Types.RealIO.pHOutput pH "Acidity of the solution" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, origin = {-100, 0}, rotation = 180)));
        parameter Boolean useHydronium = false "Measured substance is H3O+ instead of H+";
        Types.SpecificEnthalpy h;
      protected
        Medium.ThermodynamicState state;
      equation
        pH = -log10(a);
        h =inStream(port.h_outflow);
        state =Medium.setState_phX(
          port.p,
          h,
          inStream(port.Xi_outflow));
      //aliases
        temperature = Medium.temperature(state);
        pressure = state.p;

        electricPotential = 0;
        moleFractionBasedIonicStrength = 0;
        port_a.q = 0;

        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-31, -3}, {28, -62}}, lineColor={0,0,0},
                textString="pH"),                                                                                                                                                              Line(points = {{70, 0}, {80, 0}}, color = {127, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33})}),
          Documentation(revisions = "<html>
<p><i>2009-2015</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
      end pH;

      model BloodGasesMeasurement
        extends Modelica.Icons.RoundSensor;
        outer Modelica.Fluid.System system;
        replaceable package Medium =
          Physiolibrary.Media.Blood                             "Blood" annotation (
          choicesAllMatching = true);
        Physiolibrary.Fluid.Interfaces.FluidPort_a a_port(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{-70, -112}, {-50, -92}}), iconTransformation(extent = {{-70, -112}, {-50, -92}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_a b_port(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{52, -112}, {72, -92}}), iconTransformation(extent = {{52, -112}, {72, -92}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pO2_measure(redeclare
            package                                                               stateOfMatter =
            Chemical.Interfaces.IdealGas,                                                                                       substanceData = Chemical.Substances.Oxygen_gas(), redeclare
            package Medium =                                                                                                                                                                                 Medium) annotation (
          Placement(transformation(extent = {{50, 50}, {30, 70}})));
        Physiolibrary.Fluid.Sensors.pH pH_measure(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{-24, -70}, {-44, -50}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pCO2_measure(redeclare
            package                                                                stateOfMatter =
            Chemical.Interfaces.IdealGas,                                                                                        substanceData = Chemical.Substances.CarbonDioxide_gas(), redeclare
            package Medium =                                                                                                                                                                                         Medium) annotation (
          Placement(transformation(extent = {{12, -10}, {-8, 10}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasureSystemicCapillaries(redeclare
            package                                                                                      Medium = Medium) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {78, -76})));
        Physiolibrary.Types.RealIO.PressureOutput pressure annotation (
          Placement(transformation(extent = {{100, -90}, {120, -70}}), iconTransformation(extent = {{100, -90}, {120, -70}})));
        Physiolibrary.Types.RealIO.pHOutput pH annotation (
          Placement(transformation(extent = {{100, -50}, {120, -30}}), iconTransformation(extent = {{100, -50}, {120, -30}})));
        Physiolibrary.Types.RealIO.PressureOutput pO2 annotation (
          Placement(transformation(extent = {{100, 30}, {120, 50}}), iconTransformation(extent = {{100, 30}, {120, 50}})));
        Physiolibrary.Types.RealIO.PressureOutput pCO2 annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -10}, {120, 10}})));

        Types.RealIO.FractionOutput sO2 "Oxygen saturation (amount of oxygen per amount of hemoglobin units)" annotation (
          Placement(transformation(extent = {{100, 70}, {120, 90}}), iconTransformation(extent = {{100, 70}, {120, 90}})));
        Modelica.Units.SI.SpecificEnthalpy h;
        Modelica.Units.SI.MassFraction X[Medium.nXi];
        Modelica.Units.SI.Density d;
        Medium.ThermodynamicState state;
        Medium.SubstancesDecomposition substancesDecomposition annotation (Placement(transformation(extent={{-64,-10},{-44,10}})));
        Medium.SubstancesPort substances annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));
      equation
        state = Medium.setState_phX(a_port.p,h,X,0,0);
        h = actualStream(a_port.h_outflow);
        X = actualStream(a_port.Xi_outflow);
        d = Medium.density_phX(a_port.p, h, X);
        sO2 = Medium.tO2(state)/Medium.tHb(state);
        connect(pressureMeasureSystemicCapillaries.port, a_port) annotation (
          Line(points={{78,-86},{78,-90},{40,-90},{40,-84},{-60,-84},{-60,-102}},              color = {127, 0, 0}, thickness = 0.5));
        connect(pCO2_measure.port, a_port) annotation (Line(
            points={{2,-10},{2,-84},{-60,-84},{-60,-102}},
            color={127,0,0},
            thickness=0.5));
        connect(pH_measure.port, a_port) annotation (Line(
            points={{-34,-70},{-34,-82},{-60,-82},{-60,-102}},
            color={127,0,0},
            thickness=0.5));
        connect(pO2_measure.port, a_port) annotation (Line(
            points={{40,50},{40,-84},{-60,-84},{-60,-102}},
            color={127,0,0},
            thickness=0.5));
        connect(pressureMeasureSystemicCapillaries.pressure, pressure) annotation (
          Line(points = {{84, -80}, {96, -80}, {96, -80}, {110, -80}}, color = {0, 0, 127}));
        connect(pO2_measure.partialPressure, pO2) annotation (
          Line(points = {{50, 60}, {80, 60}, {80, 40}, {110, 40}}, color = {0, 0, 127}));
        connect(pCO2_measure.partialPressure, pCO2) annotation (
          Line(points = {{12, 0}, {60, 0}, {60, 0}, {110, 0}}, color = {0, 0, 127}));
        connect(pH_measure.pH, pH) annotation (
          Line(points = {{-24, -60}, {42, -60}, {42, -40}, {110, -40}}, color = {0, 0, 127}));
        connect(a_port, b_port) annotation (
          Line(points = {{-60, -102}, {-60, -100}, {62, -100}, {62, -102}}, color = {127, 0, 0}, thickness = 0.5));
        connect(substancesDecomposition.substances, substances) annotation (Line(
            points={{-64,0},{-100,0}},
            color={0,0,255},
            thickness=0.5));
        connect(substancesDecomposition.O2, pO2_measure.port_a) annotation (Line(points={{-44,6},{-28,6},{-28,60},{30,60}}, color={158,66,200}));
        connect(substancesDecomposition.CO2, pCO2_measure.port_a) annotation (Line(points={{-44,10},{-14,10},{-14,0},{-8,0}}, color={158,66,200}));
        connect(substancesDecomposition.H, pH_measure.port_a)
          annotation (Line(points={{-44,-6},{-40,-6},{-40,-46},{-48,-46},{-48,-60},{-44,-60}}, color={158,66,200}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Text(extent = {{-150, 80}, {150, 120}}, textString = "%name", lineColor = {162, 29, 33})}),
          Diagram(coordinateSystem(preserveAspectRatio = false)));
      end BloodGasesMeasurement;

      model Power "Power as pressure multiplied by volumetric flow between ports"
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        extends Modelica.Icons.RoundSensor;
        Physiolibrary.Types.RealIO.PowerOutput power "Actual power" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 90, origin = {0, 120})));
      equation
        q_out.p = q_in.p;
        power = q_in.p * volumeFlowRate;
        annotation (
          Documentation(revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-25, -11}, {34, -70}}, lineColor = {0, 0, 0}, textString = "V'")}));
      end Power;

      model Sphygmomanometer "Systolic, diastolic and mean pressure measurement with latency of measurement time"
        extends Physiolibrary.Icons.PressureMeasure;
        extends Fluid.Interfaces.PartialAbsoluteSensor;
        parameter Physiolibrary.Types.Time MeasurementTime = 2 "Measurement time period";
        outer Modelica.Fluid.System system "System wide properties";
        Physiolibrary.Types.RealIO.PressureOutput diastolic "Diastolic pressure" annotation (
          Placement(transformation(extent = {{40, -60}, {80, -20}})));
        Types.RealIO.PressureOutput systolic "Systolic pressure" annotation (
          Placement(transformation(extent = {{40, 0}, {80, 40}})));
        Types.RealIO.PressureOutput mean "Mean pressure" annotation (
          Placement(transformation(extent = {{40, -30}, {80, 10}})));
      protected
        Boolean b;
        discrete Physiolibrary.Types.Time t0;
        discrete Physiolibrary.Types.Pressure systolicMeassured, diastolicMeassured, meanMeasured;
        Physiolibrary.Types.Pressure pressure, diastolicRunning, systolicRunning;
        Real pressureInt;
      equation
        diastolic = diastolicMeassured;
        systolic = systolicMeassured;
        mean = meanMeasured;
        der(diastolicRunning) = if pressure < diastolicRunning then min(0, der(pressure)) else 0;
        der(systolicRunning) = if pressure > systolicRunning then max(0, der(pressure)) else 0;
        der(pressureInt) = pressure;
        b = time - pre(t0) >= MeasurementTime;
        when {initial(), b} then
          t0 = time;
          diastolicMeassured = pre(diastolicRunning);
          systolicMeassured = pre(systolicRunning);
          meanMeasured = pre(pressureInt) / MeasurementTime;
          reinit(diastolicRunning, pressure);
          reinit(systolicRunning, pressure);
          reinit(pressureInt, 0);
        end when;
        pressure =port.p  - system.p_ambient;

        annotation (
          Documentation(revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"));
      end Sphygmomanometer;

      model VolumeFlowMeasure "Volumetric flow between ports"
        extends Physiolibrary.Fluid.Interfaces.OnePort;
        // extends Icons.FlowMeasure;
        extends Modelica.Icons.RoundSensor;
        Types.RealIO.VolumeFlowRateOutput volumeFlow "Actual volume flow rate"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,-60}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,120})));
        Physiolibrary.Types.VolumeFlowRate volumeInflowRate;
        Physiolibrary.Types.VolumeFlowRate volumeOutflowRate;
      protected
        Medium.ThermodynamicState state_inflow "state for medium inflowing through q_in";
        Medium.ThermodynamicState state_outflow "state for medium outflowing through q_out";
        Modelica.Units.SI.Density density_inflow;
        Modelica.Units.SI.Density density_outflow;
      equation
        q_out.p = q_in.p;
        volumeFlow = volumeFlowRate;
      // medium states
        state_inflow = Medium.setState_phX(q_in.p, inStream(q_in.h_outflow), inStream(q_in.Xi_outflow));
        state_outflow = Medium.setState_phX(q_out.p, inStream(q_out.h_outflow), inStream(q_out.Xi_outflow));
        density_inflow = Medium.density(state_inflow);
        density_outflow = Medium.density(state_outflow);
        volumeInflowRate = massFlowRate/density_inflow;
        volumeOutflowRate = massFlowRate/density_outflow;
        annotation (
          Documentation(revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-25, -11}, {34, -70}}, lineColor = {0, 0, 0}, textString = "V'")}));
      end VolumeFlowMeasure;

      model MassFractions "Ideal one port mass fraction sensor"
        extends Modelica.Icons.RoundSensor;
        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor;

        parameter String substanceName = "CO2" "Name of mass fraction";
        Physiolibrary.Types.RealIO.MassFractionOutput Xi "Mass fraction in port medium" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
      protected
        parameter Integer ind(fixed = false) "Index of species in vector of independent mass fractions";
        Medium.MassFraction XiVec[Medium.nS] "Mass fraction vector, needed because indexed argument for the operator inStream is not supported";
      initial algorithm
        ind := -1;
        for i in 1:Medium.nS loop
          if Modelica.Utilities.Strings.isEqual(Medium.substanceNames[i], substanceName) then
            ind := i;
          end if;
        end for;
        assert(ind > 0, "Mass fraction '" + substanceName + "' is not present in medium '" + Medium.mediumName + "'.\n" + "Check sensor parameter and medium model.");
      equation
        XiVec[1:Medium.nXi] = inStream(port.Xi_outflow);
        if Medium.reducedX then
          XiVec[Medium.nX] = 1 - sum(XiVec[1:Medium.nXi]);
        end if;
        Xi = XiVec[ind];
        annotation (
          defaultComponentName = "massFraction",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Line(points = {{0, -70}, {0, -100}}, color = {0, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33}), Text(extent = {{160, -30}, {60, -60}}, textString = "Xi"), Line(points = {{70, 0}, {100, 0}}, color = {0, 0, 127})}),
          Documentation(info = "<html>
        <p>
        This component monitors the mass fraction contained in the fluid passing its port.
        The sensor is ideal, i.e., it does not influence the fluid.
        </p>
        </html>", revisions = "<html>
        <ul>
        <li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
        </ul>
        </html>"));
      end MassFractions;

      model Concentration "Ideal one port concentration sensor"
        extends Modelica.Icons.RoundSensor;
        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor(redeclare
            replaceable package Medium =
              Physiolibrary.Media.Blood);

        Physiolibrary.Types.RealIO.ConcentrationOutput C "Concentration in port medium" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));

        replaceable function GetConcentration =
            Physiolibrary.Media.Blood.tO2
          constrainedby
            Medium.GetConcentration
          "Get concentration from medium state"
            annotation (choicesAllMatching=true);

      equation
        C = GetConcentration(Medium.setState_phX(port.p,inStream(port.h_outflow),inStream(port.Xi_outflow)));
        annotation (
          defaultComponentName = "massFraction",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Line(points = {{0, -70}, {0, -100}}, color = {0, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33}), Text(extent = {{160, -30}, {60, -60}},
                textString="C",
                textColor={0,0,0}),                                                                                                                                                                                                        Line(points = {{70, 0}, {100, 0}}, color = {0, 0, 127})}),
          Documentation(info = "<html>
        <p>
        This component monitors the mass fraction contained in the fluid passing its port.
        The sensor is ideal, i.e., it does not influence the fluid.
        </p>
        </html>", revisions = "<html>
        <ul>
        <li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
        </ul>
        </html>"));
      end Concentration;

      model MassConcentration "Ideal one port mass concentration sensor"
        extends Modelica.Icons.RoundSensor;
        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor(redeclare
            replaceable package Medium =
              Physiolibrary.Media.Blood);

        Physiolibrary.Types.RealIO.MassConcentrationOutput R "Mass concentration in port medium" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));

        replaceable function GetMassConcentration =
            Physiolibrary.Media.Blood.epinephrine
          constrainedby Medium.GetMassConcentration
          "Get mass concentration from medium state"
            annotation (choicesAllMatching=true);

      equation
        R = GetMassConcentration(Medium.setState_phX(port.p,inStream(port.h_outflow),inStream(port.Xi_outflow)));
        annotation (
          defaultComponentName = "massFraction",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Line(points = {{0, -70}, {0, -100}}, color = {0, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33}), Text(extent = {{160, -30}, {60, -60}},
                textString="R",
                textColor={0,0,0}),                                                                                                                                                                                                        Line(points = {{70, 0}, {100, 0}}, color = {0, 0, 127})}),
          Documentation(info = "<html>
        <p>
        This component monitors the mass fraction contained in the fluid passing its port.
        The sensor is ideal, i.e., it does not influence the fluid.
        </p>
        </html>", revisions = "<html>
        <ul>
        <li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
        </ul>
        </html>"));
      end MassConcentration;

      model Fraction "Ideal one port fraction sensor"
        extends Modelica.Icons.RoundSensor;
        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor(redeclare
            replaceable package Medium =
              Physiolibrary.Media.Blood);

        Physiolibrary.Types.RealIO.FractionOutput F "Fraction in port medium" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));

        replaceable function GetFraction =
            Physiolibrary.Media.Blood.hematocrit
          constrainedby Medium.GetFraction
          "Get fraction from medium state"
            annotation (choicesAllMatching=true);

      equation
        F = GetFraction(Medium.setState_phX(port.p,inStream(port.h_outflow),inStream(port.Xi_outflow)));
        annotation (
          defaultComponentName = "massFraction",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Line(points = {{0, -70}, {0, -100}}, color = {0, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33}), Text(extent = {{160, -30}, {60, -60}},
                textString="F",
                textColor={0,0,0}),                                                                                                                                                                                                        Line(points = {{70, 0}, {100, 0}}, color = {0, 0, 127})}),
          Documentation(info = "<html>
        <p>
        This component monitors the mass fraction contained in the fluid passing its port.
        The sensor is ideal, i.e., it does not influence the fluid.
        </p>
        </html>", revisions = "<html>
        <ul>
        <li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
        </ul>
        </html>"));
      end Fraction;

      model Activity "Ideal one port activity sensor"
        extends Modelica.Icons.RoundSensor;
        extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor(redeclare
            replaceable package Medium =
              Physiolibrary.Media.Blood);

        Modelica.Blocks.Interfaces.RealOutput A "Substance activity in port medium" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));

        replaceable function GetActivity =
            Physiolibrary.Media.Blood.insulin
          constrainedby Medium.GetActivity
          "Get substance activity from medium state"
            annotation (choicesAllMatching=true);

      equation
        A = GetActivity(Medium.setState_phX(port.p,inStream(port.h_outflow),inStream(port.Xi_outflow)));
        annotation (
          defaultComponentName = "massFraction",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Line(points = {{0, -70}, {0, -100}}, color = {0, 0, 127}), Text(extent = {{-150, 72}, {150, 112}}, textString = "%name", lineColor = {162, 29, 33}),                                                            Line(points = {{70, 0}, {100, 0}}, color = {0, 0, 127}),
                                                                                                                                                                                                        Text(extent = {{160, -30}, {60, -60}},
                textString="A",
                textColor={0,0,0})}),
          Documentation(info = "<html>
        <p>
        This component monitors the mass fraction contained in the fluid passing its port.
        The sensor is ideal, i.e., it does not influence the fluid.
        </p>
        </html>", revisions = "<html>
        <ul>
        <li>2011-12-14: Stefan Wischhusen: Initial Release.</li>
        </ul>
        </html>"));
      end Activity;
    end Sensors;

    package Sources
      extends Modelica.Icons.SourcesPackage;

      model MassInflowSource "Prescribed mass flow rate at port with unlimited mass"
        extends Physiolibrary.Fluid.Interfaces.ConditionalMassFlow;
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        Physiolibrary.Fluid.Interfaces.FluidPort_b q_out(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{86, -14}, {114, 14}})));

        parameter Modelica.Units.SI.SpecificEnthalpy h = Medium.specificEnthalpy(Medium.setState_pTX(pressure_start, temperature_start, x_mass_start)) "Fluid enthalphy";
      equation
        q_out.m_flow = -q;
        q_out.h_outflow = h;
        q_out.Xi_outflow = x_mass_start[1:Medium.nXi];
        q_out.C_outflow = C_start;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, -94}, {150, -54}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
        <table>
        <tr>
        <td>Author:</td>
        <td>Marek Matejak</td>
        </tr>
        <tr>
        <td>By:</td>
        <td>marek@matfyz.cz</td>
        </tr>
        <tr>
        <td>Date of:</td>
        <td>january 2009-2018</td>
        </tr>
        </table>
        </html>", info = "<html>
        <p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
        </html>"));
      end MassInflowSource;

      model VolumeInflowSource "Prescribed volume flow rate at port with unlimited mass"
        extends Physiolibrary.Fluid.Interfaces.ConditionalVolumeFlow;
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        Physiolibrary.Fluid.Interfaces.FluidPort_b q_out(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{86, -14}, {114, 14}})));

      //protected
        parameter Modelica.Units.SI.SpecificEnthalpy h = Medium.specificEnthalpy_pTX(pressure_start, temperature_start, x_mass_start) "Fluid enthalphy";
        Modelica.Units.SI.Density density;
      equation
        q_out.m_flow = -q * density;
        q_out.h_outflow = h;
        q_out.Xi_outflow = x_mass_start[1:Medium.nXi];
        q_out.C_outflow = C_start;
        density = Medium.density(Medium.setState_phX(q_out.p, inStream(q_out.h_outflow), inStream(q_out.Xi_outflow)));
      // medium density
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, -94}, {150, -54}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
        <table>
        <tr>
        <td>Author:</td>
        <td>Marek Matejak</td>
        </tr>
        <tr>
        <td>By:</td>
        <td>marek@matfyz.cz</td>
        </tr>
        <tr>
        <td>Date of:</td>
        <td>january 2009-2018</td>
        </tr>
        </table>
        </html>", info = "<html>
        <p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
        </html>"));
      end VolumeInflowSource;

      model PressureSource "Prescribed pressure at port with unlimited mass"
        parameter Modelica.Units.SI.Pressure pressure_start = system.p_ambient "Initial pressure" annotation (
          Dialog(enable = not usePressureInput, group = "Initialization"));
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        parameter Boolean usePressureInput = false "=true, if pressure input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));

        Physiolibrary.Types.RealIO.PressureInput pressure(start = pressure_start) = p if usePressureInput "Pressure" annotation (
          Placement(transformation(extent = {{-120, -20}, {-80, 20}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_a y(redeclare package Medium = Medium) "PressureFlow output connectors" annotation (
          Placement(transformation(extent = {{84, -16}, {116, 16}})));

      protected
        Physiolibrary.Types.Pressure p;
        Modelica.Units.SI.SpecificEnthalpy h = Medium.specificEnthalpy_pTX(p, temperature_start, x_mass_start) "Fluid enthalphy";
      equation
        if not usePressureInput then
          p = pressure_start;
        end if;
        y.p = p;
        y.h_outflow = h;
        y.Xi_outflow = x_mass_start[1:Medium.nXi];
        y.C_outflow = C_start;
        annotation (
          Documentation(info = "<html>
        <p>Model has a vector of continuous Real input signals as pressures for vector of pressure-flow connectors. </p>
        <p>Usage in tests: Set defaul volume&gt;0 and try to set STEADY in instances to &quot;false&quot;!</p>
        </html>", revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {170, 255, 255}, fillPattern = FillPattern.Backward), Text(extent = {{0, 0}, {-100, -100}}, lineColor = {0, 0, 0}, textString = "P"), Line(points = {{-100, 0}, {56, 0}}, color = {191, 0, 0}, thickness = 0.5), Polygon(points = {{38, -20}, {38, 20}, {78, 0}, {38, -20}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 150}, {150, 110}}, textString = "%name", lineColor = {0, 0, 255})}));
      end PressureSource;

      model MassOutflowSource "Prescribed flow at port with unlimited mass storage"
        extends Physiolibrary.Fluid.Interfaces.ConditionalMassFlow;
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        Physiolibrary.Fluid.Interfaces.FluidPort_a q_in(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{-114, -14}, {-86, 14}}), iconTransformation(extent = {{-114, -14}, {-86, 14}})));
        parameter Modelica.Units.SI.SpecificEnthalpy h = Medium.specificEnthalpy(Medium.setState_pTX(pressure_start, temperature_start, x_mass_start)) "Fluid enthalphy";
      equation
        q_in.m_flow = q;
        q_in.h_outflow = h;
        q_in.Xi_outflow = x_mass_start[1:Medium.nXi];
        q_in.C_outflow = C_start;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, -94}, {150, -54}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
        <table>
        <tr>
        <td>Author:</td>
        <td>Marek Matejak</td>
        </tr>
        <tr>
        <td>By:</td>
        <td>marek@matfyz.cz</td>
        </tr>
        <tr>
        <td>Date of:</td>
        <td>january 2009-2018</td>
        </tr>
        </table>
        </html>", info = "<html>
        <p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
        </html>"));
      end MassOutflowSource;

      model VolumeOutflowSource "Prescribed flow at port with unlimited mass storage"
        extends Physiolibrary.Fluid.Interfaces.ConditionalVolumeFlow;
        extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

        Physiolibrary.Fluid.Interfaces.FluidPort_a q_in(redeclare package Medium = Medium) annotation (
          Placement(transformation(extent = {{-114, -14}, {-86, 14}}), iconTransformation(extent = {{-114, -14}, {-86, 14}})));

        parameter Modelica.Units.SI.SpecificEnthalpy h = Medium.specificEnthalpy(Medium.setState_pTX(pressure_start, temperature_start, x_mass_start)) "Fluid enthalphy";
        Modelica.Units.SI.Density density;
      equation
        q_in.m_flow = q * density;
        q_in.h_outflow = h;
        q_in.Xi_outflow = x_mass_start[1:Medium.nXi];
        q_in.C_outflow = C_start;
        // medium density
        density = Medium.density(Medium.setState_phX(q_in.p, inStream(q_in.h_outflow), inStream(q_in.Xi_outflow)));

        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, -94}, {150, -54}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
        <table>
        <tr>
        <td>Author:</td>
        <td>Marek Matejak</td>
        </tr>
        <tr>
        <td>By:</td>
        <td>marek@matfyz.cz</td>
        </tr>
        <tr>
        <td>Date of:</td>
        <td>january 2009-2018</td>
        </tr>
        </table>
        </html>", info = "<html>
        <p><font style=\"font-size: 9pt; \">This element needs to be connected only to next hydraulic elements, which contain calculation of hydraulic pressure in connector. It is because equation contains only </font><b><font style=\"font-size: 9pt; \">hydraulic volume flow</font></b><font style=\"font-size: 9pt; \"> variable, which is set to value of input signal variable. </font></p>
        </html>"));
      end VolumeOutflowSource;
    end Sources;

    package Examples "Examples that demonstrate usage of the Pressure flow components"
      extends Modelica.Icons.ExamplesPackage;

      model MinimalCirculation "Minimal circulation models driven by cardiac output"
        extends Modelica.Icons.Example;
        Physiolibrary.Fluid.Components.MassPump heart(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{-20, 60}, {0, 80}})));
        Physiolibrary.Fluid.Components.ElasticVessel arteries(volume_start(displayUnit = "l") = 0.001, nPorts = 3, Compliance(displayUnit = "ml/mmHg") = 1.1625954425608e-08, ZeroPressureVolume(displayUnit = "ml") = 0.00085) annotation (
          Placement(transformation(extent={{56,40},{80,62}})));
        Physiolibrary.Fluid.Components.ElasticVessel veins(volume_start(displayUnit = "l") = 0.0032, nPorts = 2, ZeroPressureVolume(displayUnit = "ml") = 0.00295, Compliance(displayUnit = "ml/mmHg") = 6.1880080007267e-07) annotation (
          Placement(transformation(extent = {{-58, 40}, {-38, 60}})));
        Modelica.Blocks.Sources.Pulse pulse(width = 25, period = 60 / 75, amplitude = 3.3e-1) annotation (
          Placement(transformation(extent = {{-94, 74}, {-74, 94}})));
        Sensors.PressureMeasure pressureMeasure annotation (
          Placement(transformation(extent = {{82, 68}, {102, 88}})));
        Sensors.FlowMeasure flowMeasure annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {22, 32})));
        Components.Conductor resistance(Conductance = 6.2755151845753e-09) annotation (
          Placement(transformation(extent = {{-18, 22}, {2, 42}})));
      equation
        connect(pulse.y, heart.solutionFlow) annotation (
          Line(points = {{-73, 84}, {-10, 84}, {-10, 77}}, color = {0, 0, 127}));
        connect(veins.q_in[1], heart.q_in) annotation (
          Line(points={{-48.1,49.35},{-46,49.35},{-46,70},{-20,70}},        color = {127, 0, 0}, thickness = 0.5));
        connect(pressureMeasure.port, arteries.q_in[1]) annotation (
          Line(points={{92,68},{92,50.0467},{67.88,50.0467}},        color = {127, 0, 0}, thickness = 0.5));
        connect(resistance.q_in, veins.q_in[2]) annotation (
          Line(points={{-18,32},{-32,32},{-32,50.65},{-48.1,50.65}},        color = {127, 0, 0}, thickness = 0.5));
        connect(heart.q_out, arteries.q_in[2]) annotation (
          Line(points={{0,70},{67.88,70},{67.88,51}},        color = {127, 0, 0}, thickness = 0.5));
        connect(resistance.q_out, flowMeasure.q_out) annotation (
          Line(points = {{2, 32}, {12, 32}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_in, arteries.q_in[3]) annotation (
          Line(points={{32,32},{38,32},{38,51.9533},{67.88,51.9533}},          color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-54, 98}, {66, 88}}, lineColor = {175, 175, 175}, textString = "Minimal circulation driven by cardiac output")}),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"),
          experiment(StopTime = 10));
      end MinimalCirculation;

      model Windkessel_2element "Two-element Windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Fluid.Components.ElasticVessel arteries(ZeroPressureVolume(displayUnit = "ml") = 0.00085, volume_start(displayUnit = "l") = 0.97e-3, nPorts = 3, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-08) annotation (
          Placement(transformation(extent = {{-12, 38}, {8, 58}})));
        Physiolibrary.Fluid.Components.Conductor resistance(Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {18, 34})));
        Utilities.Pulses pulses(QP(displayUnit = "kg/s") = 0.424, HR = 1.2) annotation (
          Placement(transformation(extent = {{-80, 58}, {-60, 78}})));
        Sources.MassInflowSource unlimitedPump(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{-48, 38}, {-28, 58}})));
        Sources.PressureSource unlimitedVolume annotation (
          Placement(transformation(extent = {{-56, 0}, {-36, 20}})));
        Sensors.PressureMeasure pressureMeasure annotation (
          Placement(transformation(extent = {{50, 56}, {70, 76}})));
        Sensors.FlowMeasure flowMeasure annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-2, 10})));
      equation
        connect(arteries.q_in[1], resistance.q_in) annotation (
          Line(points={{-2.1,47.1333},{18,47.1333},{18,44}},        color = {127, 0, 0}, thickness = 0.5));
        connect(pulses.massflowrate, unlimitedPump.solutionFlow) annotation (
          Line(points = {{-61, 68}, {-38, 68}, {-38, 55}}, color = {0, 0, 127}));
        connect(unlimitedPump.q_out, arteries.q_in[2]) annotation (
          Line(points = {{-28, 48}, {-16, 48}, {-16, 48}, {-2.1, 48}}, color = {127, 0, 0}, thickness = 0.5));
        connect(arteries.q_in[3],pressureMeasure.port)  annotation (
          Line(points={{-2.1,48.8667},{-2,48.8667},{-2,56},{60,56}},          color = {127, 0, 0}, thickness = 0.5));
        connect(resistance.q_out, flowMeasure.q_in) annotation (
          Line(points = {{18, 24}, {18, 10}, {8, 10}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, unlimitedVolume.y) annotation (
          Line(points = {{-12, 10}, {-36, 10}}, color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(lineColor = {175, 175, 175}, extent = {{-74, 90}, {46, 80}}, textString = "2-element Windkessel model")}),
          Documentation(revisions = "<html>
	<ul>
	<li><i>Sep 2014</i> by Tomas Kulhanek:
	<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
	</li>
	<li><i>May 2014 </i> by Marek Matejak:
	<br/>Created.
	</li>
	</ul>
	</html>", info = "<html>
	<p>Two-element windkessel model consisting of resistance and compliance element.</p>
	<ul>
	<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
	<li>Westerhof, N., Lankhaar, J.-W., &amp; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &amp; Biological Engineering &amp; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
	<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
	</ul>
	</html>"),
          experiment(StopTime = 5));
      end Windkessel_2element;

      model Windkessel_3element "Three-element windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Fluid.Sources.MassInflowSource heart(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
        Physiolibrary.Fluid.Components.ElasticVessel arteries(ZeroPressureVolume(displayUnit = "l") = 0.00085, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-08, volume_start(displayUnit = "l") = 0.97e-3, nPorts = 3) annotation (
          Placement(transformation(extent = {{16, 38}, {36, 58}})));
        Physiolibrary.Fluid.Components.Conductor resistance(Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {50, 34})));
        Physiolibrary.Fluid.Sources.PressureSource veins annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, origin = {-40, 20})));
        Utilities.Pulses pulses(QP(displayUnit = "kg/s") = 0.424, TD1(displayUnit = "s"), HR(displayUnit = "1/min") = 1.2) annotation (
          Placement(transformation(extent = {{-64, 58}, {-44, 78}})));
        Physiolibrary.Fluid.Components.Conductor impedance(Conductance(displayUnit = "ml/(mmHg.s)") = 1.5001231516913e-06) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, origin = {-6, 50})));
        Sensors.PressureMeasure pressureMeasure annotation (
          Placement(transformation(extent = {{58, 66}, {78, 86}})));
        Sensors.FlowMeasure flowMeasure annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {12, 20})));
      equation
        connect(pulses.massflowrate, heart.solutionFlow) annotation (
          Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}));
        connect(heart.q_out, impedance.q_in) annotation (
          Line(points = {{-30, 48}, {-24, 48}, {-24, 50}, {-16, 50}}, thickness = 1));
        connect(impedance.q_out, arteries.q_in[1]) annotation (
          Line(points={{4,50},{16,50},{16,47.1333},{25.9,47.1333}},          color = {127, 0, 0}, thickness = 0.5));
        connect(arteries.q_in[2], resistance.q_in) annotation (
          Line(points = {{25.9, 48}, {50, 48}, {50, 44}}, color = {127, 0, 0}, thickness = 0.5));
        connect(resistance.q_out, flowMeasure.q_in) annotation (
          Line(points = {{50, 24}, {50, 20}, {22, 20}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, veins.y) annotation (
          Line(points = {{2, 20}, {-30, 20}}, color = {127, 0, 0}, thickness = 0.5));
        connect(pressureMeasure.port, arteries.q_in[3]) annotation (
          Line(points={{64,70},{26,70},{26,48.8667},{25.9,48.8667}},          color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "3-element Windkessel model")}),
          Documentation(revisions = "<html>
	<ul>
	<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
	</ul>
	<p> </p>
	</html>", info = "<html>
	<p>Three-element windkessel model, updated two-element windkessel model with an impedance element. Impedance can be approximated by resistance.</p>
	<ul>
	<li>Westerhof N, Elzinga G (1991) Normalized input impedance and arterial decay time over heart period are independent of animal size. Am J Physiol 261:R126&ndash;R133</li>
	<li>Westerhof, N., Lankhaar, J.-W., &amp; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &amp; Biological Engineering &amp; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
	</ul>
	</html>"),
          experiment(StopTime = 5));
      end Windkessel_3element;

      model Windkessel_4element "Four-element windkessel model"
        extends Modelica.Icons.Example;
        Physiolibrary.Fluid.Sources.MassInflowSource heart(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
        Physiolibrary.Fluid.Components.ElasticVessel arteries(volume_start(displayUnit = "l") = 0.97e-3, nPorts = 4, ZeroPressureVolume(displayUnit = "ml") = 0.00085, Compliance(displayUnit = "ml/mmHg") = 1.0500862061839e-8) annotation (
          Placement(transformation(extent = {{16, 38}, {36, 58}})));
        Physiolibrary.Fluid.Components.Conductor resistance(Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {48, 34})));
        Physiolibrary.Fluid.Sources.PressureSource veins annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, origin = {-40, 20})));
        Utilities.Pulses pulses(QP(displayUnit = "kg/s") = 0.424, HR = 1.2) annotation (
          Placement(transformation(extent = {{-64, 58}, {-44, 78}})));
        Physiolibrary.Fluid.Components.Conductor impedance(Conductance(displayUnit = "ml/(mmHg.s)") = 1.5001231516913e-06) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, origin = {-6, 48})));
        Physiolibrary.Fluid.Components.Inertia inertia(I(displayUnit = "mmHg.s2/g") = 666.611937075, massFlow_start(displayUnit = "kg/min") = 0.083333333333333) annotation (
          Placement(transformation(extent = {{-16, 56}, {4, 76}})));
        Sensors.PressureMeasure pressureMeasure annotation (
          Placement(transformation(extent = {{62, 64}, {82, 84}})));
        Sensors.FlowMeasure flowMeasure annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {14, 20})));
      equation
        connect(pulses.massflowrate, heart.solutionFlow) annotation (
          Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}));
        connect(heart.q_out, impedance.q_in) annotation (
          Line(points = {{-30, 48}, {-16, 48}}, thickness = 1));
        connect(heart.q_out, inertia.q_in) annotation (
          Line(points = {{-30, 48}, {-26, 48}, {-26, 66}, {-16, 66}}, thickness = 1));
        connect(inertia.q_out, arteries.q_in[1]) annotation (
          Line(points={{4,66},{16,66},{16,47.025},{25.9,47.025}},        color = {127, 0, 0}, thickness = 0.5));
        connect(impedance.q_out, arteries.q_in[2]) annotation (
          Line(points={{4,48},{16,48},{16,47.675},{25.9,47.675}},        color = {127, 0, 0}, thickness = 0.5));
        connect(arteries.q_in[3], resistance.q_in) annotation (
          Line(points={{25.9,48.325},{48,48.325},{48,44}},      color = {127, 0, 0}, thickness = 0.5));
        connect(pressureMeasure.port, arteries.q_in[4]) annotation (
          Line(points={{68,68},{25.9,68},{25.9,48.975}},       color = {127, 0, 0}, thickness = 0.5));
        connect(resistance.q_out, flowMeasure.q_in) annotation (
          Line(points = {{48, 24}, {48, 20}, {24, 20}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, veins.y) annotation (
          Line(points = {{4, 20}, {-30, 20}}, color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "4-element Windkessel model")}),
          Documentation(revisions = "<html>
	<ul>
	<li><i>Sep 2014</i> by Tomas Kulhanek: <br>Created. </li>
	</ul>
	</html>", info = "<html>
	<p>Four-element windkessel model, updated three-element windkessel model with an inertia element. </p>
	<ul>
	<li>Stergiopulos N, Westerhof BE, Westerhof N (1999) Total arterial inertance as the fourth element of the windkessel model. Am J Physiol 276:H81&ndash;H88</li>
	<li>Westerhof, N., Lankhaar, J.-W., &amp; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &amp; Biological Engineering &amp; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
	</ul>
	</html>"),
          experiment(StopTime = 5));
      end Windkessel_4element;

      model CardiovascularSystem_GCG "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
        extends Modelica.Icons.Example;
        import Hydraulic = Physiolibrary.Fluid;
        Hydraulic.Components.ElasticVessel pulmonaryVeinsAndLeftAtrium(volume_start = 0.4e-3, nPorts = 3, ZeroPressureVolume(displayUnit = "ml") = 0.0004, Compliance(displayUnit = "ml/mmHg") = 7.5006157584566e-8) annotation (
          Placement(transformation(extent = {{4, 74}, {24, 94}})));
        Hydraulic.Components.ElasticVessel pulmonaryArteries(volume_start = 0.38e-3, nPorts = 2, ZeroPressureVolume(displayUnit = "ml") = 0.00030625, Compliance(displayUnit = "ml/mmHg") = 3.6002955640592e-8) annotation (
          Placement(transformation(extent = {{-62, 74}, {-42, 94}})));
        Hydraulic.Components.Conductor pulmonary(Conductance(displayUnit = "l/(mmHg.min)") = 4.1665920538226e-08) annotation (
          Placement(transformation(extent = {{-30, 74}, {-10, 94}})));
        Hydraulic.Components.ElasticVessel arteries(volume_start = 0.85e-3, nPorts = 5, ZeroPressureVolume(displayUnit = "ml") = 0.000495, Compliance(displayUnit = "ml/mmHg") = 2.6627185942521e-8) annotation (
          Placement(transformation(extent = {{14, -46}, {34, -26}})));
        Hydraulic.Components.ElasticVessel veins(volume_start = 3.25e-3, nPorts = 4, ZeroPressureVolume(displayUnit = "ml") = 0.00295, Compliance(displayUnit = "ml/mmHg") = 6.1880080007267e-7) annotation (
          Placement(transformation(extent = {{-64, -46}, {-44, -26}})));
        Hydraulic.Components.Conductor nonMuscle(Conductance(displayUnit = "l/(mmHg.min)") = 3.5627924852669e-09) annotation (
          Placement(transformation(extent = {{-24, -46}, {-4, -26}})));
        Hydraulic.Sensors.PressureMeasure pressureMeasure annotation (
          Placement(transformation(extent = {{-78, 26}, {-58, 46}})));
        Hydraulic.Components.MassPump rightHeart(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{-56, 8}, {-36, 28}})));
        Physiolibrary.Types.Constants.MassFlowRateConst RNormalCO(k(displayUnit = "kg/min") = 0.083333333333333) annotation (
          Placement(transformation(extent = {{-60, 40}, {-52, 48}})));
        Hydraulic.Sensors.PressureMeasure pressureMeasure1 annotation (
          Placement(transformation(extent = {{-8, 26}, {12, 46}})));
        Hydraulic.Components.MassPump leftHeart(useSolutionFlowInput = true) annotation (
          Placement(transformation(extent = {{16, 6}, {36, 26}})));
        Physiolibrary.Types.Constants.MassFlowRateConst LNormalCO(k(displayUnit = "kg/min") = 0.083333333333333) annotation (
          Placement(transformation(extent = {{12, 42}, {20, 50}})));
        Hydraulic.Components.Conductor kidney(Conductance(displayUnit = "l/(mmHg.min)") = 1.4126159678427e-09) annotation (
          Placement(transformation(extent = {{-24, -64}, {-4, -44}})));
        Hydraulic.Components.Conductor muscle(Conductance(displayUnit = "l/(mmHg.min)") = 1.3001067314658e-09) annotation (
          Placement(transformation(extent = {{-24, -28}, {-4, -8}})));
        Hydraulic.Components.Conductor largeVeins(Conductance(displayUnit = "l/(mmHg.min)") = 1.6888886482791e-07) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-84, -8})));
        Hydraulic.Components.ElasticVessel rightAtrium(volume_start = 0.1e-3, nPorts = 3, ZeroPressureVolume(displayUnit = "ml") = 0.0001, Compliance(displayUnit = "ml/mmHg") = 3.7503078792283e-8) annotation (
          Placement(transformation(extent = {{-82, 8}, {-62, 28}})));
        Physiolibrary.Blocks.Factors.Spline rightStarling(data = {{-6, 0, 0}, {-3, 0.15, 0.104}, {-1, 0.52, 0.48}, {2, 1.96, 0.48}, {4, 2.42, 0.123}, {8, 2.7, 0}}, Xscale = 101325 / 760) "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)." annotation (
          Placement(transformation(extent = {{-56, 22}, {-36, 42}})));
        Physiolibrary.Blocks.Factors.Spline leftStarling(data = {{-4, 0, 0}, {-1, 0.72, 0.29}, {0, 1.01, 0.29}, {3, 1.88, 0.218333}, {10, 2.7, 0}}, Xscale = 101325 / 760) "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)." annotation (
          Placement(transformation(extent = {{16, 22}, {36, 42}})));
        inner Modelica.Fluid.System system annotation (
          Placement(transformation(extent = {{68, 62}, {88, 82}})));
        Hydraulic.Sensors.PressureMeasure MeanArterialPressure "MAP" annotation (
          Placement(transformation(extent = {{74, -34}, {94, -14}})));
      equation
        connect(RNormalCO.y, rightStarling.yBase) annotation (
          Line(points = {{-51, 44}, {-46, 44}, {-46, 34}}, color = {0, 0, 127}));
        connect(LNormalCO.y, leftStarling.yBase) annotation (
          Line(points = {{21, 46}, {26, 46}, {26, 34}}, color = {0, 0, 127}));
        connect(rightHeart.solutionFlow, rightStarling.y) annotation (
          Line(points = {{-46, 25}, {-46, 28}, {-46, 28}}, color = {0, 0, 127}));
        connect(leftStarling.y, leftHeart.solutionFlow) annotation (
          Line(points = {{26, 28}, {26, 23}}, color = {0, 0, 127}));
        connect(pressureMeasure.pressure, rightStarling.u) annotation (
          Line(points = {{-62, 32}, {-54, 32}}, color = {0, 0, 127}));
        connect(pressureMeasure1.pressure, leftStarling.u) annotation (
          Line(points = {{8, 32}, {18, 32}}, color = {0, 0, 127}));
        connect(rightHeart.q_out, pulmonaryArteries.q_in[1]) annotation (
          Line(points={{-36,18},{-30,18},{-30,60},{-82,60},{-82,83.35},{-52.1,
              83.35}},                                                                            color = {127, 0, 0}, thickness = 0.5));
        connect(pulmonary.q_in, pulmonaryArteries.q_in[2]) annotation (
          Line(points={{-30,84},{-42,84},{-42,84.65},{-52.1,84.65}},        color = {127, 0, 0}, thickness = 0.5));
        connect(pulmonary.q_out, pulmonaryVeinsAndLeftAtrium.q_in[1]) annotation (
          Line(points={{-10,84},{2,84},{2,83.1333},{13.9,83.1333}},          color = {127, 0, 0}, thickness = 0.5));
        connect(pulmonaryVeinsAndLeftAtrium.q_in[2], leftHeart.q_in) annotation (
          Line(points = {{13.9, 84}, {36, 84}, {36, 60}, {-12, 60}, {-12, 16}, {16, 16}}, color = {127, 0, 0}, thickness = 0.5));
        connect(pressureMeasure1.port, pulmonaryVeinsAndLeftAtrium.q_in[3]) annotation (
          Line(points={{-2,30},{-12,30},{-12,60},{36,60},{36,84},{13.9,84},{
              13.9,84.8667}},                                                                              color = {127, 0, 0}, thickness = 0.5));
        connect(leftHeart.q_out, arteries.q_in[1]) annotation (
          Line(points={{36,16},{54,16},{54,-37.04},{23.9,-37.04}},          color = {127, 0, 0}, thickness = 0.5));
        connect(muscle.q_out, arteries.q_in[2]) annotation (
          Line(points={{-4,-18},{10,-18},{10,-36.52},{23.9,-36.52}},          color = {127, 0, 0}, thickness = 0.5));
        connect(nonMuscle.q_out, arteries.q_in[3]) annotation (
          Line(points = {{-4, -36}, {10, -36}, {10, -36}, {23.9, -36}}, color = {127, 0, 0}, thickness = 0.5));
        connect(kidney.q_out, arteries.q_in[4]) annotation (
          Line(points={{-4,-54},{10,-54},{10,-35.48},{23.9,-35.48}},          color = {127, 0, 0}, thickness = 0.5));
        connect(muscle.q_in, veins.q_in[1]) annotation (
          Line(points={{-24,-18},{-40,-18},{-40,-36.975},{-54.1,-36.975}},        color = {127, 0, 0}, thickness = 0.5));
        connect(nonMuscle.q_in, veins.q_in[2]) annotation (
          Line(points={{-24,-36},{-40,-36},{-40,-36.325},{-54.1,-36.325}},        color = {127, 0, 0}, thickness = 0.5));
        connect(kidney.q_in, veins.q_in[3]) annotation (
          Line(points={{-24,-54},{-38,-54},{-38,-35.675},{-54.1,-35.675}},        color = {127, 0, 0}, thickness = 0.5));
        connect(veins.q_in[4], largeVeins.q_out) annotation (
          Line(points={{-54.1,-35.025},{-84,-35.025},{-84,-18}},      color = {127, 0, 0}, thickness = 0.5));
        connect(largeVeins.q_in, rightAtrium.q_in[1]) annotation (
          Line(points={{-84,2},{-86,2},{-86,17.1333},{-72.1,17.1333}},          color = {127, 0, 0}, thickness = 0.5));
        connect(rightAtrium.q_in[2], rightHeart.q_in) annotation (
          Line(points = {{-72.1, 18}, {-64, 18}, {-64, 18}, {-56, 18}}, color = {127, 0, 0}, thickness = 0.5));
        connect(rightAtrium.q_in[3],pressureMeasure.port)  annotation (
          Line(points={{-72.1,18.8667},{-72,18.8667},{-72,30}},        color = {127, 0, 0}, thickness = 0.5));
        connect(arteries.q_in[5],MeanArterialPressure.port)  annotation (
          Line(points={{23.9,-34.96},{80,-34.96},{80,-30}},        color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-82, -80}, {80, -100}}, lineColor = {175, 175, 175}, textString = "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
          Documentation(info = "<html>
	<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
	<p><br/>Model, all parameters and all initial values are from article: </p>
	<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
	</html>", revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"),
          experiment(StopTime = 300));
      end CardiovascularSystem_GCG;

      package Utilities "Utility components used by package Examples"
        extends Modelica.Icons.UtilitiesPackage;

        model Pulses "example pulse flow generator"
          import Physiolibrary.Types.*;
          Physiolibrary.Types.RealIO.MassFlowRateOutput massflowrate annotation (
            Placement(transformation(extent = {{80, -10}, {100, 10}}), iconTransformation(extent = {{80, -10}, {100, 10}})));
          discrete Time T0 "beginning of cardiac cycle";
          Boolean b(start = false);
          discrete Time HP "duration of cardiac cycle";
          parameter Frequency HR = 1.2;
          Time tc "relative time in carciac cycle";
          parameter Time TD1 = 0.07 "relative time of start of systole";
          discrete Time TD2 "relative time of end of systole";
          parameter MassFlowRate QP = 0.424 "peak mass flowrate";
        initial equation
          T0 = 0 "set beginning of cardiac cycle";
          HP = 1 / HR "update length of carciac cycle";
          TD2 = TD1 + 2 / 5 / HR "compute end time of systole";
        equation
          b = time - pre(T0) >= pre(HP) "true if new cardiac cycle begins";
          when {b} then
            T0 = time "set beginning of cardiac cycle";
            HP = 1 / HR "update length of carciac cycle";
            TD2 = TD1 + 2 / 5 * HP "compute end time of systole";
          end when;
          tc = time - T0 "relative time in carciac cycle";
          massflowrate = if tc < TD1 then 0 else if tc < TD2 then sin((tc - TD1) / (TD2 - TD1) * Modelica.Constants.pi) * QP else 0 "zero before and after systole, otherwise sin up to peak flow";
          annotation (
            Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-80, 80}, {80, -80}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid), Line(points = {{-70, 0}, {-50, 0}, {-48, 2}, {-42, 52}, {-36, 60}, {-28, 52}, {-24, 2}, {-20, 0}, {14, 0}, {18, 2}, {24, 48}, {24, 54}, {32, 58}, {40, 50}, {44, 2}, {50, 0}, {74, 0}}, color = {0, 0, 255}, smooth = Smooth.Bezier), Text(extent = {{-80, 108}, {80, 88}}, lineColor = {0, 0, 255}, textString = "%name"), Text(extent = {{-80, -92}, {78, -112}}, lineColor = {0, 0, 255}, textString = "rate=%HR")}));
        end Pulses;
      end Utilities;

      package Kofranek2014 "models of cardiovascular system used in www.physiome.cz/atlas"
        extends Modelica.Icons.ExamplesPackage;

        model NonPulsatileCirculation
          extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Fluid.Components.ElasticVessel PulmonaryArteries(useV0Input = true, useComplianceInput = true, nPorts = 2, volume_start = 0.373e-3) annotation (
            Placement(transformation(extent = {{-40, 28}, {-20, 48}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CAP(k = 2.2576853432954e-08) annotation (
            Placement(transformation(extent = {{-50, 56}, {-36, 70}})));
          Physiolibrary.Types.Constants.VolumeConst V0AP(k = 0.000327) annotation (
            Placement(transformation(extent = {{-66, 44}, {-52, 58}})));
          Components.Resistor TotalPulmonaryResistance(useResistanceInput = true) annotation (
            Placement(transformation(extent = {{-2, 28}, {18, 48}})));
          Types.Constants.HydraulicResistanceConst RP(k(displayUnit = "(mmHg.s)/l") = 9332567.11905) annotation (
            Placement(transformation(extent = {{-12, 60}, {0, 70}})));
          Physiolibrary.Fluid.Components.ElasticVessel PulmonaryVeins(useV0Input = true, useComplianceInput = true, volume_start = 0.704e-3, nPorts = 2) annotation (
            Placement(transformation(extent = {{42, 28}, {62, 48}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CVP(k = 2.250184727537e-7) annotation (
            Placement(transformation(extent = {{36, 60}, {50, 74}})));
          Physiolibrary.Types.Constants.VolumeConst V0VP(k = 0.000435) annotation (
            Placement(transformation(extent = {{20, 48}, {34, 62}})));
          Physiolibrary.Fluid.Components.ElasticVessel SystemicVeins(useV0Input = true, useComplianceInput = true, volume_start = 3.922e-3, nPorts = 2) annotation (
            Placement(transformation(extent = {{-46, -70}, {-26, -50}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CVS(k = 1.5001231516913e-6) annotation (
            Placement(transformation(extent = {{-52, -42}, {-38, -28}})));
          Physiolibrary.Types.Constants.VolumeConst V0VS(k = 0.002845) annotation (
            Placement(transformation(extent = {{-74, -54}, {-60, -40}})));
          Components.Resistor TotalSystemicResistance(useResistanceInput = true) annotation (
            Placement(transformation(extent = {{16, -70}, {-4, -50}})));
          Types.Constants.HydraulicResistanceConst RT(k(displayUnit = "(mmHg.s)/l") = 133322387.415) annotation (
            Placement(transformation(extent = {{-14, -50}, {-4, -40}})));
          Physiolibrary.Fluid.Components.ElasticVessel SystemicArteries(useV0Input = true, useComplianceInput = true, nPorts = 3, volume_start = 0.672e-3) annotation (
            Placement(transformation(extent = {{36, -70}, {56, -50}})));
          Physiolibrary.Types.Constants.HydraulicComplianceConst CAS(k = 1.1250923637685e-08) annotation (
            Placement(transformation(extent = {{30, -38}, {44, -24}})));
          Physiolibrary.Types.Constants.VolumeConst V0AS(k = 0.000529) annotation (
            Placement(transformation(extent = {{14, -50}, {28, -36}})));
          replaceable Parts.HeartPump rightHeart(StarlingSlope(displayUnit = "ml/(mmHg.s)") = 1.2503526469347e-07) constrainedby
            Parts.HeartInterface                                                                                                                      annotation (
             Placement(transformation(extent = {{-72, -10}, {-48, 16}})));
          replaceable Parts.HeartPump leftHeart(StarlingSlope(displayUnit = "ml/(mmHg.s)") = 7.5006157584566e-08) constrainedby
            Parts.HeartInterface                                                                                                                     annotation (
             Placement(transformation(extent = {{74, -10}, {52, 10}})));
          inner Modelica.Fluid.System system(p_ambient(displayUnit = "mmHg") = 101325.0144354) annotation (
            Placement(transformation(extent = {{-94, 70}, {-74, 90}})));
          Sensors.PressureMeasure pressureMeasure annotation (
            Placement(transformation(extent = {{68, -66}, {88, -46}})));
        equation
          connect(CAP.y, PulmonaryArteries.compliance) annotation (
            Line(points={{-34.25,63},{-30,63},{-30,47}},        color = {0, 0, 127}));
          connect(V0AP.y, PulmonaryArteries.zeroPressureVolume) annotation (
            Line(points={{-50.25,51},{-50.25,50.5},{-37,50.5},{-37,47}},          color = {0, 0, 127}));
          connect(CVP.y, PulmonaryVeins.compliance) annotation (
            Line(points={{51.75,67},{52,67},{52,47}},        color = {0, 0, 127}));
          connect(CVS.y, SystemicVeins.compliance) annotation (
            Line(points={{-36.25,-35},{-36,-35},{-36,-51}},        color = {0, 0, 127}));
          connect(CAS.y, SystemicArteries.compliance) annotation (
            Line(points={{45.75,-31},{46,-31},{46,-51}},        color = {0, 0, 127}));
          connect(PulmonaryVeins.zeroPressureVolume, V0VP.y) annotation (
            Line(points={{45,47},{40,47},{40,55},{35.75,55}},          color = {0, 0, 127}));
          connect(SystemicVeins.zeroPressureVolume, V0VS.y) annotation (
            Line(points={{-43,-51},{-52,-51},{-52,-47},{-58.25,-47}},          color = {0, 0, 127}));
          connect(V0AS.y, SystemicArteries.zeroPressureVolume) annotation (
            Line(points={{29.75,-43},{39,-43},{39,-51}},        color = {0, 0, 127}));
          connect(rightHeart.q_out, PulmonaryArteries.q_in[1]) annotation (
            Line(points={{-48,3},{-40,3},{-40,37.35},{-30.1,37.35}},        color = {127, 0, 0}, thickness = 0.5));
          connect(PulmonaryArteries.q_in[2], TotalPulmonaryResistance.q_in) annotation (
            Line(points={{-30.1,38.65},{-16,38.65},{-16,38},{-2,38}},        color = {127, 0, 0}, thickness = 0.5));
          connect(TotalPulmonaryResistance.q_out, PulmonaryVeins.q_in[1]) annotation (
            Line(points={{18,38},{34,38},{34,37.35},{51.9,37.35}},        color = {127, 0, 0}, thickness = 0.5));
          connect(PulmonaryVeins.q_in[2], leftHeart.q_in) annotation (
            Line(points={{51.9,38.65},{74,38.65},{74,0}},      color = {127, 0, 0}, thickness = 0.5));
          connect(leftHeart.q_out, SystemicArteries.q_in[1]) annotation (
            Line(points={{52,2.22045e-16},{50,2.22045e-16},{50,-60.8667},{45.9,
                  -60.8667}},                                                                       color = {127, 0, 0}, thickness = 0.5));
          connect(SystemicArteries.q_in[2], TotalSystemicResistance.q_in) annotation (
            Line(points = {{45.9, -60}, {30, -60}, {30, -60}, {16, -60}}, color = {127, 0, 0}, thickness = 0.5));
          connect(TotalSystemicResistance.q_out, SystemicVeins.q_in[1]) annotation (
            Line(points={{-4,-60},{-20,-60},{-20,-60.65},{-36.1,-60.65}},        color = {127, 0, 0}, thickness = 0.5));
          connect(SystemicVeins.q_in[2], rightHeart.q_in) annotation (
            Line(points={{-36.1,-59.35},{-80,-59.35},{-80,3},{-72,3}},        color = {127, 0, 0}, thickness = 0.5));
          connect(SystemicArteries.q_in[3],pressureMeasure.port)  annotation (
            Line(points={{45.9,-59.1333},{60,-59.1333},{60,-62},{74,-62}},          color = {127, 0, 0}, thickness = 0.5));
          connect(RT.y, TotalSystemicResistance.resistance) annotation (
            Line(points = {{-2.75, -45}, {-2.75, -44.5}, {6, -44.5}, {6, -54}}, color = {0, 0, 127}));
          connect(RP.y, TotalPulmonaryResistance.resistance) annotation (
            Line(points = {{1.5, 65}, {1.5, 65.5}, {8, 65.5}, {8, 44}}, color = {0, 0, 127}));
          annotation (
            Documentation(info = "<html>
	<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it. </p>
	<ul>
	<li>J. Kofranek, S. Matousek, J. Rusz, P. Stodulka, P. Privitzer,M. Matejak, M. Tribula, The Atlas of Physiology and Pathophysiology: Web-based multimedia enabled interactive simulations., Comput. Methods Programs Biomed. 104 (2) (2011) 143&ndash;53. doi:10.1016/j.cmpb.2010.12.007.</li>
	<li>Kofr&aacute;nek J, Matej&aacute;k M, Je~ek F, Privitzer P, &Scaron;ilar J. V&yacute;ukov&yacute; webov&yacute; simulator krevn&iacute;ho obhu. In: Sborn&iacute;k PY&iacute;spvko MEDSOFT 2011: 106-121. </li>
	<li>Tribula M, Je~ek F, Privitzer P, Kofr&aacute;nek J, Kolman J. Webov&yacute; v&yacute;ukov&yacute; simul&aacute;tor krevn&iacute;ho obhu. In: Sborn&iacute;k PY&iacute;spvko MEDSOFT 2013: 197-204.</li>
	<li><a href=\"http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html\">http://physiome.cz/atlas/cirkulace/05/SimpleUncontrolledSimulation.html</a></li>
	</ul>
	</html>"), experiment(StopTime = 5));
        end NonPulsatileCirculation;

        model PulsatileCirculation
          extends NonPulsatileCirculation(redeclare Parts.PulsatileHeartPump rightHeart(pulses(QP = 0.338)), redeclare Parts.PulsatileHeartPump leftHeart(pulses(QP = 0.338)), CAS(k = 7.2755972857029e-9), SystemicArteries(volume_start = 0.603e-3), SystemicVeins(volume_start = 3.991e-3));
          annotation (
            Documentation(info = "<html>
	<p>Extension of the model of cardiovascular system with pulsatile dynamics</p>
	<ul>
	<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes. MEFANET Journal 2014. Available at WWW:<a href=\"
	 http://mj.mefanet.cz/mj-04140914\"> http://mj.mefanet.cz/mj-04140914</a>.</li>
	</ul>
	</html>"), experiment(StopTime = 5));
        end PulsatileCirculation;

        package Parts "Utility components used by package KofranekModels2013"
          extends Modelica.Icons.UtilitiesPackage;

          model HeartPump "Heart as pump, which flowrate is determined
          \t  by the StarlingSlope and filling pressure."
            extends HeartInterface;
            outer Modelica.Fluid.System system "System wide properties";
            extends Physiolibrary.Fluid.Interfaces.OnePort;
            parameter Physiolibrary.Types.HydraulicConductance StarlingSlope;
          equation
            q_in.m_flow = StarlingSlope * (q_in.p - system.p_ambient) * density;
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{32, -34}, {24, -24}, {18, -10}, {18, -8}, {22, 22}, {24, 24}, {34, 40}, {30, 70}, {26, 82}, {-22, 100}, {-26, 42}, {-26, 40}, {-30, -6}, {-30, -10}, {-6, -40}, {52, -74}, {32, -34}}, lineColor = {0, 0, 127}, smooth = Smooth.Bezier, fillColor = {255, 170, 170}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -60}, {102, -98}}, lineColor = {0, 0, 127}, fillColor = {255, 170, 170}, fillPattern = FillPattern.Solid, textString = "%name")}));
          end HeartPump;

          model PulsatileHeartPump "Heart as pump, which flowrate is determined
          \t  by the StarlingSlope and filling pressure."
            extends HeartInterface;
            replaceable package Medium = Media.Water constrainedby
              Media.Interfaces.PartialMedium                                                      "Medium model" annotation (
               choicesAllMatching = true);
            Physiolibrary.Fluid.Interfaces.FluidPort_a q_in(redeclare package
                Medium =
                Media.Water)                                                                        annotation (
              Placement(transformation(extent = {{-64, 0}, {-44, 20}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
            Physiolibrary.Fluid.Interfaces.FluidPort_b q_out(redeclare package
                Medium =
                Media.Water)                                                                         annotation (
              Placement(transformation(extent = {{42, 2}, {62, 22}}), iconTransformation(extent = {{42, 2}, {62, 22}})));
            Utilities.Pulses pulses annotation (
              Placement(transformation(extent = {{-40, 30}, {-20, 50}})));
            Physiolibrary.Fluid.Components.MassPump pump(useSolutionFlowInput = true) annotation (
              Placement(transformation(extent = {{-14, 2}, {6, 22}})));
          equation
            connect(pump.q_out, q_out) annotation (
              Line(points = {{6, 12}, {52, 12}}, thickness = 1));
            connect(pump.solutionFlow, pulses.massflowrate) annotation (
              Line(points = {{-4, 19}, {-4, 40}, {-21, 40}}, color = {0, 0, 127}));
            connect(q_in, pump.q_in) annotation (
              Line(points = {{-54, 10}, {-34, 10}, {-34, 12}, {-14, 12}}, thickness = 1));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{32, -34}, {24, -24}, {18, -10}, {18, -8}, {22, 22}, {24, 24}, {34, 40}, {30, 70}, {26, 82}, {-22, 100}, {-26, 42}, {-26, 40}, {-30, -6}, {-30, -10}, {-6, -40}, {52, -74}, {32, -34}}, lineColor = {0, 0, 127}, smooth = Smooth.Bezier, fillColor = {255, 170, 170}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -60}, {102, -98}}, lineColor = {0, 0, 127}, fillColor = {255, 170, 170}, fillPattern = FillPattern.Solid, textString = "%name")}));
          end PulsatileHeartPump;

          partial model HeartInterface
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false)),
              Diagram(coordinateSystem(preserveAspectRatio = false)));
          end HeartInterface;
        end Parts;
        annotation (
          Documentation(info = "<html>
	<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
	</html>"));
      end Kofranek2014;

      package Fernandez2013 "Model of CVS introduced by Fernandez de Canete et al. 2013"
        extends Modelica.Icons.ExamplesPackage;

        model PulsatileCirculation "Model of cardiovascular system with pulsatile dynamic"
          extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Fluid.Components.Conductor RPulmonaryVeins(Conductance(displayUnit = "ml/(mmHg.s)") = 7.425609600872e-08) annotation (
            Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Fluid.Components.Inertia pulmonaryVeinsInertia(massFlow_start(displayUnit = "kg/s") = 0.02225, I(displayUnit = "mmHg.s2/g") = 410.6329532382) annotation (
            Placement(transformation(origin = {-278, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Fluid.Components.Conductor RPulmonaryArtery(Conductance(displayUnit = "ml/(mmHg.s)") = 2.2216823876548e-07) annotation (
            Placement(transformation(origin = {200, 58}, extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Fluid.Components.Inertia pulmonaryArterialInertia(massFlow_start(displayUnit = "g/min") = 0.00073233333333333, I(displayUnit = "mmHg.s2/g") = 99.99179056125) annotation (
            Placement(transformation(origin = {156, 58}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel pulmonaryVeins(volume_start = 0.6597e-3, nPorts = 2, ZeroPressureVolume = 0.0001, Compliance = 3.5027875591992e-07) annotation (
            Placement(transformation(origin = {-279, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.IdealValve mitralValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation (
            Placement(transformation(origin = {-243, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel leftVentricle(useComplianceInput = true, useExternalPressureInput = true,
          isExternalPressureAbsolute=true,                                                                                       nPorts = 3,
          volume_start=0.0002097,
          ZeroPressureVolume=9e-05)                                                                                                                                                                annotation (
            Placement(transformation(origin = {-209, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Conductor RLeftMyo(Conductance = 9.3757696980707e-08) annotation (
            Placement(transformation(origin = {-181, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.IdealValve aorticValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation (
            Placement(transformation(origin = {-143, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel aorta(nPorts = 4, Compliance(displayUnit = "ml/mmHg") = 1.6501354668604e-09, volume_start = 0.046e-3, ZeroPressureVolume = 3e-05) annotation (
            Placement(transformation(origin = {-111, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Conductor Raorta(Conductance = 1.1108411938274e-07) annotation (
            Placement(transformation(origin = {-79, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Inertia aorticInertia(massFlow_start(displayUnit = "kg/min") = 0.010385, I(displayUnit = "mmHg.s2/g") = 109.99096961738) annotation (
            Placement(transformation(origin = {-37, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel arteries(nPorts = 3, Compliance = 1.0950899007347e-08, volume_start = 0.805e-3, ZeroPressureVolume = 0.0007) annotation (
            Placement(transformation(origin = {-1, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Conductor RSystemic(Conductance = 7.5006157584566e-09) annotation (
            Placement(transformation(origin = {31, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Inertia systemicInertia(massFlow_start(displayUnit = "kg/min") = 0.07935, I = 479.960594694) annotation (
            Placement(transformation(origin = {75, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.IdealValve tricuspidValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation (
            Placement(transformation(origin = {137, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel rightVentricle(useComplianceInput = true, useExternalPressureInput = true,
          isExternalPressureAbsolute=true,                                                                                        nPorts = 3,
          volume_start=0.00018,
          ZeroPressureVolume=7e-05)                                                                                                                                                               annotation (
            Placement(transformation(origin = {171, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.Conductor RRightMyo(Conductance = 4.2858518443821e-07) annotation (
            Placement(transformation(origin = {207, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.IdealValve pulmonaryValve(_Gon(displayUnit = "ml/(mmHg.s)") = 1.9996641612045e-06) annotation (
            Placement(transformation(origin = {243, -3}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel pulmonaryArtery(nPorts = 2, volume_start = 0.021e-3, ZeroPressureVolume = 2e-05, Compliance(displayUnit = "ml/mmHg") = 6.7505541826109e-10) annotation (
            Placement(transformation(origin = {243, 57}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel pulmonaryArterioles(nPorts = 2, volume_start = 0.637e-3, ZeroPressureVolume = 0.0006, Compliance(displayUnit = "ml/mmHg") = 2.0026644075079e-08) annotation (
            Placement(transformation(origin = {124, 58}, extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Fluid.Components.ElasticVessel veins(volume_start = 2.443e-3, nPorts = 2, Compliance(displayUnit = "ml/mmHg") = 1.5001231516913e-07, ZeroPressureVolume = 0.00237) annotation (
            Placement(transformation(origin = {105, -3}, extent = {{-15, -15}, {15, 15}})));
          Parts.TimeVaryingElastance timeVaryingElastanceLeft(Ed(displayUnit = "mmHg/ml") = 13332238.7415, Es(displayUnit = "mmHg/ml") = 183318282.69563, Pi0(displayUnit = "mmHg") = 6666.11937075) annotation (
            Placement(transformation(extent = {{-222, 16}, {-202, 36}})));
          Parts.TimeVaryingElastance timeVaryingElastanceRight(Ed(displayUnit = "mmHg/ml") = 3999671.62245, Es(displayUnit = "mmHg/ml") = 43729743.0721, Pi0(displayUnit = "mmHg") = 3199.73729796) annotation (
            Placement(transformation(extent = {{164, 18}, {184, 38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit = "Hz") = 1.2) annotation (
            Placement(transformation(extent = {{-262, 30}, {-244, 42}})));
          inner Modelica.Fluid.System system(p_ambient(displayUnit = "mmHg") = 101325.0144354) annotation (
            Placement(transformation(extent = {{-94, 70}, {-74, 90}})));
          Sensors.PressureMeasure arteriesPressure annotation (
            Placement(transformation(extent = {{26, -72}, {46, -52}})));
          Sensors.PressureMeasure rightVentriclePressure annotation (
            Placement(transformation(extent = {{182, -68}, {202, -48}})));
          Sensors.PressureMeasure leftVentriclePressure annotation (
            Placement(transformation(extent = {{-206, -72}, {-186, -52}})));
          Sensors.PressureMeasure aortaPressure annotation (
            Placement(transformation(extent = {{-106, -60}, {-86, -40}})));
          Sensors.Sphygmomanometer sphygmomanometer annotation (
            Placement(transformation(extent = {{-108, -90}, {-88, -70}})));
        equation
          connect(Raorta.q_out, aorticInertia.q_in) annotation (
            Line(points = {{-64, -3}, {-52, -3}}, thickness = 1));
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance) annotation (
            Line(points={{-212,17},{-209,17},{-209,10.5}},        color = {0, 0, 127}));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance) annotation (
            Line(points={{174,19},{174,10.5},{171,10.5}},        color = {0, 0, 127}));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure) annotation (
            Line(points={{-205,17},{-205,16.5},{-198.5,16.5},{-198.5,10.5}},      color = {0, 0, 127}));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure) annotation (
            Line(points={{181,19},{181,10.5},{181.5,10.5}},      color = {0, 0, 127}));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (
            Line(points = {{-241.75, 36}, {-232.375, 36}, {-232.375, 33.6}, {-220.6, 33.6}}, color = {0, 0, 127}));
          connect(RSystemic.q_out, systemicInertia.q_in) annotation (
            Line(points = {{46, -3}, {60, -3}}, thickness = 1));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (
            Line(points = {{-241.75, 36}, {-34, 36}, {-34, 35.6}, {165.4, 35.6}}, color = {0, 0, 127}));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (
            Line(points = {{222, -3}, {228, -3}}, thickness = 1));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in) annotation (
            Line(points = {{182.5, 58}, {171, 58}}, thickness = 1));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
            Line(points = {{-235, 60}, {-263, 60}}, thickness = 1));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (
            Line(points = {{-166, -3}, {-158, -3}}, thickness = 1));
          connect(RPulmonaryVeins.q_in, pulmonaryArterioles.q_in[1]) annotation (
            Line(points={{-205,60},{-40,60},{-40,57.025},{123.85,57.025}},        color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryArterioles.q_in[2], pulmonaryArterialInertia.q_out) annotation (
            Line(points={{123.85,58.975},{133,58.975},{133,58},{141,58}},        color = {127, 0, 0}, thickness = 0.5));
          connect(RPulmonaryArtery.q_in, pulmonaryArtery.q_in[1]) annotation (
            Line(points={{217.5,58},{229.75,58},{229.75,56.025},{242.85,56.025}},        color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryArtery.q_in[2], pulmonaryValve.q_out) annotation (
            Line(points={{242.85,57.975},{292,57.975},{292,-3},{258,-3}},        color = {127, 0, 0}, thickness = 0.5));
          connect(tricuspidValve.q_out, rightVentricle.q_in[1]) annotation (
            Line(points={{152,-3},{162,-3},{162,-4.3},{170.85,-4.3}},          color = {127, 0, 0}, thickness = 0.5));
          connect(RRightMyo.q_in, rightVentricle.q_in[2]) annotation (
            Line(points = {{192, -3}, {181, -3}, {181, -3}, {170.85, -3}}, color = {127, 0, 0}, thickness = 0.5));
          connect(tricuspidValve.q_in, veins.q_in[1]) annotation (
            Line(points={{122,-3},{114,-3},{114,-3.975},{104.85,-3.975}},        color = {127, 0, 0}, thickness = 0.5));
          connect(systemicInertia.q_out, veins.q_in[2]) annotation (
            Line(points={{90,-3},{98,-3},{98,-2.025},{104.85,-2.025}},        color = {127, 0, 0}, thickness = 0.5));
          connect(RSystemic.q_in, arteries.q_in[1]) annotation (
            Line(points={{16,-3},{8,-3},{8,-4.3},{-1.15,-4.3}},          color = {127, 0, 0}, thickness = 0.5));
          connect(aorticInertia.q_out, arteries.q_in[2]) annotation (
            Line(points = {{-22, -3}, {-11, -3}, {-11, -3}, {-1.15, -3}}, color = {127, 0, 0}, thickness = 0.5));
          connect(Raorta.q_in, aorta.q_in[1]) annotation (
            Line(points={{-94,-3},{-104,-3},{-104,-4.4625},{-111.15,-4.4625}},        color = {127, 0, 0}, thickness = 0.5));
          connect(aorticValve.q_out, aorta.q_in[2]) annotation (
            Line(points={{-128,-3},{-120,-3},{-120,-3.4875},{-111.15,-3.4875}},        color = {127, 0, 0}, thickness = 0.5));
          connect(mitralValve.q_out, leftVentricle.q_in[1]) annotation (
            Line(points={{-228,-3},{-220,-3},{-220,-4.3},{-209.15,-4.3}},          color = {127, 0, 0}, thickness = 0.5));
          connect(leftVentricle.q_in[2], RLeftMyo.q_in) annotation (
            Line(points = {{-209.15, -3}, {-203.725, -3}, {-203.725, -3}, {-196, -3}}, color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryVeins.q_in[1], pulmonaryVeinsInertia.q_out) annotation (
            Line(points={{-279.15,-3.975},{-318,-3.975},{-318,60},{-293,60}},        color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryVeins.q_in[2], mitralValve.q_in) annotation (
            Line(points={{-279.15,-2.025},{-268.725,-2.025},{-268.725,-3},{-258,
                -3}},                                                                        color = {127, 0, 0}, thickness = 0.5));
          connect(arteriesPressure.port, arteries.q_in[3]) annotation (
            Line(points={{36,-72},{36,-69},{-1.15,-69},{-1.15,-1.7}},          color = {127, 0, 0}, thickness = 0.5));
          connect(rightVentricle.q_in[3],rightVentriclePressure.port)  annotation (
            Line(points={{170.85,-1.7},{170.85,-68},{192,-68}},        color = {127, 0, 0}, thickness = 0.5));
          connect(leftVentricle.q_in[3],leftVentriclePressure.port)  annotation (
            Line(points={{-209.15,-1.7},{-209.15,-72},{-196,-72}},        color = {127, 0, 0}, thickness = 0.5));
          connect(aortaPressure.port, aorta.q_in[3]) annotation (
            Line(points={{-96,-60},{-112,-60},{-112,-2.5125},{-111.15,-2.5125}},         color = {127, 0, 0}, thickness = 0.5));
          connect(aorta.q_in[4],sphygmomanometer.port)  annotation (
            Line(points={{-111.15,-1.5375},{-111.15,-90},{-98,-90}},        color = {127, 0, 0}, thickness = 0.5));
          annotation (
            Diagram(coordinateSystem(extent = {{-350, -100}, {400, 100}}, preserveAspectRatio = false, grid = {2, 2})),
            Icon(coordinateSystem(extent = {{-350, -100}, {400, 100}}, preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info = "<html>
	<p>Model of cardiovascular system with pulsatile dynamics</p>
	<ul>
	<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
	<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
	</ul>
	</html>", revisions = "<html>
	<ul>
	<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
	</ul>
	</html>"), experiment(StopTime = 5));
        end PulsatileCirculation;

        package Parts "Utility components used by package KofranekModels2013"
          extends Modelica.Icons.UtilitiesPackage;

          model TimeVaryingElastance
            outer Modelica.Fluid.System system "System wide properties";
            parameter Physiolibrary.Types.HydraulicElastance Ed "elastance of diastole";
            parameter Physiolibrary.Types.HydraulicElastance Es "elastance of systole";
            parameter Physiolibrary.Types.Pressure Pi0 "peak isovolumic pressure";
            parameter Physiolibrary.Types.Frequency HR_start = 1 "Initial hear rate";
            Physiolibrary.Types.Time tm "relative time from the beginning of cardiac cycle";
            discrete Physiolibrary.Types.Time HP "heart period";
            discrete Physiolibrary.Types.Time t0 "time of beginning of the cardiac cycle";
            discrete Physiolibrary.Types.Time ts "duration of systole";
            Real a;
            Physiolibrary.Types.RealIO.HydraulicComplianceOutput C annotation (
              Placement(transformation(extent = {{-4, -102}, {16, -82}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -90})));
            Physiolibrary.Types.HydraulicElastance E;
            Physiolibrary.Types.RealIO.PressureOutput Pi annotation (
              Placement(transformation(extent = {{-72, -100}, {-52, -80}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {70, -90})));
            Physiolibrary.Types.RealIO.FrequencyInput HR "heart rate" annotation (
              Placement(transformation(extent = {{-106, 56}, {-66, 96}}), iconTransformation(extent = {{-106, 56}, {-66, 96}})));
          initial equation
            HP = 1 / HR_start;
            t0 = 0;
            ts = 0.16 + 0.3 / HR_start;
          equation
            tm = time - pre(t0);
            if tm < pre(ts) then
              a = (1 - cos(2 * Modelica.Constants.pi * tm / pre(ts))) / 2;
            else
              a = 0;
            end if;
            E = Ed + Es * a;
            C = 1 / E;
            Pi = Pi0 * a + system.p_ambient;
            when {tm >= pre(HP)} then
              HP = 1 / HR;
              t0 = time;
              ts = 0.16 + 0.3 * HP;
            end when;
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-80, 80}, {80, -80}}, lineColor = {0, 0, 255}, fillColor = {170, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{-78, 0}, {-68, 18}, {-54, 52}, {-44, 64}, {-30, 60}, {-26, 46}}, color = {0, 0, 255}), Line(points = {{-26, 46}, {-26, 32}, {-20, 10}, {-8, 2}, {36, 2}, {80, 2}}, color = {0, 0, 255}), Text(extent = {{-70, 98}, {-22, 80}}, lineColor = {0, 0, 255}, textString = "HR"), Text(extent = {{-74, -40}, {40, -80}}, lineColor = {0, 0, 255}, textString = "Et"), Text(extent = {{42, -40}, {100, -80}}, lineColor = {0, 0, 255}, textString = "Pi"), Text(extent = {{-272, 16}, {276, -40}}, lineColor = {0, 0, 255}, textString = "%name")}));
          end TimeVaryingElastance;
        end Parts;
      end Fernandez2013;

      package MeursModel2011 "models of cardiovascular system used in www.physiome.cz/atlas"
        extends Modelica.Icons.ExamplesPackage;

        package Parts "Utility components used by package KofranekModels2013"
          extends Modelica.Icons.UtilitiesPackage;

          model AtrialElastance
            extends HeartIntervals;
            Physiolibrary.Types.RealIO.HydraulicElastanceOutput Et "elasticity" annotation (
              Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -20}, {138, 18}})));
            parameter Physiolibrary.Types.HydraulicElastance EMIN "Diastolic elastance";
            parameter Boolean useEs_extInput = false "=true, if external elastance/compliance value is used" annotation (
              Evaluate = true,
              HideResult = true,
              choices(checkBox = true),
              Dialog(group = "Conditional inputs"));
            parameter Physiolibrary.Types.HydraulicElastance EMAX "Maximum systolic elastance" annotation (
              Dialog(enable = not useEs_extInput));
            Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext = 1 / es_int if useEs_extInput annotation (
              Placement(transformation(extent = {{60, 60}, {100, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, origin = {-80, 80})));
          protected
            Physiolibrary.Types.HydraulicElastance es_int;
          equation
            if not useEs_extInput then
              es_int = EMAX;
            end if;
            Et = smooth(1, if time - T0 < Tas then EMIN + (es_int - EMIN) * sin(Modelica.Constants.pi * (time - T0) / Tas) else EMIN);
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 82}, {100, -100}}, pattern = LinePattern.None, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, lineColor = {0, 0, 255}), Text(extent = {{-98, 82}, {98, 24}}, lineColor = {0, 0, 255}, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Atrial elastance"), Line(points = {{-78, -34}, {-76, -26}, {-70, -14}, {-58, 6}, {-36, 36}, {-14, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color = {0, 0, 255}, smooth = Smooth.Bezier), Text(extent = {{-220, -102}, {200, -120}}, lineColor = {0, 0, 255}, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{72, 4}, {102, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Ct")}));
          end AtrialElastance;

          model VentricularElastance
            extends HeartIntervals;
            Physiolibrary.Types.RealIO.HydraulicElastanceOutput Et "ventricular elasticity" annotation (
              Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, 4}, {138, 42}})));
            Modelica.Blocks.Interfaces.RealOutput Et0 "normalized ventricular elasticity (0..1)" annotation (
              Placement(transformation(extent = {{100, -24}, {120, -4}}), iconTransformation(extent = {{100, -40}, {138, -2}})));
            Physiolibrary.Types.RealIO.TimeOutput HeartInterval "eapsed time" annotation (
              Placement(transformation(extent = {{102, -42}, {122, -22}}), iconTransformation(extent = {{100, -98}, {138, -60}})));
            parameter Physiolibrary.Types.HydraulicElastance EMIN "Diastolic elastance ";
            constant Real Kn = 0.57923032735652;
            //Kn is always = 0.5792303273565197
            //... the t * sin(pi*t) has its maximum at t = 0.645773676543406 and = 0.5792303273565197
            //Equation to calculate normalized elastance ET0 was:
            //Et0=EMIN+(EMAX-EMIN)*((time-T0)-(Tas+Tav))/Tvs)*sin(Modelica.Constants.pi*(((time-T0)-(Tas+Tav))/Tvs));
            parameter Boolean useEs_extInput = false "=true, if external elastance/compliance value is used" annotation (
              Evaluate = true,
              HideResult = true,
              choices(checkBox = true),
              Dialog(group = "Conditional inputs"));
            parameter Physiolibrary.Types.HydraulicElastance EMAX "Maximum systolic elastance" annotation (
              Dialog(enable = not useEs_extInput));
            Physiolibrary.Types.RealIO.HydraulicComplianceInput Es_ext(start = 1 / EMAX) = 1 / es_int if useEs_extInput annotation (
              Placement(transformation(extent = {{60, 60}, {100, 100}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, origin = {-80, 80})));
          protected
            Physiolibrary.Types.HydraulicElastance es_int;
          equation
            if not useEs_extInput then
              es_int = EMAX;
            end if;
            HeartInterval = time - T0;
            Et = EMIN + (es_int - EMIN) * Et0;
            Et0 = smooth(1, if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then (HeartInterval - (Tas + Tav)) / Tvs * sin(Modelica.Constants.pi * (HeartInterval - (Tas + Tav)) / Tvs) / Kn else 0);
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-98, 82}, {100, -100}}, pattern = LinePattern.None, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, lineColor = {0, 0, 255}), Text(extent = {{-82, 82}, {80, 24}}, lineColor = {0, 0, 255}, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Ventricular elastance"), Line(points = {{-72, -34}, {-62, -34}, {-52, -34}, {-44, 8}, {-18, 38}, {-12, 14}, {-6, -10}, {0, -32}, {6, -34}, {88, -34}, {94, -34}}, color = {0, 0, 255}, smooth = Smooth.Bezier), Text(extent = {{-220, -102}, {200, -120}}, lineColor = {0, 0, 255}, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{96, -32}, {68, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Et0"), Text(extent = {{42, -72}, {88, -84}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Heart interval"), Text(extent = {{62, 30}, {96, 8}}, lineColor = {0, 0, 255}, lineThickness = 1, fillColor = {255, 255, 170}, fillPattern = FillPattern.Solid, textString = "Ct")}));
          end VentricularElastance;

          model HeartIntervals
            discrete Physiolibrary.Types.Time Tas;
            discrete Physiolibrary.Types.Time T0;
            discrete Physiolibrary.Types.Time Tvs;
            parameter Physiolibrary.Types.Time Tav(displayUnit = "s") = 0.01 "atrioventricular delay";
            parameter Physiolibrary.Types.Frequency HR_start = 1.2 "initial heart rate";
            discrete Modelica.Units.SI.Time HP(start = 0) "heart period";
            Boolean b(start = false);
            Physiolibrary.Types.RealIO.FrequencyInput HR(start = 1.2) "heart rate" annotation (
              Placement(transformation(extent = {{-12, 68}, {28, 108}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 80})));
          initial equation
            T0 = 0 "start time of cardiac cycle";
            HP = 1 / HR_start "update heart period per heart rate";
            Tas = 0.03 + 0.09 / HR_start "duration of atrial systole";
            Tvs = 0.16 + 0.2 / HR_start "duration of ventricular systole";
          equation
            b = time - pre(T0) >= pre(HP) "true if new pulse occurs";
            when {b} then
              T0 = time "start time of cardiac cycle";
              HP = 1 / HR "update heart period per heart rate";
              Tas = 0.03 + 0.09 * HP "duration of atrial systole";
              Tvs = 0.16 + 0.2 * HP "duration of ventricular systole";
            end when;
            annotation (
              Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-64, 102}, {-6, 78}}, lineColor = {0, 0, 255}, textString = "HR")}));
          end HeartIntervals;
        end Parts;

        model HemodynamicsMeurs_flatNorm
          extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Fluid.Components.ElasticVesselElastance Epa(
          volume_start=0.000106,
          ZeroPressureVolume=5e-05,
          ExternalPressure(displayUnit="mmHg") = -533.28954966,
          Elastance=31064116.267695,                                                                                                                                                            nPorts = 2) annotation (
            Placement(transformation(extent = {{-94, 84}, {-66, 112}})));
          Physiolibrary.Fluid.Components.Resistor Rpp(Resistance(displayUnit = "(mmHg.s)/ml") = 14665462.61565) annotation (
            Placement(transformation(extent = {{-56, 85}, {-22, 111}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Epv(
          volume_start=0.000518,
          ZeroPressureVolume=0.00035,
          ExternalPressure=-533.28954966,
          Elastance=6066168.6273825,                                                                                                                                                              nPorts = 2) annotation (
            Placement(transformation(extent = {{-14, 84}, {20, 112}})));
          Physiolibrary.Fluid.Components.Resistor Rlain(Resistance(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation (
            Placement(transformation(extent = {{26, 86}, {56, 110}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance LeftAtrium(
          isExternalPressureAbsolute=false,                                useElastanceInput = true,
          volume_start=9.31e-05,
          ZeroPressureVolume=3e-05,
          ExternalPressure=-533.28954966,                                                                                                                                                           nPorts = 2) annotation (
            Placement(transformation(extent = {{74, 50}, {102, 78}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance LeftVentricle(
          isExternalPressureAbsolute=false,                                   useElastanceInput = true,
          volume_start=0.000144,
          ZeroPressureVolume=6e-05,
          ExternalPressure=-533.28954966,                                                                                                                                                              nPorts = 2) annotation (
            Placement(transformation(extent = {{150, 50}, {178, 78}})));
          Physiolibrary.Fluid.Components.IdealValveResistance AorticValve(_Roff(displayUnit = "g/(mmHg.s)") = Modelica.Constants.inf, _Ron(displayUnit = "(mmHg.s)/ml") = 1066579.09932) annotation (
            Placement(transformation(extent = {{184, 76}, {208, 52}})));
          Parts.AtrialElastance LAtrialElastance(Tav(displayUnit = "s"), EMIN = 15998686.4898, EMAX = 37330268.4762) annotation (
            Placement(transformation(extent = {{80, 92}, {118, 124}})));
          Parts.VentricularElastance LVentricularElastance(EMIN = 11999014.86735, EMAX = 533289549.66) annotation (
            Placement(transformation(extent = {{164, 88}, {200, 120}})));
          Physiolibrary.Fluid.Components.IdealValveResistance MitralValve(_Roff(displayUnit = "g/(mmHg.s)") = Modelica.Constants.inf, _Ron(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation (
            Placement(transformation(origin = {127, 64}, extent = {{-13, 12}, {13, -12}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Eitha(
          ExternalPressure=-533.28954966,                                                                       nPorts = 4,
          volume_start=0.0002,
          ZeroPressureVolume=0.00014,
          Elastance=190651014.00345)                                                                                                                                                                          annotation (
            Placement(transformation(extent = {{168, 6}, {190, 28}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Eetha(
          volume_start=0.000526,
          ZeroPressureVolume=0.00037,
          Elastance=74127247.40274,                                                                                                                      nPorts = 3) annotation (
            Placement(transformation(extent = {{56, 4}, {82, 30}})));
          Physiolibrary.Fluid.Components.Inertia inertia(I(displayUnit=
                "mmHg.s2/g") = 226.6480586055, massFlow_start(displayUnit=
                "g/min") = 0.021666666666667)                                                                                                                       annotation (
            Placement(transformation(extent = {{-11, -11}, {11, 11}}, rotation = 180, origin = {141, 17})));
          Physiolibrary.Fluid.Components.Resistor Retha(Resistance(displayUnit = "(mmHg.s)/ml") = 7999343.2449) annotation (
            Placement(transformation(extent = {{90, 6}, {112, 28}})));
          Physiolibrary.Fluid.Components.Resistor Rsart(Resistance(displayUnit = "(mmHg.s)/ml") = 106657909.932) annotation (
            Placement(transformation(extent = {{14, -13}, {-14, 13}}, origin = {24, 19})));
          Physiolibrary.Fluid.Components.Resistor Rsven(Resistance(displayUnit = "(mmHg.s)/ml") = 26664477.483) annotation (
            Placement(transformation(extent = {{14, -13}, {-14, 13}}, origin = {-60, 17})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Est(volume_start = 0.283e-3, ZeroPressureVolume = 0.185e-3, Elastance = 34930465.50273, nPorts = 3) annotation (
            Placement(transformation(extent = {{-28, 6}, {-4, 28}})));
          Physiolibrary.Fluid.Components.Resistor Rethv(Resistance(displayUnit = "(mmHg.s)/ml") = 11999014.86735) annotation (
            Placement(transformation(extent = {{-120, 4}, {-146, 30}})));
          Physiolibrary.Fluid.Components.Resistor Rrain(Resistance(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation (
            Placement(transformation(extent = {{-208, 4}, {-236, 30}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Eithv(
          volume_start=0.00148,
          ZeroPressureVolume=0.00119,
          ExternalPressure=-533.28954966,
          Elastance=2426467.450953,                                                                                                                                                               nPorts = 3) annotation (
            Placement(transformation(extent = {{-194, 4}, {-166, 30}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance Eethv(
          volume_start=0.00153,
          ZeroPressureVolume=0.001,
          Elastance=2253148.3473135,                                                                                                                  nPorts = 3) annotation (
            Placement(transformation(extent = {{-108, 4}, {-82, 30}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance RightAtrium(
          isExternalPressureAbsolute=false,                                 useElastanceInput = true,
          volume_start=0.000135,
          ZeroPressureVolume=3e-05,
          ExternalPressure(displayUnit="mmHg") = -533.28954966,                                                                                                                                      nPorts = 2) annotation (
            Placement(transformation(extent = {{-242, 44}, {-214, 72}})));
          Physiolibrary.Fluid.Components.ElasticVesselElastance RightVentricle(
          isExternalPressureAbsolute=false,                                    useElastanceInput = true,
          volume_start=0.000131,
          ZeroPressureVolume=4e-05,
          ExternalPressure(displayUnit="mmHg") = -533.28954966,                                                                                                                                         nPorts = 2) annotation (
            Placement(transformation(extent = {{-170, 42}, {-140, 72}})));
          Physiolibrary.Fluid.Components.IdealValveResistance PulmonaryValve(_Roff(displayUnit = "g/(mmHg.s)") = Modelica.Constants.inf, _Ron(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation (
            Placement(transformation(extent = {{-132, 70}, {-106, 44}})));
          Parts.AtrialElastance RAtrialElastance(EMIN = 6666119.37075, EMAX = 19998358.11225) annotation (
            Placement(transformation(extent = {{-244, 86}, {-206, 118}})));
          Parts.VentricularElastance RVentricularElastance(EMIN = 7599376.082655, EMAX = 65327969.83335) annotation (
            Placement(transformation(extent = {{-180, 88}, {-150, 122}})));
          Physiolibrary.Fluid.Components.IdealValveResistance TricuspidValve(_Roff = Modelica.Constants.inf, _Ron(displayUnit = "(mmHg.s)/ml") = 399967.162245) annotation (
            Placement(transformation(origin = {-189, 58}, extent = {{-13, 12}, {13, -12}})));
          replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation (
            Placement(transformation(origin = {-243, 128.5}, extent = {{-11, -6.5}, {11, 6.5}})));
          inner Modelica.Fluid.System system(p_ambient(displayUnit = "mmHg") = 101325.0144354, T_ambient = 310.15) annotation (
            Placement(transformation(extent = {{-48, 144}, {-28, 164}})));
          Sensors.PressureMeasure EithaPressure annotation (
            Placement(transformation(extent = {{190, -36}, {210, -16}})));
          Sensors.PressureMeasure EethaPressure annotation (
            Placement(transformation(extent = {{78, -56}, {98, -36}})));
          Sensors.PressureMeasure EstPressure annotation (
            Placement(transformation(extent = {{-12, -52}, {8, -32}})));
          Sensors.PressureMeasure EethvPressure annotation (
            Placement(transformation(extent = {{-92, -52}, {-72, -32}})));
          Sensors.PressureMeasure EithvPressure annotation (
            Placement(transformation(extent = {{-166, -54}, {-146, -34}})));
          Sensors.Power power annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-96, 72})));
          Sensors.Power power1 annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-254, 36})));
          Modelica.Blocks.Math.Mean rightHeartPower(f(displayUnit = "1/min") = 1.2) annotation (
            Placement(transformation(extent = {{-214, -66}, {-194, -46}})));
          Modelica.Blocks.Math.Feedback feedback annotation (
            Placement(transformation(extent = {{-264, -46}, {-244, -66}})));
          Sensors.Power power2 annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {70, 82})));
          Sensors.Power power3 annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {224, 38})));
          Modelica.Blocks.Math.Mean leftHeartPower(f(displayUnit = "1/min") = 1.2) annotation (
            Placement(transformation(extent = {{186, -110}, {206, -90}})));
          Modelica.Blocks.Math.Feedback feedback1 annotation (
            Placement(transformation(extent = {{136, -110}, {156, -90}})));
          Sensors.Sphygmomanometer arterialPressure(MeasurementTime(displayUnit = "s") = 60 / 72) annotation (
            Placement(transformation(extent = {{198, -66}, {218, -46}})));
        equation
          connect(Retha.q_out, inertia.q_out) annotation (
            Line(points = {{112, 17}, {130, 17}}, thickness = 1));
          connect(HeartRate.y, RAtrialElastance.HR) annotation (
            Line(points = {{-229.25, 128.5}, {-225, 128.5}, {-225, 114.8}}, color = {0, 0, 127}));
          connect(RVentricularElastance.HR, HeartRate.y) annotation (
            Line(points = {{-165, 118.6}, {-165, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}));
          connect(LAtrialElastance.HR, HeartRate.y) annotation (
            Line(points = {{99, 120.8}, {99, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}));
          connect(LVentricularElastance.HR, HeartRate.y) annotation (
            Line(points = {{182, 116.8}, {182, 128.5}, {-229.25, 128.5}}, color = {0, 0, 127}));
          connect(RightAtrium.q_in[1], TricuspidValve.q_in) annotation (
            Line(points={{-228.14,57.09},{-214,57.09},{-214,58},{-202,58}},          color = {127, 0, 0}, thickness = 0.5));
          connect(TricuspidValve.q_out, RightVentricle.q_in[1]) annotation (
            Line(points={{-176,58},{-166,58},{-166,56.025},{-155.15,56.025}},        color = {127, 0, 0}, thickness = 0.5));
          connect(RightVentricle.q_in[2], PulmonaryValve.q_in) annotation (
            Line(points={{-155.15,57.975},{-143.725,57.975},{-143.725,57},{-132,
                57}},                                                                        color = {127, 0, 0}, thickness = 0.5));
          connect(Epa.q_in[1], Rpp.q_in) annotation (
            Line(points={{-80.14,97.09},{-68,97.09},{-68,98},{-56,98}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Rpp.q_out, Epv.q_in[1]) annotation (
            Line(points={{-22,98},{-8,98},{-8,97.09},{2.83,97.09}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Epv.q_in[2], Rlain.q_in) annotation (
            Line(points={{2.83,98.91},{16,98.91},{16,98},{26,98}},          color = {127, 0, 0}, thickness = 0.5));
          connect(LeftAtrium.q_in[1], MitralValve.q_in) annotation (
            Line(points={{87.86,63.09},{102,63.09},{102,64},{114,64}},          color = {127, 0, 0}, thickness = 0.5));
          connect(MitralValve.q_out, LeftVentricle.q_in[1]) annotation (
            Line(points={{140,64},{154,64},{154,66},{163.86,66},{163.86,63.09}},            color = {127, 0, 0}, thickness = 0.5));
          connect(LeftVentricle.q_in[2], AorticValve.q_in) annotation (
            Line(points={{163.86,64.91},{172,64.91},{172,64},{184,64}},          color = {127, 0, 0}, thickness = 0.5));
          connect(inertia.q_in, Eitha.q_in[1]) annotation (
            Line(points={{152,17},{164,17},{164,15.9275},{178.89,15.9275}},        color = {127, 0, 0}, thickness = 0.5));
          connect(Retha.q_in, Eetha.q_in[1]) annotation (
            Line(points={{90,17},{80,17},{80,15.8733},{68.87,15.8733}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Rsart.q_in, Eetha.q_in[2]) annotation (
            Line(points = {{38, 19}, {52, 19}, {52, 17}, {68.87, 17}}, color = {127, 0, 0}, thickness = 0.5));
          connect(Est.q_in[1], Rsart.q_out) annotation (
            Line(points={{-16.12,16.0467},{-3.18,16.0467},{-3.18,19},{10,19}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Est.q_in[2], Rsven.q_in) annotation (
            Line(points = {{-16.12, 17}, {-31.18, 17}, {-31.18, 17}, {-46, 17}}, color = {127, 0, 0}, thickness = 0.5));
          connect(Rsven.q_out, Eethv.q_in[1]) annotation (
            Line(points={{-74,17},{-86,17},{-86,15.8733},{-95.13,15.8733}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Rethv.q_in, Eethv.q_in[2]) annotation (
            Line(points = {{-120, 17}, {-107, 17}, {-107, 17}, {-95.13, 17}}, color = {127, 0, 0}, thickness = 0.5));
          connect(Rethv.q_out, Eithv.q_in[1]) annotation (
            Line(points={{-146,17},{-164,17},{-164,15.8733},{-180.14,15.8733}},          color = {127, 0, 0}, thickness = 0.5));
          connect(Rrain.q_in, Eithv.q_in[2]) annotation (
            Line(points = {{-208, 17}, {-194, 17}, {-194, 17}, {-180.14, 17}}, color = {127, 0, 0}, thickness = 0.5));
          connect(EithaPressure.port, Eitha.q_in[2]) annotation (
            Line(points={{200,-36},{178.89,-36},{178.89,16.6425}},       color = {127, 0, 0}, thickness = 0.5));
          connect(EethaPressure.port, Eetha.q_in[3]) annotation (
            Line(points={{88,-56},{88,-54},{68.87,-54},{68.87,18.1267}},          color = {127, 0, 0}, thickness = 0.5));
          connect(EstPressure.port, Est.q_in[3]) annotation (
            Line(points={{-2,-52},{-16.12,-52},{-16.12,17.9533}},        color = {127, 0, 0}, thickness = 0.5));
          connect(EethvPressure.port, Eethv.q_in[3]) annotation (
            Line(points={{-82,-52},{-95.13,-52},{-95.13,18.1267}},        color = {127, 0, 0}, thickness = 0.5));
          connect(Eithv.q_in[3],EithvPressure.port)  annotation (
            Line(points={{-180.14,18.1267},{-180.14,-54},{-156,-54}},        color = {127, 0, 0}, thickness = 0.5));
          connect(RAtrialElastance.Et, RightAtrium.elastance) annotation (
            Line(points = {{-202.39, 101.84}, {-202.39, 85.92}, {-225.2, 85.92}, {-225.2, 70.6}}, color = {0, 0, 127}));
          connect(RVentricularElastance.Et, RightVentricle.elastance) annotation (
            Line(points = {{-147.15, 108.91}, {-134, 108.91}, {-134, 76}, {-152, 76}, {-152, 70.5}}, color = {0, 0, 127}));
          connect(LAtrialElastance.Et, LeftAtrium.elastance) annotation (
            Line(points = {{121.61, 107.84}, {121.61, 91.92}, {90.8, 91.92}, {90.8, 76.6}}, color = {0, 0, 127}));
          connect(LVentricularElastance.Et, LeftVentricle.elastance) annotation (
            Line(points = {{203.42, 107.68}, {222, 107.68}, {222, 76.6}, {166.8, 76.6}}, color = {0, 0, 127}));
          connect(PulmonaryValve.q_out, power.q_in) annotation (
            Line(points = {{-106, 57}, {-96, 57}, {-96, 62}}, color = {127, 0, 0}, thickness = 0.5));
          connect(power.q_out, Epa.q_in[2]) annotation (
            Line(points={{-96,82},{-96,98.91},{-80.14,98.91}},        color = {127, 0, 0}, thickness = 0.5));
          connect(Rrain.q_out, power1.q_in) annotation (
            Line(points = {{-236, 17}, {-254, 17}, {-254, 26}}, color = {127, 0, 0}, thickness = 0.5));
          connect(power1.q_out, RightAtrium.q_in[2]) annotation (
            Line(points={{-254,46},{-254,58.91},{-228.14,58.91}},        color = {127, 0, 0}, thickness = 0.5));
          connect(power.power, feedback.u1) annotation (
            Line(points = {{-108, 72}, {-276, 72}, {-276, -56}, {-262, -56}}, color = {0, 0, 127}));
          connect(power1.power, feedback.u2) annotation (
            Line(points = {{-266, 36}, {-268, 36}, {-268, -30}, {-254, -30}, {-254, -48}}, color = {0, 0, 127}));
          connect(feedback.y, rightHeartPower.u) annotation (
            Line(points = {{-245, -56}, {-216, -56}}, color = {0, 0, 127}));
          connect(Rlain.q_out, power2.q_in) annotation (
            Line(points = {{56, 98}, {70, 98}, {70, 92}}, color = {127, 0, 0}, thickness = 0.5));
          connect(power2.q_out, LeftAtrium.q_in[2]) annotation (
            Line(points={{70,72},{70,64.91},{87.86,64.91}},        color = {127, 0, 0}, thickness = 0.5));
          connect(AorticValve.q_out, power3.q_in) annotation (
            Line(points = {{208, 64}, {224, 64}, {224, 48}}, color = {127, 0, 0}, thickness = 0.5));
          connect(power3.q_out, Eitha.q_in[3]) annotation (
            Line(points={{224,28},{224,17.3575},{178.89,17.3575}},      color = {127, 0, 0}, thickness = 0.5));
          connect(feedback1.y, leftHeartPower.u) annotation (
            Line(points = {{155, -100}, {184, -100}}, color = {0, 0, 127}));
          connect(power3.power, feedback1.u1) annotation (
            Line(points = {{236, 38}, {244, 38}, {244, -84}, {130, -84}, {130, -100}, {138, -100}}, color = {0, 0, 127}));
          connect(power2.power, feedback1.u2) annotation (
            Line(points = {{82, 82}, {106, 82}, {106, -8}, {118, -8}, {118, -124}, {146, -124}, {146, -108}}, color = {0, 0, 127}));
          connect(Eitha.q_in[4],arterialPressure.port)  annotation (
            Line(points={{178.89,18.0725},{178.89,-66},{208,-66}},       color = {127, 0, 0}, thickness = 0.5));
          annotation (
            Diagram(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false)),
            Icon(coordinateSystem(extent = {{-280, -140}, {280, 180}}, preserveAspectRatio = false), graphics),
            Documentation(info = "<html>
        <p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
        <ul>
        <li>J. A. Goodwin, W. L. van Meurs, C. D. Sa Couto, J. E. W.Beneken, S. A. Graves, A model for educational simulation of infant cardiovascular physiology., Anesthesia and analgesia 99 (6)(2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</li>
        <li>C. D. Sa Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen,A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</li>
        <li>W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</li>
        </ul>
        </html>", revisions = "<html>
        <ul>
        <li><i>Jul 2015 </i>by Tomas Kulhanek: Created. </li>
        </ul>
        </html>"),
            experiment(StopTime = 10, __Dymola_Algorithm = "Dassl"));
        end HemodynamicsMeurs_flatNorm;
        annotation (
          Documentation(info = "<html>
	</html>"));
      end MeursModel2011;

      package Dialysis
        extends Modelica.Icons.ExamplesPackage;

        model DialysisMembrane
          import Physiolibrary;

          replaceable package BloodPlasma = Physiolibrary.Media.BodyFluid constrainedby
            Physiolibrary.Media.BodyFluid                                                                             "Medium model of blood plasma" annotation (
             choicesAllMatching = true);
          replaceable package Dialysate = Physiolibrary.Media.BodyFluid constrainedby
            Physiolibrary.Media.BodyFluid                                                                           "Medium model of dialysate" annotation (
             choicesAllMatching = true);
          parameter Physiolibrary.Types.HydraulicCompliance Compliance=7.5006157584566e-09   "Hydraulic compliance";
          parameter Physiolibrary.Types.HydraulicResistance Resistance=10*15998686.4898     "Hydraulic resistance";
          parameter Physiolibrary.Types.Permeability Permeabilities[BloodPlasma.nS]={1e-06,
              1e-06,1e-06,1e-06,1e-06,1e-06,1e-06,1e-06,0,0,0,1e-06}                                                                                           "Membrane permeability coeficients for {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others,H2O}";
          parameter Modelica.Units.SI.MassFraction InitialPlasma[BloodPlasma.nS - 1](
              displayUnit="%")={0.0031,0.0015,0.0002,0.0009,0.0018,0.0038,6e-05,1.2e-05,
            0.047,0.053,1e-11}                                                                                                                                                                       "Initial blood plasma substances mass fractions {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others,H2O}" annotation (
            Dialog(group = "Initialization"));
          //concentrations: { 135,24,5,5,30,105,1.5,0.5,0.7,0.8,1e-06} mmmol/L
          parameter Modelica.Units.SI.MassFraction InitialDialysate[Dialysate.nS - 1](
              displayUnit="%")={0.0032,0.002,0.00012,0.0009,1e-11,0.004,6e-05,1.2e-05,1e-08,
            1e-08,0.00028}                                                                                                                                                                            "Initial dialysate substances mass fractions {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others,H2O}" annotation (
            Dialog(group = "Initialization"));
          //concantrations: {138,32,3,5,1e-06,111,1e-06,1e-06,1e-06,1e-06,1e-06} mmol/L
          parameter Modelica.Units.SI.Pressure InitialBloodPressure(displayUnit="mmHg")
            =0                                                                                "Initial relative blood pressure" annotation (
            Dialog(group = "Initialization"));
          parameter Modelica.Units.SI.Pressure InitialDialysatePressure(displayUnit="mmHg")
            =0                                                                                    "Initial relative dialysate pressure" annotation (
            Dialog(group = "Initialization"));
          Physiolibrary.Fluid.Components.Resistor blood_pipe(redeclare package Medium =
              BloodPlasma,                                                                            Resistance(displayUnit = "(mmHg.min)/l") = Resistance) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-94, -58})));
          Physiolibrary.Fluid.Components.Resistor dialysatePipe(redeclare
              package
              Medium =                                                                     Dialysate, Resistance = Resistance) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {94, 48})));
          Physiolibrary.Fluid.Interfaces.FluidPort_a blood_in(redeclare package
                                                                                Medium =
              BloodPlasma)                                                                            annotation (
            Placement(transformation(extent = {{-70, -110}, {-50, -90}})));
          Physiolibrary.Fluid.Interfaces.FluidPort_b blood_out(redeclare
              package                                                            Medium =
              BloodPlasma)                                                                             annotation (
            Placement(transformation(extent = {{-70, 110}, {-50, 90}})));
          Physiolibrary.Fluid.Interfaces.FluidPort_a dialysate_in(redeclare
              package
              Medium =                                                                       Dialysate)
                                                                                                        annotation (
            Placement(transformation(extent = {{50, 110}, {70, 90}})));
          Physiolibrary.Fluid.Interfaces.FluidPort_b dialysate_out(redeclare
              package
              Medium =                                                                        Dialysate)
                                                                                                         annotation (
            Placement(transformation(extent = {{50, -110}, {70, -90}})));
          Physiolibrary.Fluid.Components.ElasticVessel bloodVessel(redeclare
              package
              Medium =
              BloodPlasma,                                                                                 useSubstances = true, volume_start = InitialBloodPressure * Compliance, massFractions_start = InitialPlasma,  Compliance(displayUnit = "ml/mmHg") = Compliance, ZeroPressureVolume(displayUnit = "m3"), nPorts = 2) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-68, -4})));
          Physiolibrary.Fluid.Components.ElasticVessel dialysateVessel(redeclare
              package Medium =                                                                    Dialysate, useSubstances = true, onElectricGround = true, volume_start = InitialDialysatePressure * Compliance, massFractions_start = InitialDialysate,  Compliance(displayUnit = "ml/mmHg") = Compliance, nPorts = 2) annotation (
            Placement(transformation(extent = {{66, -14}, {86, 6}})));

          Physiolibrary.Fluid.Components.BodyFluidMembrane bodyFluidMembrane(
            redeclare package BloodPlasma = BloodPlasma,
            redeclare package Dialysate = Dialysate,
            Permeabilities=Permeabilities) annotation (Placement(transformation(extent={{-6,-14},{14,6}})));
        equation
          connect(blood_pipe.q_in, blood_in) annotation (
            Line(points = {{-94, -68}, {-94, -100}, {-60, -100}}, color = {127, 0, 0}, thickness = 0.5));
          connect(blood_pipe.q_out, bloodVessel.q_in[1]) annotation (
            Line(points={{-94,-48},{-94,-3.35},{-67.9,-3.35}},      color = {127, 0, 0}, thickness = 0.5));
          connect(dialysatePipe.q_in, dialysate_in) annotation (
            Line(points = {{94, 58}, {94, 100}, {60, 100}}, color = {127, 0, 0}, thickness = 0.5));
          connect(dialysatePipe.q_out, dialysateVessel.q_in[1]) annotation (
            Line(points={{94,38},{94,-2},{75.9,-2},{75.9,-4.65}},         color = {127, 0, 0}, thickness = 0.5));
          connect(blood_out, bloodVessel.q_in[2]) annotation (
            Line(points={{-60,100},{-94,100},{-94,-4.65},{-67.9,-4.65}},        color = {127, 0, 0}, thickness = 0.5));
          connect(dialysate_out, dialysateVessel.q_in[2]) annotation (
            Line(points={{60,-100},{94,-100},{94,-3.35},{75.9,-3.35}},        color = {127, 0, 0}, thickness = 0.5));

          connect(bloodVessel.substances, bodyFluidMembrane.bodyFluid_a) annotation (Line(
              points={{-58,-4},{-6,-4}},
              color={0,0,255},
              thickness=0.5));
          connect(bodyFluidMembrane.bodyFluid_b, dialysateVessel.substances) annotation (Line(
              points={{14,-4},{66,-4}},
              color={0,0,255},
              thickness=0.5));
          annotation (
            Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Rectangle(extent = {{-100, 100}, {0, -100}}, lineColor = {255, 255, 0}, fillColor = {238, 46, 47}, fillPattern = FillPattern.VerticalCylinder), Rectangle(extent = {{0, 100}, {100, -100}}, lineColor = {255, 255, 0}, fillPattern = FillPattern.VerticalCylinder, fillColor = {28, 108, 200})}),
            Diagram(coordinateSystem(preserveAspectRatio = false)));
        end DialysisMembrane;

        model Dialysis
          extends Modelica.Icons.Example;
          replaceable package BloodPlasma = Physiolibrary.Media.BodyFluid "Medium model of blood plasma" annotation (
            choicesAllMatching = true);
          replaceable package Dialysate = Physiolibrary.Media.BodyFluid "Medium model of dialysate" annotation (
            choicesAllMatching = true);
          parameter Integer N = 5 "Number of parts";
          parameter Modelica.Units.SI.MassFraction PlasmaSubstances[BloodPlasma.nS - 1](each displayUnit = "%") = {0.00310, 0.00146, 0.0002, 0.0009, 0.0018, 0.00376, 6e-05, 1e-05, 0.04655, 0.0532, 1e-11} "Mass fractions of {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others} in inflowing blood plasma";
          //{135,24,5,5,30,106,1.5,0.5,0.7,0.8,1e-6};
          parameter Modelica.Units.SI.MassFraction DialysateSubstances[Dialysate.nS - 1](each displayUnit = "%") = {0.00317, 0.00195, 0.000117, 0.0009, 6e-11, 0.004, 6e-05, 1e-05, 6e-08, 6e-08, 0.000281} "Mass fractions of {Na,HCO3-,K,Glu,Urea,Cl,Ca,Mg,Alb,Glb,Others} in inflowing dialysate";
          /*{138,32,3,5,1e-6,113,1.5,0.5,1e-6,1e-6,15.6};*/
          parameter Modelica.Units.SI.Pressure InitialBloodPressure = 2399.80297347 "Initial blood pressure";
          parameter Modelica.Units.SI.Pressure InitialDialysatePressure = 2000 + 7866.020857485 "Initial dialysate pressure";
          Physiolibrary.Fluid.Examples.Dialysis.DialysisMembrane dialysis[N](each InitialPlasma = PlasmaSubstances, each InitialDialysate = DialysateSubstances, InitialBloodPressure = {i * InitialBloodPressure / (N + 1) for i in 1:N}, InitialDialysatePressure = {(N - i + 1) * InitialDialysatePressure / (N + 1) for i in 1:N}, each Permeabilities = {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1} * 1e-7, redeclare
              package BloodPlasma =
              BloodPlasma,                                                                                                                                                                                                        redeclare
              package Dialysate =                                                                                                                                                                                                       Dialysate)
                                                                                                                                                                                                                  annotation (
            Placement(transformation(extent = {{16, -18}, {36, 2}})));
          inner Modelica.Fluid.System system(T_ambient = 310.15) annotation (
            Placement(transformation(extent = {{-92, -6}, {-72, 14}})));
          Modelica.Blocks.Sources.Sine sine_blood_pressure_input(f(displayUnit = "1/min") = 0.16666666666667, amplitude = 600, offset = InitialBloodPressure + 101325) annotation (
            Placement(transformation(extent = {{-50, -76}, {-30, -56}})));
          Modelica.Blocks.Sources.Sine sine_dialysate_pressure_input(f(displayUnit = "1/min") = 0.41666666666667, amplitude = 2000, offset = InitialDialysatePressure + 101325) annotation (
            Placement(transformation(extent = {{94, 60}, {74, 80}})));
          Physiolibrary.Fluid.Sources.PressureSource blood_output(redeclare
              package Medium =
              BloodPlasma)                                                                                annotation (
            Placement(transformation(extent = {{-74, 60}, {-54, 80}})));
          Physiolibrary.Fluid.Sources.PressureSource blood_input(redeclare
              package Medium =
              BloodPlasma,                                                                               usePressureInput = true, massFractions_start = PlasmaSubstances) annotation (
            Placement(transformation(extent = {{-16, -84}, {4, -64}})));
          Sources.PressureSource dialysate_input(redeclare package Medium = Dialysate, usePressureInput = true, massFractions_start = DialysateSubstances) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {48, 70})));
          Physiolibrary.Fluid.Sources.PressureSource dialysate_output(redeclare
              package Medium =                                                                   Dialysate)
                                                                                                            annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {86, -74})));
          Physiolibrary.Fluid.Components.Resistor resistorB(redeclare package
              Medium =
              BloodPlasma,                                                                          EnthalpyNotUsed = true, Resistance = 15998686.4898) annotation (
            Placement(transformation(extent = {{-26, 60}, {-6, 80}})));
          Physiolibrary.Fluid.Components.Resistor resistorD(redeclare package
              Medium =                                                                 Dialysate, Resistance = 15998686.4898) annotation (
            Placement(transformation(extent = {{40, -84}, {60, -64}})));
          Sensors.MassFractions Urea_bloodOut(redeclare package Medium =
              BloodPlasma,                                                            substanceName = "Urea") annotation (
            Placement(transformation(extent = {{-36, 18}, {-16, 38}})));
          Sensors.MassFractions Urea_dialysateOut(redeclare package Medium =
              BloodPlasma,                                                                substanceName = "Urea") annotation (
            Placement(transformation(extent = {{64, -24}, {84, -4}})));
          Sensors.MassFractions Urea_bloodIn(redeclare package Medium =
              BloodPlasma,                                                           substanceName = "Urea") annotation (
            Placement(transformation(extent = {{-34, -36}, {-14, -16}})));
        equation
          for i in 1:N - 1 loop
            connect(dialysis[i].blood_out, dialysis[i + 1].blood_in);
          end for;
          for i in 1:N - 1 loop
            connect(dialysis[i + 1].dialysate_out, dialysis[i].dialysate_in);
          end for;
          connect(blood_input.y, dialysis[1].blood_in) annotation (
            Line(points = {{4, -74}, {20, -74}, {20, -18}}, color = {127, 0, 0}, thickness = 0.5));
          connect(sine_blood_pressure_input.y, blood_input.pressure) annotation (
            Line(points = {{-29, -66}, {-24, -66}, {-24, -74}, {-16, -74}}, color = {0, 0, 127}));
          connect(dialysate_input.y, dialysis[N].dialysate_in) annotation (
            Line(points = {{38, 70}, {32, 70}, {32, 2}}, color = {127, 0, 0}, thickness = 0.5));
          connect(sine_dialysate_pressure_input.y, dialysate_input.pressure) annotation (
            Line(points = {{73, 70}, {58, 70}}, color = {0, 0, 127}));
          connect(resistorB.q_out, dialysis[N].blood_out) annotation (
            Line(points = {{-6, 70}, {20, 70}, {20, 2}}, color = {127, 0, 0}, thickness = 0.5));
          connect(resistorB.q_in, blood_output.y) annotation (
            Line(points = {{-26, 70}, {-54, 70}}, color = {127, 0, 0}, thickness = 0.5));
          connect(resistorD.q_in, dialysis[1].dialysate_out) annotation (
            Line(points = {{40, -74}, {32, -74}, {32, -18}}, color = {127, 0, 0}, thickness = 0.5));
          connect(resistorD.q_out, dialysate_output.y) annotation (
            Line(points = {{60, -74}, {76, -74}}, color = {127, 0, 0}, thickness = 0.5));
          connect(dialysis[N].blood_out, Urea_bloodOut.port) annotation (
            Line(points = {{20, 2}, {20, 12}, {-26, 12}, {-26, 18}}, color = {127, 0, 0}, thickness = 0.5));
          connect(dialysis[1].dialysate_out, Urea_dialysateOut.port) annotation (
            Line(points = {{32, -18}, {32, -30}, {74, -30}, {74, -24}}, color = {127, 0, 0}, thickness = 0.5));
          connect(blood_input.y, Urea_bloodIn.port) annotation (
            Line(points = {{4, -74}, {20, -74}, {20, -36}, {-24, -36}}, color = {127, 0, 0}, thickness = 0.5));
          annotation (
            Icon(coordinateSystem(preserveAspectRatio = false)),
            Diagram(coordinateSystem(preserveAspectRatio = false)),
            experiment(StopTime = 30, Tolerance = 1e-05, __Dymola_Algorithm = "Dassl"));
        end Dialysis;
      end Dialysis;

      model AirWaterSaturation "Human respiration model"
        extends Modelica.Icons.Example;
        import Modelica.Units.SI.*;
        replaceable package Air = Media.Air;
        parameter Physiolibrary.Types.HydraulicResistance TotalResistance = 147099.75 "Total lungs pathways resistance";
        parameter Real BronchiResistanceFraction = 0.3;
        parameter Real AlveoliDuctResistanceFraction = 0.2;
        parameter Real TracheaResistanceFraction = 1 - (BronchiResistanceFraction + AlveoliDuctResistanceFraction) / 2;
        parameter Physiolibrary.Types.HydraulicResistance TracheaResistance = TotalResistance * TracheaResistanceFraction "Left Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicCompliance TotalCompliance(displayUnit = "l/cmH2O") = 1.0197162129779e-06 "Total lungs compliance";
        Chemical.Components.GasSolubility evaporation(KC=1e-7)
        annotation (Placement(transformation(extent={{-362,-48},{-342,-28}})));
        parameter Temperature CoreTemperature = 310.15 "body temperature";
        parameter Temperature EnvironmentTemperature = 298.15 "external air temperature";

        inner Modelica.Fluid.System system(T_ambient = CoreTemperature) "Human body system setting" annotation (
          Placement(transformation(extent = {{60, 66}, {80, 86}})));

        Physiolibrary.Fluid.Sources.PressureSource environment(redeclare
            package
            Medium =                                                                      Air, temperature_start = EnvironmentTemperature) "External environment" annotation (
          Placement(transformation(extent = {{-360, 78}, {-340, 98}})));
        Physiolibrary.Fluid.Sensors.FlowMeasure flowMeasure(redeclare package
            Medium =                                                                   Air) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-318, 66})));
        Physiolibrary.Fluid.Components.ElasticVessel upperRespiratoryTract(redeclare
            package Medium =                                                                          Air, useSubstances = true,
          volume_start=0.0001,                                                                                                                          massFractions_start = Air.reference_X[1:Air.nS - 1], useThermalPort = true, Compliance = TotalCompliance / 100, ZeroPressureVolume(displayUnit = "ml") = 0.0001,                                      ResidualVolume(displayUnit = "ml") = 0.0001, nPorts = 3) annotation (
          Placement(transformation(extent = {{-328, -10}, {-308, 10}})));
        Physiolibrary.Fluid.Components.Resistor upperRespiratoryTractResistance(redeclare
            package Medium =                                                                               Air,  Resistance = 0.5 * TracheaResistance) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin={-318,34})));
        Chemical.Sources.PureSubstance water(redeclare package stateOfMatter =
            Chemical.Interfaces.Incompressible,                                                                    substanceData = Chemical.Substances.Water_liquid()) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-314, -68})));
        Physiolibrary.Fluid.Sensors.PartialPressure pH2O_upperRespiratory(redeclare
            package stateOfMatter =
            Chemical.Interfaces.IdealGas,                                                                                                 substanceData = Chemical.Substances.Water_gas(), redeclare
            package Medium =                                                                                                                                                                                          Air) annotation (
          Placement(transformation(extent = {{-364, 34}, {-344, 14}})));
        Physiolibrary.Fluid.Sensors.Temperature Temperature_upperRespiratory(redeclare
            package Medium =                                                                            Air) annotation (
          Placement(transformation(extent = {{-298, 30}, {-278, 50}})));
        Physiolibrary.Fluid.Sensors.Temperature Temperature_mouth(redeclare
            package Medium =                                                                 Air) annotation (
          Placement(transformation(extent = {{-296, 72}, {-276, 92}})));
        Physiolibrary.Thermal.Components.Conductor cooling(Conductance(
            displayUnit="W/K") = 10)
        annotation (Placement(transformation(extent={{-302,-44},{-322,-24}})));
        Physiolibrary.Thermal.Sources.UnlimitedHeat coreHeat(T = system.T_ambient) annotation (
          Placement(transformation(extent = {{-274, -44}, {-294, -24}})));
      equation
        connect(environment.y, flowMeasure.q_in) annotation (
          Line(points = {{-340, 88}, {-318, 88}, {-318, 76}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, upperRespiratoryTractResistance.q_out) annotation (
          Line(points={{-318,56},{-318,44}},      color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTractResistance.q_in, upperRespiratoryTract.q_in[1]) annotation (
          Line(points={{-318,24},{-318,-0.866667},{-318.1,-0.866667}},    color = {127, 0, 0}, thickness = 0.5));
      connect(water.port_a, evaporation.liquid_port) annotation (Line(points={{
              -324,-68},{-352,-68},{-352,-48}}, color={158,66,200}));
        connect(pH2O_upperRespiratory.port, upperRespiratoryTract.q_in[2])
          annotation (Line(
            points={{-354,34},{-354,48},{-330,48},{-330,14},{-318.1,14},{-318.1,
                1.11022e-16}},
            color={127,0,0},
            thickness=0.5));
      connect(cooling.q_out, upperRespiratoryTract.heatPort) annotation (Line(
          points={{-322,-34},{-324,-34},{-324,-10}},
          color={191,0,0},
          thickness=0.5));
      connect(coreHeat.port, cooling.q_in) annotation (Line(
          points={{-294,-34},{-302,-34}},
          color={191,0,0},
          thickness=0.5));
        connect(flowMeasure.q_in, Temperature_mouth.port) annotation (
          Line(points = {{-318, 76}, {-318, 82}, {-298, 82}, {-298, 72}, {-286, 72}}, color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTract.q_in[3], Temperature_upperRespiratory.port) annotation (
          Line(points={{-318.1,0.866667},{-318.1,10},{-318,10},{-318,8},{-288,8},{-288,
                30}},                                                                                     color = {127, 0, 0}, thickness = 0.5));
        connect(pH2O_upperRespiratory.port_a, upperRespiratoryTract.substances.H2O) annotation (
          Line(points = {{-344, 24}, {-334, 24}, {-334, 0}, {-328, 0}}, color = {158, 66, 200}));
      connect(evaporation.gas_port, upperRespiratoryTract.substances.H2O)
        annotation (Line(points={{-352,-28},{-352,0},{-328,0}}, color={158,66,
              200}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-360, -100}, {100, 100}})),
          experiment(StopTime = 200, __Dymola_Algorithm = "Dassl"),
          Documentation(info = "<html>
<p>References:</p>
<p><br>Mecklenburgh, J. S., and W. W. Mapleson. &quot;Ventilatory assistance and respiratory muscle activity. 1: Interaction in healthy volunteers.&quot; <i>British journal of anaesthesia</i> 80.4 (1998): 422-433.</p>
</html>"));
      end AirWaterSaturation;

      model BloodGasesEquilibrium
        extends Modelica.Icons.Example;
        import Modelica.Units.SI.*;
        replaceable package Air = Chemical.Media.SimpleAir_C;
        //Chemical.Media.Air_MixtureGasNasa;
        replaceable package Blood = Physiolibrary.Media.Blood;
        inner Modelica.Fluid.System system(T_ambient = 310.15) "Human body system setting" annotation (
          Placement(transformation(extent = {{60, 66}, {80, 86}})));
        Physiolibrary.Fluid.Components.ElasticVessel blood(redeclare package
            Medium =                                                                  Blood,
          Compliance(displayUnit="ml/mmHg") = 7.5006157584566e-09,                                            massFractions_start = Blood.ArterialDefault, mass_start = 1, nPorts=3,   useSubstances = true, use_mass_start = true) annotation (
          Placement(transformation(extent={{-6,-52},{14,-32}})));

        // massFractions_start=zeros(Blood.nS - 1),
        // massPartition_start=zeros(Blood.nS),
        // amountPartition_start=zeros(Blood.nS),
        Chemical.Components.GasSolubility O2_GasSolubility(KC = 1e-6) annotation (
          Placement(transformation(extent = {{-58, -20}, {-38, 0}})));
        Chemical.Components.GasSolubility CO2_GasSolubility(KC = 1e-6) annotation (
          Placement(transformation(extent = {{-40, -20}, {-20, 0}})));
        Chemical.Components.GasSolubility CO_GasSolubility(KC = 1e-7) annotation (
          Placement(transformation(extent = {{-22, -20}, {-2, 0}})));
        Chemical.Sources.ExternalIdealGasSubstance O2(substanceData = Chemical.Substances.Oxygen_gas(), usePartialPressureInput = false, PartialPressure(displayUnit = "mmHg") = 133.322387415) annotation (
          Placement(transformation(extent={{-96,16},{-76,36}})));
        Chemical.Sources.ExternalIdealGasSubstance CO2(substanceData = Chemical.Substances.CarbonDioxide_gas(), PartialPressure(displayUnit = "mmHg") = 5332.8954966) annotation (
          Placement(transformation(extent = {{-70, 52}, {-50, 72}})));
        Chemical.Sources.ExternalIdealGasSubstance CO(substanceData = Chemical.Substances.CarbonMonoxide_gas(), PartialPressure(displayUnit = "mmHg") = 0.000133322387415) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {28, 34})));
        Sensors.pH pH(redeclare package Medium = Media.Blood) "Acidity of blood"
          annotation (Placement(transformation(extent={{54,-74},{74,-54}})));
        Sensors.PartialPressure pO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.Oxygen_gas(),
          redeclare package Medium = Media.Blood) "Partial pressure of O2 in blood"
          annotation (Placement(transformation(extent={{-78,-70},{-58,-50}})));
        Sensors.Fraction sO2(redeclare package Medium =
              Physiolibrary.Media.Blood,
                             redeclare function GetFraction =
              Physiolibrary.Media.Blood.sO2)
          annotation (Placement(transformation(extent={{44,-20},{64,0}})));
      equation
        connect(O2.port_a, O2_GasSolubility.gas_port) annotation (
          Line(points={{-76,26},{-48,26},{-48,0}},        color = {158, 66, 200}));
        connect(CO2.port_a, CO2_GasSolubility.gas_port) annotation (
          Line(points = {{-50, 62}, {-30, 62}, {-30, 0}}, color = {158, 66, 200}));
        connect(CO.port_a, CO_GasSolubility.gas_port) annotation (
          Line(points = {{18, 34}, {-12, 34}, {-12, 0}}, color = {158, 66, 200}));
        connect(pH.port, blood.q_in[1]) annotation (Line(
            points={{64,-74},{64,-78},{6,-78},{6,-46},{3.9,-46},{3.9,-42.8667}},
            color={127,0,0},
            thickness=0.5));

        connect(pO2.port, blood.q_in[2]) annotation (Line(
            points={{-68,-70},{-32,-70},{-32,-60},{4,-60},{4,-46},{3.9,-46},{3.9,
                -42}},
            color={127,0,0},
            thickness=0.5));
        connect(CO2_GasSolubility.liquid_port, blood.substances.CO2) annotation (
          Line(points={{-30,-20},{-30,-42},{-6,-42}},        color = {158, 66, 200}));
        connect(pO2.port_a, blood.substances.O2) annotation (
          Line(points={{-58,-60},{-34,-60},{-34,-42},{-6,-42}},          color = {158, 66, 200}));
        connect(O2_GasSolubility.liquid_port, blood.substances.O2) annotation (
          Line(points={{-48,-20},{-46,-20},{-46,-42},{-6,-42}},          color = {158, 66, 200}));
        connect(CO_GasSolubility.liquid_port, blood.substances.CO) annotation (
          Line(points={{-12,-20},{-12,-42},{-6,-42}},        color = {158, 66, 200}));
        connect(pH.port_a, blood.substances.H) annotation (
          Line(points={{74,-64},{82,-64},{82,-28},{-22,-28},{-22,-42},{-6,-42}},              color = {158, 66, 200}));
        connect(blood.q_in[3], sO2.port) annotation (Line(
            points={{3.9,-41.1333},{54,-41.1333},{54,-20}},
            color={127,0,0},
            thickness=0.5));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          experiment(StopTime = 1, __Dymola_fixedstepsize = 0.1, __Dymola_Algorithm = "Dassl"),
          Documentation(info = "<html>
<p>References:</p>
<p><br>Mecklenburgh, J. S., and W. W. Mapleson. &quot;Ventilatory assistance and respiratory muscle activity. 1: Interaction in healthy volunteers.&quot; <i>British journal of anaesthesia</i> 80.4 (1998): 422-433.</p>
</html>"));
      end BloodGasesEquilibrium;

      model MinimalRespiration "Minimal respiration model"
        extends Modelica.Icons.Example;
        import Modelica.Units.SI.*;
        replaceable package Air = Media.Air;
        parameter Frequency RespirationRate = 0.2 "Respiration rate";
        parameter Volume ResidualVolume = 0.0013 "Lungs residual volume";
        parameter Volume FunctionalResidualCapacity = 0.00231 "Functional residual capacity";
        parameter Physiolibrary.Types.HydraulicResistance TotalResistance = 147099.75 "Total lungs pathways conductance";
        parameter Physiolibrary.Types.HydraulicCompliance TotalCompliance(displayUnit = "ml/mmHg") = 6.0004926067653e-07 "Total lungs compliance";
        parameter Pressure Pmin(displayUnit = "kPa") = -1000 "Relative external lungs pressure minimum caused by respiratory muscles";
        parameter Pressure Pmax(displayUnit = "kPa") = 0 "Relative external lungs pressure maximum";
        parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {4 / 8, (Pmin + Pmax) / 2, (Pmax - Pmin) * 5}, {6 / 8, Pmax - (Pmax - Pmin) / 16, (Pmax - Pmin) * 0.5}, {1, Pmax, 0}} "External lungs pressure during respiration cycle scaled to time period (0,1)";
        parameter Volume LungsAirVolume_initial = FunctionalResidualCapacity;
        Blocks.Source.PeriodicCurveSource respiratoryMusclePressureCycle(data = RespiratoryMusclePressureCycle) "Relative position in respiratory cycle (0,1) to absolute external lungs pressure" annotation (
          Placement(transformation(extent = {{18, 8}, {38, 28}})));
        Physiolibrary.Fluid.Components.ElasticVessel lungs(redeclare package
            Medium = Air, use_mass_start = false,
            volume_start = LungsAirVolume_initial,
            massFractions_start = Air.reference_X, ZeroPressureVolume = FunctionalResidualCapacity, Compliance = TotalCompliance, useExternalPressureInput = true, nPorts = 2) "Lungs" annotation (
          Placement(transformation(extent = {{36, -28}, {56, -8}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure lungsPressureMeasure(redeclare
            package Medium =                                                                        Air) "Lungs pressure" annotation (
          Placement(transformation(extent = {{70, -20}, {90, 0}})));
        inner Modelica.Fluid.System system(T_ambient = 310.15) "Human body system setting" annotation (
          Placement(transformation(extent = {{-76, 8}, {-56, 28}})));
        Physiolibrary.Fluid.Sources.PressureSource environment(redeclare
            package
            Medium =                                                                      Air) "External environment" annotation (
          Placement(transformation(extent = {{-76, -30}, {-56, -10}})));
        Components.Resistor resistor(redeclare package Medium = Air,  Resistance = TotalResistance) annotation (
          Placement(transformation(extent = {{-6, -30}, {14, -10}})));
        Types.Constants.FrequencyConst frequency(k = RespirationRate) annotation (
          Placement(transformation(extent = {{-12, 14}, {-4, 22}})));
        Sensors.FlowMeasure flowMeasure(redeclare package Medium = Air) annotation (
          Placement(transformation(extent = {{-40, -30}, {-20, -10}})));
      equation
        connect(lungsPressureMeasure.port, lungs.q_in[1]) annotation (
          Line(points={{80,-20},{80,-18.65},{45.9,-18.65}},      color = {127, 0, 0}, thickness = 0.5));
        connect(resistor.q_out, lungs.q_in[2]) annotation (
          Line(points={{14,-20},{28,-20},{28,-17.35},{45.9,-17.35}},        color = {127, 0, 0}, thickness = 0.5));
        connect(frequency.y, respiratoryMusclePressureCycle.frequence) annotation (
          Line(points = {{-3, 18}, {18, 18}}, color = {0, 0, 127}));
        connect(respiratoryMusclePressureCycle.val, lungs.externalPressure) annotation (
          Line(points={{38,18},{53,18},{53,-9}},        color = {0, 0, 127}));
        connect(environment.y, flowMeasure.q_in) annotation (
          Line(points = {{-56, -20}, {-40, -20}}, color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, resistor.q_in) annotation (
          Line(points = {{-20, -20}, {-6, -20}}, color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          experiment(StopTime = 16),
          Documentation(info = "<html>
        <p>References:</p>
        <p><br>Mecklenburgh, J. S., and W. W. Mapleson. &quot;Ventilatory assistance and respiratory muscle activity. 1: Interaction in healthy volunteers.&quot; <i>British journal of anaesthesia</i> 80.4 (1998): 422-433.</p>
        </html>"));
      end MinimalRespiration;

      model MeanRespiration "Non-oscilating ventilation model"
        extends Modelica.Icons.Example;
        replaceable package Air = Physiolibrary.Media.Air annotation (
          choicesAllMatching = True);
        parameter Physiolibrary.Types.Frequency RR = 0.286 "Respiration rate";
        parameter Physiolibrary.Types.Volume TV = 0.0005 "Tidal volume";
        parameter Physiolibrary.Types.Volume DV = 0.00015 "Dead space volume";
        parameter Physiolibrary.Types.VolumeFlowRate CO = 9.1666666666667e-05 "Cardiac output";
        parameter Physiolibrary.Types.HydraulicConductance cTotalVentilation = 1.019716212977928e-05 * (1 / 1.5);
        parameter Physiolibrary.Types.Volume alveolarVolume_start = TV - DV + alveolarV0 "initial volume of air in alveoli";
        parameter Physiolibrary.Types.Volume alveolarV0 = 0.0013 "volume of air in alveoli, which does not generate air pressure";
        parameter Physiolibrary.Types.Volume lungCapyVolume_start = 0.00015 "initial volume of blood in alveolar capillaries";
        parameter Physiolibrary.Types.Volume lungCapyV0 = 0.0001 "volume of blood in alveolar capillaries, which does not generate blood pressure";
        parameter Physiolibrary.Types.Volume tissueBloodVolume_start = 0.0003 "initial volume of blood in tissues";
        parameter Physiolibrary.Types.Volume tissueV0 = 0.0002 "volume of blood in tissues, which does not generate blood pressure";
        parameter Types.MolarFlowRate O2_consumption = 1.666666666666667e-05 * (2 * 7.71) "Tissue consumption of O2 by metabolism";
        parameter Types.MolarFlowRate CO2_production = 1.666666666666667e-05 * (2 * 6.17) "Tissue production of CO2 by metabolism";
        parameter Types.HydraulicConductance TotalSystemicConductance = 1.250102626409427e-07 * (1 / 20) "Total systemic blood circulation conductance";
        parameter Integer NA = 1 "Number of pulmonary alveolar units";
        parameter Integer NT = 1 "Number of systemic tissue units";
        Physiolibrary.Fluid.Components.VolumePump deadSpaceVentilation(redeclare
            package Medium =                                                                      Air,
          useSolutionFlowInput=false,                                                                                                SolutionFlow = DV * RR) annotation (
          Placement(transformation(extent = {{-6, 6}, {14, 26}})));
        Physiolibrary.Fluid.Sources.PressureSource pressureSource(redeclare
            package Medium =                                                                 Air) annotation (
          Placement(transformation(extent = {{-90, 6}, {-70, 26}})));
        Physiolibrary.Fluid.Sources.VolumeOutflowSource ventilation(useSolutionFlowInput = false, SolutionFlow = TV * RR, redeclare
            package Medium =                                                                                                                         Air) annotation (
          Placement(transformation(extent = {{70, 6}, {90, 26}})));
        inner Modelica.Fluid.System system(T_ambient = 310.15) annotation (
          Placement(transformation(extent = {{-44, 46}, {-24, 66}})));
        Components.Conductor alveolarVentilation(redeclare package Medium = Air, Conductance(displayUnit = "l/(cmH2O.s)") = cTotalVentilation) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {4, -12})));
      equation
        connect(deadSpaceVentilation.q_out, ventilation.q_in) annotation (
          Line(points = {{14, 16}, {70, 16}}, color = {127, 0, 0}, thickness = 0.5));
        connect(pressureSource.y, deadSpaceVentilation.q_in) annotation (
          Line(points = {{-70, 16}, {-6, 16}}, color = {127, 0, 0}, thickness = 0.5));
        for i in 1:NA loop
        end for;
        for i in 1:NT loop
        end for;
        connect(pressureSource.y, alveolarVentilation.q_in) annotation (
          Line(points = {{-70, 16}, {-50, 16}, {-50, -12}, {-6, -12}}, color = {127, 0, 0}, thickness = 0.5));
        connect(alveolarVentilation.q_out, ventilation.q_in) annotation (
          Line(points = {{14, -12}, {52, -12}, {52, 16}, {70, 16}}, color = {127, 0, 0}, thickness = 0.5));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          experiment(StopTime = 1800, __Dymola_Algorithm = "Dassl"));
      end MeanRespiration;

      package BloodGasesTransport "Transport of O2 and CO2 through respiration and circulation in human body"

        model BloodyMary
          replaceable package Blood =
            Physiolibrary.Media.Blood                                             annotation (
            choicesAllMatching = True);
          replaceable package Air = Physiolibrary.Media.Air annotation (
            choicesAllMatching = True);
          parameter Physiolibrary.Types.Frequency RR=0.286   "Respiration rate";
          parameter Physiolibrary.Types.Volume TV=0.0005   "Tidal volume";
          parameter Physiolibrary.Types.Volume DV=0.00015   "Dead space volume";
          parameter Physiolibrary.Types.VolumeFlowRate CO=9.1666666666667e-05   "Cardiac output";
          parameter Physiolibrary.Types.HydraulicConductance cShunt=1.250102626409427e-07
              *(1/3*0.02);
          parameter Physiolibrary.Types.HydraulicConductance cTotalVentilation=1.019716212977928e-05
              *(1/1.5);
          parameter Physiolibrary.Types.HydraulicConductance cTotalCirculation=1.250102626409427e-07
              *(1/3*(1 - 0.02));
          parameter Physiolibrary.Types.HydraulicCompliance LungsCompliance=6.0004926067653e-07 "Lungs compliance";
          parameter Physiolibrary.Types.Volume ResidualVolume=0.0013 "Lungs residual volume";
          parameter Physiolibrary.Types.Volume TotalCapacity=0.00623 "Lungs total capacity";
          parameter Physiolibrary.Types.Volume BaseTidalVolume=0.0005 "Lungs base tidal volume";
          parameter Physiolibrary.Types.Volume alveolarVolume_start = TV - DV + alveolarV0 "initial volume of air in alveoli";
          parameter Physiolibrary.Types.Volume alveolarV0=0.0013   "volume of air in alveoli, which does not generate air pressure";
          parameter Physiolibrary.Types.Volume lungCapyVolume_start=0.00015   "initial volume of blood in alveolar capillaries";
          parameter Physiolibrary.Types.Volume lungCapyV0=0.0001   "volume of blood in alveolar capillaries, which does not generate blood pressure";
          parameter Physiolibrary.Types.Volume tissueBloodVolume_start=0.0003   "initial volume of blood in tissues";
          parameter Physiolibrary.Types.Volume tissueV0=0.0002   "volume of blood in tissues, which does not generate blood pressure";
          parameter Physiolibrary.Types.HydraulicCompliance CapillariesCompliance=3.0002463033826e-08
                                                                                         "Systemic capillaries compliance";
          parameter Types.MolarFlowRate O2_consumption=1.666666666666667e-05*(2*7.71)
            "Tissue consumption of O2 by metabolism";
          parameter Types.MolarFlowRate CO2_production=1.666666666666667e-05*(2*6.17)
            "Tissue production of CO2 by metabolism";
          parameter Types.HydraulicConductance TotalSystemicConductance=1.250102626409427e-07
              *(1/20) "Total systemic blood circulation conductance";
          parameter Integer NA=1  "Number of pulmonary alveolar units";
          parameter Integer NT=1  "Number of systemic tissue units";
        public
          parameter Types.MassFraction ArterialBloodComposition[Blood.nS] = Blood.ArterialDefault
            "Initial composition of arterial blood";
          parameter Types.MassFraction VenousBloodComposition[Blood.nS] = Blood.VenousDefault
            "Initial composition of venous blood";
          parameter Types.Fraction AirO2=0.21 "O2 content in inspired air";
          parameter Types.Fraction AirCO2=0.0003 "CO2 content in inspired air";
          parameter Types.Fraction AirH2O=0.06 "H2O content in inspired air";
          parameter Types.Fraction AirN2 = 1 - AirO2 - AirCO2 - AirH2O
            "N2 content in inspired air";
          Types.Pressure Air_pO2 = AirO2 * system.p_ambient
            "O2 content in inspired air";
          Types.Pressure Air_pCO2 = AirCO2 * system.p_ambient
            "CO2 content in inspired air";
          Physiolibrary.Fluid.Components.VolumePump deadSpaceVentilation(redeclare
              package Medium =                                                                      Air, useSolutionFlowInput = true, SolutionFlow = DV * RR,
            density(start=1.1300953420756321, displayUnit="g/cm3"),
            q_in(m_flow(start=5.759563136974551E-05)),
            q_out(p(start=101335.86111397855, displayUnit="bar")))                                                                                            annotation (
            Placement(transformation(extent = {{-14, -52}, {6, -32}})));
          Physiolibrary.Fluid.Sources.PressureSource pressureSource(pressure_start(displayUnit = "Pa"), redeclare
              package Medium =                                                                                                     Air,  massFractions_start = Air.X(AirO2, AirCO2, AirH2O, AirN2)) annotation (
            Placement(transformation(extent = {{-96, -52}, {-76, -32}})));
          Physiolibrary.Fluid.Sources.VolumeOutflowSource volumeOutflow(useSolutionFlowInput = true, SolutionFlow = TV * RR, redeclare
              package Medium =                                                                                                                          Air,
            density(start=1.1300953420756321))                                                                                                               annotation (
            Placement(transformation(extent = {{64, -52}, {84, -32}})));
          Physiolibrary.Fluid.Components.VolumePump leftHeartPump(redeclare
              package Medium =                                                               Blood, useSolutionFlowInput = true, SolutionFlow(displayUnit = "l/min") = 8.3333333333333e-05) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {42, -150})));
          Physiolibrary.Fluid.Components.VolumePump rightHeartPump(redeclare
              package Medium =                                                                Blood, useSolutionFlowInput = true, SolutionFlow(displayUnit = "l/min") = 8.3333333333333e-05) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-50, -150})));
          Physiolibrary.Fluid.Components.ElasticVessel pulmonaryArteries(redeclare
              package Medium =                                                                      Blood,  massFractions_start = VenousBloodComposition, volume_start(displayUnit = "l") = 0.00038, Compliance(displayUnit = "ml/mmHg") = 3.6002955640592e-08, ZeroPressureVolume(displayUnit = "l") = 0.0003, nPorts = 4) annotation (
            Placement(transformation(extent = {{-60, -112}, {-40, -92}})));
          Physiolibrary.Fluid.Components.ElasticVessel pulmonaryVeins(redeclare
              package Medium =                                                                   Blood, massFractions_start = ArterialBloodComposition, volume_start(displayUnit = "l") = 0.0004, Compliance(displayUnit = "ml/mmHg") = 7.5006157584566e-08, ZeroPressureVolume(displayUnit = "l") = 0.0004, nPorts = 4) annotation (
            Placement(transformation(extent = {{32, -112}, {52, -92}})));
          Physiolibrary.Fluid.Components.ElasticVessel systemicArteries(redeclare
              package Medium = Blood,
              massFractions_start = ArterialBloodComposition,
              useSubstances = true,
              volume_start(displayUnit = "l") = 0.00085,
              Compliance(displayUnit = "ml/mmHg") = 2.6627185942521e-08,
              ZeroPressureVolume(displayUnit = "l") = 0.00045,
              nPorts = NT+1,
            chemicalSolution(bloodGases(
                cHCO3(start=24.51879571586536, displayUnit="mmol/l"),
                pCO(start=1.0005449962821231E-05, displayUnit="bar"),
                pCO2(start=5345.09227220704, displayUnit="bar"),
                pO2(start=11608.744631309959, displayUnit="bar"),
                sO2CO(start=0.9627613894820818, displayUnit="%"))))                                                                                                                                                                                                         annotation (
            Placement(transformation(extent = {{46, -206}, {26, -186}})));
          Physiolibrary.Fluid.Components.ElasticVessel systemicVeins(redeclare
              package Medium =
                       Blood,
              massFractions_start = VenousBloodComposition,
              useSubstances = true, volume_start(displayUnit = "l") = 0.00325,
              Compliance(displayUnit = "ml/mmHg") = 6.1880080007267e-07,
              ZeroPressureVolume(displayUnit = "l") = 0.00295,
              nPorts = NT+2,
            chemicalSolution(bloodGases(
                cHCO3(start=26.674314102391666, displayUnit="mmol/l"),
                pCO(start=6.3972838566901375E-06, displayUnit="bar"),
                pCO2(start=6930.575174544387, displayUnit="bar"),
                pO2(start=5006.216473490174, displayUnit="bar"),
                sCO(start=1.808984022893137E-07, displayUnit="%"),
                sO2CO(start=0.649370212847236, displayUnit="%"))))                                                                                                                                                                                                         annotation (
            Placement(transformation(extent = {{-60, -206}, {-40, -186}})));
          Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasureVeins(redeclare
              package Medium =                                                                        Blood) annotation (
            Placement(transformation(extent = {{10, -10}, {-10, 10}}, rotation = 0, origin = {-80, -204})));
          Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasurePulmArteries(redeclare
              package Medium =                                                                               Blood) annotation (
            Placement(transformation(extent = {{-60, -108}, {-80, -88}})));
          Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasurePulmVeins(redeclare
              package Medium =                                                                            Blood) annotation (
            Placement(transformation(extent = {{52, -108}, {72, -88}})));
          Types.Constants.VolumeFlowRateConst leftCardiacOutput(k = CO) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {76, -150})));
          Modelica.Blocks.Math.MultiProduct multiProduct1(nu = 2) annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-70, -150})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst hydraulicConductance1(k = 1.250102626409427e-07 * (5 / 4)) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 270, origin = {-80, -132})));
          Physiolibrary.Fluid.Components.Conductor pulmonaryShunt(redeclare
              package Medium =                                                               Blood, Conductance(displayUnit = "l/(cmH2O.s)") = cShunt) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-4, -104})));
        Organs.Lungs.Components.RespiratoryUnit            respiratoryUnit[NA](
          redeclare package Blood = Blood,
          redeclare package Air = Air,
            AirVolume_initial=ones(NA)*(alveolarVolume_start/NA),
            FunctionalResidualCapacity=ones(NA)*(alveolarV0/NA),
            TotalCompliance=ones(NA)*(LungsCompliance/NA),
            ResidualVolume=ones(NA)*(ResidualVolume/NA),
            TotalCapacity=ones(NA)*(TotalCapacity/NA),
            BaseTidalVolume=ones(NA)*(BaseTidalVolume/NA),
            TotalResistance=ones(NA)*(NA/cTotalVentilation),
            CapillariesVolume_initial=ones(NA)*(lungCapyVolume_start/NA),
            Blood_initial=fill(ArterialBloodComposition, NA),
            CapillariesZeroPressureVolume=ones(NA)*(lungCapyV0/NA),
            CapillariesCompliance=fill(CapillariesCompliance/NA, NA),
            CapillariesConductance=ones(NA)*((cTotalCirculation)/(NA*1/8)),
            ArteriesConductance=ones(NA)*((cTotalCirculation)/(NA*7/8)),
                                       each nPorts=2,
            pulmCapysVentilated(chemicalSolution(bloodGases(
                  cHCO3(start=fill(24.518795715865362,NA), each displayUnit="mmol/l"),
                  pCO(start=fill(1.0005449962821248E-05,NA), each  displayUnit="bar"),
                  pCO2(start=fill(5345.092272207041,NA), each  displayUnit="bar"),
                  pO2(start=fill(11608.74463130998,NA), each  displayUnit="bar"),
                  sO2CO(start=fill(0.962761389482082,NA), each  displayUnit="%")))))                                            annotation (
            Placement(transformation(rotation=0, extent={{-22,-96},{10,-64}})));
          Sensors.BloodGasesMeasurement arterial(redeclare package Medium = Blood) annotation (
            Placement(transformation(extent = {{10, -10}, {-10, 10}}, rotation = 270, origin = {54, -176})));
          TissueUnit tissueUnit[NT](
            O2_consumption = fill(O2_consumption / NT, NT),
            CO2_production = fill(CO2_production / NT, NT),
            Conductance = fill(TotalSystemicConductance / NT, NT),
            bloodVolume_start = fill(tissueBloodVolume_start / NT, NT),
            bloodV0 = fill(tissueV0 / NT, NT),
            BloodComposition = fill(VenousBloodComposition, NT),
            Compliance=fill(CapillariesCompliance/NT, NT),       redeclare
              package Blood =  Blood,
            systemicCapillaries(chemicalSolution(bloodGases(
                  cHCO3(start=fill(26.674314102391666,NT), each displayUnit="mmol/l"),
                  pCO(start=fill(6.39728383892192E-06,NT), each displayUnit="bar"),
                  pCO2(start=fill(6930.57517454441,NT), each displayUnit="bar"),
                  pO2(start=fill(5006.216473490139,NT), each displayUnit="bar"),
                  sCO(start=fill(1.8089840228933077E-07,NT), each displayUnit="%"),
                  sO2CO(start=fill(0.6493702128472361,NT), each displayUnit="%")))))
             annotation (
            Placement(transformation(extent = {{-14, -202}, {12, -188}})));
            //,
          /*  systemicCapillaries(chemicalSolution(bloodGases(
          cHCO3(start={26.674314102391666}, each displayUnit="mmol/l"),
          pCO(start={6.39728383892192E-06}, each displayUnit="mmHg"),
          pCO2(start={6930.57517454441}, each displayUnit="mmHg"),
          pO2(start={5006.216473490139}, each displayUnit="mmHg"),
          sCO(start={1.8089840228933077E-07}, each displayUnit="%"),
          sO2CO(start={0.6493702128472361}, each displayUnit="%"))))*/
          RespiratoryCenter respiratoryCenter(DV = DV) annotation (
            Placement(transformation(extent = {{40, 2}, {20, 22}})));
          inner Modelica.Fluid.System system(T_ambient = 310.15) annotation (
            Placement(transformation(extent = {{-66, -2}, {-46, 18}})));
          Sensors.BloodGasesMeasurement venous(redeclare package Medium = Blood) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-66, -176})));
          Types.Constants.PressureConst pressure(k(displayUnit="mmHg") = -533.28954966)
            annotation (Placement(transformation(extent={{-42,-58},{-34,-50}})));
        equation
          connect(deadSpaceVentilation.q_out, volumeOutflow.q_in) annotation (
            Line(points = {{6, -42}, {64, -42}}, color = {127, 0, 0}, thickness = 0.5));
          connect(pressureSource.y, deadSpaceVentilation.q_in) annotation (
            Line(points = {{-76, -42}, {-14, -42}}, color = {127, 0, 0}, thickness = 0.5));
          connect(rightHeartPump.q_out, pulmonaryArteries.q_in[1]) annotation (
            Line(points={{-50,-140},{-50,-116},{-50.1,-116},{-50.1,-102.975}},         color = {127, 0, 0}, thickness = 0.5));
          connect(leftHeartPump.q_in, pulmonaryVeins.q_in[1]) annotation (
            Line(points={{42,-140},{42,-100},{41.9,-100},{41.9,-102.975}},         color = {127, 0, 0}, thickness = 0.5));
          connect(pressureMeasureVeins.port, systemicVeins.q_in[1]) annotation (
            Line(points={{-80,-214},{-50,-214},{-50,-196},{-50.1,-196}},                  color = {127, 0, 0}, thickness = 0.5));
          connect(pressureMeasurePulmArteries.port, pulmonaryArteries.q_in[2]) annotation (
            Line(points={{-70,-108},{-50,-108},{-50,-102.325},{-50.1,-102.325}},        color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryVeins.q_in[2],pressureMeasurePulmVeins.port)  annotation (
            Line(points={{41.9,-102.325},{42,-102.325},{42,-108},{62,-108}},        color = {127, 0, 0}, thickness = 0.5));
          connect(multiProduct1.y, rightHeartPump.solutionFlow) annotation (
            Line(points = {{-62.98, -150}, {-57, -150}}, color = {0, 0, 127}));
          connect(hydraulicConductance1.y, multiProduct1.u[1]) annotation (
            Line(points={{-80,-137},{-80,-148},{-76,-148},{-76,-151.05}},         color = {0, 0, 127}));
          connect(pressureMeasureVeins.pressure, multiProduct1.u[2]) annotation (
            Line(points={{-86,-208},{-94,-208},{-94,-148.95},{-76,-148.95}},        color = {0, 0, 127}));
          connect(pulmonaryShunt.q_in, pulmonaryArteries.q_in[3]) annotation (
            Line(points={{-14,-104},{-50.1,-104},{-50.1,-101.675}},       color = {127, 0, 0}, thickness = 0.5));
          connect(pulmonaryShunt.q_out, pulmonaryVeins.q_in[3]) annotation (
            Line(points={{6,-104},{41.9,-104},{41.9,-101.675}},       color = {127, 0, 0}, thickness = 0.5));
          for i in 1:NA loop
            connect(respiratoryUnit[i].blood_in, pulmonaryArteries.q_in[4]) annotation (
                Line(
                points={{-22,-87.04},{-30,-87.04},{-30,-100},{-50.1,-100},{-50.1,-101.025}},
                color={127,0,0},
                thickness=0.5));
            connect(respiratoryUnit[i].airways[1], pressureSource.y) annotation (Line(
                points={{-6,-64.84},{-64,-64.84},{-64,-42},{-76,-42}},
                color={127,0,0},
                thickness=0.5));
            connect(respiratoryUnit[i].airways[2], volumeOutflow.q_in) annotation (Line(
                points={{-6,-63.48},{34,-63.48},{34,-42},{64,-42}},
                color={127,0,0},
                thickness=0.5));
            connect(respiratoryUnit[i].blood_out, pulmonaryVeins.q_in[4]) annotation (Line(
                points={{10.32,-86.4},{22,-86.4},{22,-98},{42,-98},{42,-101.025},{41.9,-101.025}},
                color={127,0,0},
                thickness=0.5));
            connect(pressure.y, respiratoryUnit[i].thoraxPressure) annotation (Line(
                points={{-33,-54},{-12.56,-54},{-12.56,-67.68}}, color={0,0,127}));
          end for;
          connect(leftHeartPump.solutionFlow, leftCardiacOutput.y) annotation (
            Line(points = {{49, -150}, {71, -150}}, color = {0, 0, 127}));
          for i in 1:NT loop
            connect(tissueUnit[i].q_in, systemicArteries.q_in[i+1]) annotation (
              Line(points={{13.6611,-195.21},{28,-195.21},{28,-196},{36.1,-196},{
                    36.1,-196}},                                                                           color = {127, 0, 0}, thickness = 0.5));
            connect(tissueUnit[i].q_out, systemicVeins.q_in[i+2]) annotation (
              Line(points={{-15.2278,-194.93},{-50.1,-194.93},{-50.1,-196}},        color = {127, 0, 0}, thickness = 0.5));
          end for;
          connect(respiratoryCenter.deadSpaceVentilation, deadSpaceVentilation.solutionFlow) annotation (
            Line(points = {{24, 1.2}, {24, -14}, {-4, -14}, {-4, -35}}, color = {0, 0, 127}));
          connect(respiratoryCenter.ventilation, volumeOutflow.solutionFlow) annotation (
            Line(points = {{29.6, 1.3}, {29.6, -14}, {74, -14}, {74, -35}}, color = {0, 0, 127}));
          connect(arterial.pO2, respiratoryCenter.pO2) annotation (
            Line(points = {{58, -165}, {58, -158}, {88, -158}, {88, 3}, {40.6, 3}}, color = {0, 0, 127}));
          connect(arterial.pCO2, respiratoryCenter.pCO2) annotation (
            Line(points = {{54, -165}, {54, -160}, {90, -160}, {90, 11}, {40.4, 11}}, color = {0, 0, 127}));
          connect(arterial.b_port, leftHeartPump.q_out) annotation (
            Line(points = {{43.8, -169.8}, {42, -169.8}, {42, -160}}, color = {127, 0, 0}, thickness = 0.5));
          connect(arterial.a_port, systemicArteries.q_in[1]) annotation (
            Line(points={{43.8,-182},{40,-182},{40,-196},{36.1,-196}},              color = {127, 0, 0}, thickness = 0.5));
          connect(systemicVeins.q_in[2], venous.a_port) annotation (
            Line(points={{-50.1,-196},{-50.1,-188},{-55.8,-188},{-55.8,-182}},              color = {127, 0, 0}, thickness = 0.5));
          connect(venous.b_port, rightHeartPump.q_in) annotation (
            Line(points = {{-55.8, -169.8}, {-55.8, -164.9}, {-50, -164.9}, {-50, -160}}, color = {127, 0, 0}, thickness = 0.5));

          connect(systemicArteries.substances, arterial.substances)
            annotation (Line(
              points={{46,-196},{54,-196},{54,-186}},
              color={158,66,200},
              thickness=0.5));
          connect(systemicVeins.substances, venous.substances)
            annotation (Line(
              points={{-60,-196},{-66,-196},{-66,-186}},
              color={158,66,200},
              thickness=0.5));
          annotation (
            Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -220}, {100, 40}})),
            Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -220}, {100, 40}})),
            experiment(StopTime = 1800, __Dymola_Algorithm = "Dassl"));
        end BloodyMary;

        model TissueUnit
          extends Physiolibrary.Icons.SystemicCirculation;
          parameter Types.MolarFlowRate O2_consumption = 1.666666666666667e-05 * (2 * 7.71)
            "Tissue consumption of O2 by metabolism";
          parameter Types.MolarFlowRate CO2_production = 1.666666666666667e-05 * (2 * 6.17)
            "Tissue production of CO2 by metabolism";
          parameter Types.HydraulicConductance Conductance = 1.250102626409427e-07 * (1 / 20)
            "Tissue blood flow conductance";
          parameter Types.Fraction ArteriesViensResistanceRatio = 7 / 8
            "Ratio between arteries and veins resistance";
          parameter Types.Volume bloodVolume_start = 0.0003;
          parameter Types.Volume bloodV0 = 0.0002;
          parameter Types.MassFraction BloodComposition[Blood.nS] = Blood.VenousDefault
            "Initial composition of blood in tissue";
          parameter Types.HydraulicCompliance Compliance = 3.0002463033826e-08
            "Compliance of tissue blood vessels";
          Components.Resistor systemicArteriesResistance(redeclare package Medium = Blood, Resistance = 1 / Conductance * ArteriesViensResistanceRatio) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {28, 40})));
          Components.Resistor systemicVeinsResistance(redeclare package Medium = Blood, Resistance = 1 / Conductance * (1 - ArteriesViensResistanceRatio)) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-64, 0})));
          Components.ElasticVessel systemicCapillaries(
               redeclare package Medium = Blood,
               massFractions_start = BloodComposition,
               useSubstances = true,
               volume_start(displayUnit = "l") = bloodVolume_start,
               Compliance(displayUnit = "ml/mmHg") = Compliance,
               ZeroPressureVolume(displayUnit = "l") = bloodV0,
               nPorts = 2) annotation (
            Placement(transformation(extent = {{10, -10}, {-10, 10}}, rotation = 0, origin = {-2, -14})));
          Chemical.Sources.SubstanceOutflow O2_left(SubstanceFlow(displayUnit = "mmol/min") = O2_consumption) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-70, -38})));
          Chemical.Sources.SubstanceInflowT CO2_left(SubstanceFlow(displayUnit = "mmol/min") = CO2_production, redeclare
              package stateOfMatter =
              Chemical.Interfaces.IdealGas,                                                                                                                                    substanceData = Chemical.Substances.CarbonDioxide_gas()) annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {70, -38})));
          Sensors.BloodGasesMeasurement tissue annotation (
            Placement(transformation(extent = {{10, 10}, {-10, -10}}, rotation = 180, origin = {38, -8})));
          replaceable package Blood = Media.Blood                   annotation (
            choicesAllMatching = True);
          Interfaces.FluidPort_a q_in(redeclare package Medium = Blood) annotation (
            Placement(transformation(rotation = 0, extent = {{83, -5}, {96, 6}}), iconTransformation(extent = {{95, -7}, {108, 4}})));
          Interfaces.FluidPort_b q_out(redeclare package Medium = Blood) annotation (
            Placement(transformation(rotation = 0, extent = {{-97, -5}, {-84, 6}}), iconTransformation(extent = {{-105, -5}, {-92, 6}})));
          Types.RealIO.PressureOutput pressure annotation (
            Placement(transformation(extent = {{56, -36}, {76, -16}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {80, -64})));
          Types.RealIO.PressureOutput pO2 annotation (
            Placement(transformation(extent = {{56, 4}, {76, 24}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-40, -64})));
          Types.RealIO.PressureOutput pCO2 annotation (
            Placement(transformation(extent = {{56, -8}, {76, 12}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -64})));
          Types.RealIO.pHOutput pH annotation (
            Placement(transformation(extent = {{56, -22}, {76, -2}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {40, -64})));
          Types.RealIO.FractionOutput sO2
            "Oxygen saturation (amount of oxygen per amount of hemoglobin units)"                               annotation (
            Placement(transformation(extent = {{56, 16}, {76, 36}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-80, -64})));
        equation
          connect(q_in, systemicArteriesResistance.q_in) annotation (
            Line(points = {{89.5, 0.5}, {80, 0.5}, {80, 40}, {38, 40}}, color = {127, 0, 0}));
          connect(q_out, systemicVeinsResistance.q_out) annotation (
            Line(points = {{-90.5, 0.5}, {-74, 7.77156e-16}}, color = {127, 0, 0}));
          connect(tissue.pressure, pressure) annotation (
            Line(points = {{49, -16}, {49, -26}, {66, -26}}, color = {0, 0, 127}));
          connect(tissue.pO2, pO2) annotation (
            Line(points = {{49, -4}, {52, -4}, {52, 14}, {66, 14}}, color = {0, 0, 127}));
          connect(tissue.pCO2, pCO2) annotation (
            Line(points = {{49, -8}, {54, -8}, {54, 2}, {66, 2}}, color = {0, 0, 127}));
          connect(tissue.pH, pH) annotation (
            Line(points = {{49, -12}, {52, -12}, {52, -12}, {66, -12}}, color = {0, 0, 127}));
          connect(systemicArteriesResistance.q_out, systemicCapillaries.q_in[1]) annotation (
            Line(points={{18,40},{-2,40},{-2,-12},{-1.9,-12},{-1.9,-14.65}},           color = {127, 0, 0}, thickness = 0.5));
          connect(systemicCapillaries.q_in[2], tissue.a_port) annotation (
            Line(points={{-1.9,-13.35},{-2,-13.35},{-2,-28},{32,-28},{32,-18.2}},          color = {127, 0, 0}, thickness = 0.5));
          connect(tissue.b_port, systemicVeinsResistance.q_in) annotation (
            Line(points = {{44.2, -18.2}, {44.2, -32}, {-48, -32}, {-48, -1.66533e-15}, {-54, -1.66533e-15}}, color = {127, 0, 0}, thickness = 0.5));
          connect(tissue.sO2, sO2) annotation (
            Line(points = {{49, -3.55271e-15}, {50, -3.55271e-15}, {50, 26}, {66, 26}}, color = {0, 0, 127}));
          connect(O2_left.port_a, systemicCapillaries.substances.O2) annotation (
            Line(points = {{-60, -38}, {14, -38}, {14, -14}, {8, -14}}, color = {158, 66, 200}));
          connect(systemicCapillaries.substances.CO2, CO2_left.port_b) annotation (
            Line(points = {{8, -14}, {14, -14}, {14, -38}, {60, -38}}, color = {158, 66, 200}));
          connect(tissue.substances, systemicCapillaries.substances)
            annotation (Line(
              points={{28,-8},{16,-8},{16,-14},{8,-14}},
              color={158,66,200},
              thickness=0.5));
          annotation (
            Diagram(coordinateSystem(extent = {{-90, -50}, {90, 50}})),
            Icon(coordinateSystem(extent = {{-90, -50}, {90, 50}})));
        end TissueUnit;

        model RespiratoryCenter
          extends Physiolibrary.Icons.RespiratoryCenter;
          Modelica.Blocks.Math.Add add annotation (
            Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 90, origin = {-59, 15})));
          Physiolibrary.Types.Constants.PressureConst pressure(k(displayUnit = "kPa") = -pCO2_ZeroVentilation) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 90, origin = {-56, -10})));
          Physiolibrary.Types.Constants.HydraulicConductanceConst hydraulicConductance2(k(displayUnit = "ml/(kPa.min)") = 2.5e-07) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 90, origin = {-68, -48})));
          Modelica.Blocks.Math.Product product3 annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin = {-52, 40})));
          Modelica.Blocks.Math.Max totalVentilation annotation (
            Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 90, origin = {-67, 69})));
          Modelica.Blocks.Sources.Constant const(k = 0) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 90, origin = {-72, 52})));
          Modelica.Blocks.Math.Add add1(k2 = +1) annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {52, -2})));
          Physiolibrary.Types.Constants.VolumeConst deadspace_c(k(displayUnit = "l") = 0.00035) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 90, origin = {70, -38})));
          Modelica.Blocks.Math.Division respirationRate annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {50, 42})));
          Modelica.Blocks.Math.Product RR_multiply annotation (
            Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 180, origin = {39, 63})));
          Physiolibrary.Types.Constants.VolumeConst base_deadspace_volume(k = DV) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {70, 64})));
          Physiolibrary.Types.Constants.VolumeConst volume(k(displayUnit = "l") = 0.0023) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 90, origin = {68, -2})));
          Modelica.Blocks.Math.Min tidalVolume annotation (
            Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 90, origin = {55, 21})));
          Modelica.Blocks.Math.Division slope annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {-30, 0})));
          Modelica.Blocks.Math.Max max1 annotation (
            Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 90, origin = {-27, -29})));
          Modelica.Blocks.Math.Add add2(k2 = -1) annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {-40, -58})));
          Modelica.Blocks.Sources.Constant const2(k = 5000 - 4300) annotation (
            Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 90, origin = {-23, -63})));
          Modelica.Blocks.Math.Product product4 annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {36, -38})));
          Modelica.Blocks.Sources.Constant const3(k = 4300) annotation (
            Placement(transformation(extent = {{-6, -6}, {6, 6}}, rotation = 90, origin = {-36, -88})));
          Modelica.Blocks.Math.Gain W(k = 90 * (101325 / 760) - 4.3 * 1000) annotation (
            Placement(transformation(extent = {{-5, -5}, {5, 5}}, rotation = 90, origin = {-59, -31})));
          Physiolibrary.Types.Constants.FrequencyConst m(k = 0.505) annotation (
            Placement(transformation(extent = {{-4, -4}, {4, 4}}, rotation = 180, origin = {70, -70})));
          parameter Physiolibrary.Types.Pressure pCO2_ZeroVentilation(displayUnit = "kPa") = 4800 "Long term adaptation for pCO2 during acidosis/alcalosis";
          parameter Physiolibrary.Types.Volume DV = 0.00015 "Deadspace volume";
          Modelica.Blocks.Interfaces.RealOutput deadSpaceVentilation annotation (
            Placement(transformation(rotation = 0, extent = {{98, 21.5}, {118, 46.5}}), iconTransformation(extent = {{-10, -12.5}, {10, 12.5}}, rotation = 270, origin = {60, -108})));
          Modelica.Blocks.Interfaces.RealInput pCO2 "Arterial pCO2" annotation (
            Placement(transformation(rotation = 0, extent = {{-96, -20.5}, {-76, 4.5}}), iconTransformation(extent = {{-10, -12.5}, {10, 12.5}}, rotation = 0, origin = {-104, -10})));
          Modelica.Blocks.Interfaces.RealInput pO2 "Arterial pO2" annotation (
            Placement(transformation(rotation = 0, extent = {{-82, -96.5}, {-62, -71.5}}), iconTransformation(extent = {{-10, -12.5}, {10, 12.5}}, rotation = 0, origin = {-106, -90})));
          Modelica.Blocks.Interfaces.RealOutput ventilation annotation (
            Placement(transformation(rotation = 0, extent = {{-26, 76.5}, {-6, 101.5}}), iconTransformation(extent = {{-10, -12.5}, {10, 12.5}}, rotation = 270, origin = {4, -107})));
        equation
          connect(const.y, totalVentilation.u1) annotation (
            Line(points = {{-72, 56.4}, {-71.2, 60.6}}, color = {0, 0, 127}));
          connect(pressure.y, add.u2) annotation (
            Line(points = {{-56, -5}, {-46, -5}, {-46, 6.6}, {-54.8, 6.6}}, color = {0, 0, 127}));
          connect(add.y, product3.u1) annotation (
            Line(points = {{-59, 22.7}, {-72, 22.7}, {-72, 28}, {-58, 28}}, color = {0, 0, 127}));
          connect(totalVentilation.u2, product3.y) annotation (
            Line(points = {{-62.8, 60.6}, {-52, 60.6}, {-52, 51}}, color = {0, 0, 127}));
          connect(deadspace_c.y, add1.u2) annotation (
            Line(points = {{70, -33}, {70, -26}, {55.6, -26}, {55.6, -9.2}}, color = {0, 0, 127}));
          connect(base_deadspace_volume.y, RR_multiply.u2) annotation (
            Line(points = {{65, 64}, {65, 67.2}, {47.4, 67.2}}, color = {0, 0, 127}));
          connect(respirationRate.y, RR_multiply.u1) annotation (
            Line(points = {{50, 48.6}, {62, 48.6}, {62, 56}, {54, 56}, {54, 58.8}, {47.4, 58.8}}, color = {0, 0, 127}));
          connect(tidalVolume.u1, add1.y) annotation (
            Line(points = {{52, 15}, {52, 4.6}}, color = {0, 0, 127}));
          connect(tidalVolume.y, respirationRate.u2) annotation (
            Line(points = {{55, 26.5}, {53.6, 26.5}, {53.6, 34.8}}, color = {0, 0, 127}));
          connect(volume.y, tidalVolume.u2) annotation (
            Line(points = {{68, 3}, {68, 15}, {58, 15}}, color = {0, 0, 127}));
          connect(totalVentilation.y, respirationRate.u1) annotation (
            Line(points = {{-67, 76.7}, {-67, 78}, {24, 78}, {24, 30}, {46.4, 30}, {46.4, 34.8}}, color = {0, 0, 127}));
          connect(const2.y, max1.u2) annotation (
            Line(points = {{-23, -57.5}, {-26, -57.5}, {-26, -42}, {-24, -42}, {-24, -35}}, color = {0, 0, 127}));
          connect(add2.y, max1.u1) annotation (
            Line(points = {{-40, -51.4}, {-30, -51.4}, {-30, -35}}, color = {0, 0, 127}));
          connect(max1.y, slope.u2) annotation (
            Line(points = {{-27, -23.5}, {-26, -23.5}, {-26, -7.2}, {-26.4, -7.2}}, color = {0, 0, 127}));
          connect(product4.u1, totalVentilation.y) annotation (
            Line(points = {{32.4, -45.2}, {32.4, -52}, {24, -52}, {24, 78}, {-67, 78}, {-67, 76.7}}, color = {0, 0, 127}));
          connect(const3.y, add2.u2) annotation (
            Line(points = {{-36, -81.4}, {-32, -81.4}, {-32, -78}, {-36, -78}, {-36, -65.2}, {-36.4, -65.2}}, color = {0, 0, 127}));
          connect(product4.y, add1.u1) annotation (
            Line(points = {{36, -31.4}, {36, -9.2}, {48.4, -9.2}}, color = {0, 0, 127}));
          connect(slope.y, product3.u2) annotation (
            Line(points = {{-30, 6.6}, {-30, 18}, {-46, 18}, {-46, 28}}, color = {0, 0, 127}));
          connect(hydraulicConductance2.y, W.u) annotation (
            Line(points = {{-68, -43}, {-68, -37}, {-59, -37}}, color = {0, 0, 127}));
          connect(W.y, slope.u1) annotation (
            Line(points = {{-59, -25.5}, {-59, -18}, {-33.6, -18}, {-33.6, -7.2}}, color = {0, 0, 127}));
          connect(m.y, product4.u2) annotation (
            Line(points = {{65, -70}, {48, -70}, {48, -64}, {39.6, -64}, {39.6, -45.2}}, color = {0, 0, 127}));
          connect(deadSpaceVentilation, RR_multiply.y) annotation (
            Line(points = {{108, 34}, {90, 34}, {90, 90}, {26, 90}, {26, 63}, {31.3, 63}}, color = {0, 0, 127}));
          connect(pCO2, add.u1) annotation (
            Line(points = {{-86, -8}, {-63.2, -8}, {-63.2, 6.6}}, color = {0, 0, 127}));
          connect(pO2, add2.u1) annotation (
            Line(points = {{-72, -84}, {-52, -84}, {-52, -65.2}, {-43.6, -65.2}}, color = {0, 0, 127}));
          connect(ventilation, totalVentilation.y) annotation (
            Line(points = {{-16, 89}, {-67, 89}, {-67, 76.7}}, color = {0, 0, 127}));
          annotation (
            Diagram(graphics={  Text(extent = {{6, -76}, {34, -84}}, textColor = {28, 108, 200}, textString = "Calculation of slope")}));
        end RespiratoryCenter;
      end BloodGasesTransport;

      model SimpleRespiration "Human respiration model"
        extends Modelica.Icons.Example;
        import Modelica.Units.SI.*;
        replaceable package Air = Media.Air;
        //Chemical.Media.SimpleAir_C; //Kitware.Air_IdealGas; //Chemical.Media.SimpleAir_C; //Chemical.Media.Air_MixtureGasNasa;
        replaceable package PleuralFluid = Physiolibrary.Media.Water;

        parameter Types.MolarFlowRate O2_consumption=1.666666666666667e-05*(2*
            7.71)                                                                         "Tissue consumption of O2 by metabolism";
        parameter Types.MolarFlowRate CO2_production=1.666666666666667e-05*(2*
            6.17)                                                                         "Tissue production of CO2 by metabolism";
        parameter Boolean EnthalpyNotUsed = false;
        parameter Pressure IntrathoraxPressure=-700   "Intrathorax pressure relative to ambient pressure";
        parameter Frequency RespirationRate(displayUnit="1/min")=0.2     "Respiration rate";
        parameter Volume ResidualVolume = 0.0013 "Lungs residual volume";
        parameter Volume TotalLungCapacity = 0.00623 "Total Lung Capacity";
        parameter Volume BaseTidalVolume = 0.0005 "Base Tidal Volume";
        parameter Volume LungsAirVolume_initial = 0.00302 "Initial volume of alveolar space";
        parameter Volume PleuralFluidVolume_initial = 0.0001 "Initial volume of pleural fluid volume";
        parameter Volume PleuralCavityVolume_initial = 0.0001 + LungsAirVolume_initial "Initial volume of pleural cavity";
        parameter Volume FunctionalResidualCapacity = 0.00231 "Functional residual capacity";
        parameter Physiolibrary.Types.HydraulicResistance TotalResistance=147099.75   "Total lungs pathways resistance";
        parameter Real BronchiResistanceFraction = 0.3;
        parameter Real AlveoliDuctResistanceFraction = 0.2;
        parameter Real TracheaResistanceFraction = 1 - (BronchiResistanceFraction + AlveoliDuctResistanceFraction) / 2;
        parameter Physiolibrary.Types.HydraulicResistance TracheaResistance = TotalResistance * TracheaResistanceFraction "Left Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance LeftBronchiResistance = TotalResistance * BronchiResistanceFraction "Left Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance LeftAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Left Alveoli Resistance";
        parameter Physiolibrary.Types.HydraulicResistance RightBronchiResistance = TotalResistance * BronchiResistanceFraction "Right Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance RightAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Right Alveoli Resistance";
        parameter Physiolibrary.Types.HydraulicCompliance TotalCompliance=
            1.3876139153145e-06                                                                 "Total lungs compliance";
        parameter Pressure Pmin(displayUnit="Pa")=-700
                                       "Negative pressure gradient caused by respiratory muscles";
        parameter Pressure Pmax(displayUnit="Pa")=0     "Positive presure gradient caused by respiratory muscles";
        parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {1, Pmax, 0}} "Absolute external lungs pressure during respiration cycle scaled to time period (0,1)";
        parameter Temperature CoreTemperature=310.15   "body temperature";
        parameter Temperature EnvironmentTemperature=CoreTemperature "external air temperature"; //298.15
        parameter Mass m_initial = LungsAirVolume_initial * Air.density(Air.setState_pTX(system.p_ambient + Pmax, CoreTemperature, Air.reference_X));
        //  parameter Density d = Air.density(Air.setState_pTX(system.p_ambient+Pmax,CoreTemperature));
        Physiolibrary.Blocks.Source.PeriodicCurveSource respiratoryMusclePressureCycle(data = RespiratoryMusclePressureCycle) "Relative position in respiratory cycle (0,1) to absolute external lungs pressure" annotation (
          Placement(transformation(extent = {{-34, 72}, {-14, 92}})));
        //0.0133,
        inner Modelica.Fluid.System system(T_ambient = CoreTemperature) "Human body system setting" annotation (
          Placement(transformation(extent={{62,66},{82,86}})));
        Physiolibrary.Fluid.Sources.PressureSource environment(redeclare
            package
            Medium =                                                                      Air, temperature_start = EnvironmentTemperature) "External environment" annotation (
          Placement(transformation(extent = {{-360, 78}, {-340, 98}})));
        Physiolibrary.Types.Constants.FrequencyConst frequency(k = RespirationRate) annotation (
          Placement(transformation(extent = {{-54, 78}, {-46, 86}})));
        Physiolibrary.Fluid.Components.ElasticVessel lungs(
        redeclare package Medium = Air,
        volume_start=LungsAirVolume_initial,
        massFractions_start=Air.X(100,40,47,760 - 187),
        useThermalPort=false,
        ZeroPressureVolume=FunctionalResidualCapacity,
        ResidualVolume=ResidualVolume,
        Compliance=TotalCompliance,
        useExternalPressureInput=true,
        useSigmoidCompliance=true,
        VitalCapacity=TotalLungCapacity - ResidualVolume,
        BaseTidalVolume=BaseTidalVolume,
        useSubstances=true,
        nPorts=4) "Alveolar space" annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-136,-2})));
        Physiolibrary.Fluid.Sensors.PressureMeasure alveolarPressure(redeclare
            package Medium = Air) "Alveolar pressure"
          annotation (Placement(transformation(extent={{-170,-26},{-150,-6}})));
        Physiolibrary.Fluid.Components.Resistor lungsPathways(
          redeclare package Medium = Air,
          EnthalpyNotUsed=false,
          Resistance=TotalResistance)
          annotation (Placement(transformation(extent={{-308,0},{-288,20}})));
        Physiolibrary.Fluid.Sensors.FlowMeasure flowMeasure(redeclare package
            Medium =                                                                   Air) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-318, 66})));
        Components.ElasticVessel chest(
        redeclare package Medium = PleuralFluid,
        volume_start=PleuralFluidVolume_initial,
        useThermalPort=false,
        ZeroPressureVolume=PleuralCavityVolume_initial,
        Compliance=TotalCompliance,
        useExternalPressureInput=true,
        useSigmoidCompliance=false,
        useSubstances=false,
        useInternalSpaceInput=true,
        InternalSpace(displayUnit="l") = 0.0031,
        nPorts=1) "Pleural space"
        annotation (Placement(transformation(extent={{-46,34},{-66,54}})));
        Sensors.PressureMeasure pleauralPressure(redeclare package Medium =
              PleuralFluid, GetAbsolutePressure=false) "Pleaural pressure"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-72,34})));
        Chemical.Sources.SubstanceOutflow O2_consume(SubstanceFlow(displayUnit=
                "mmol/min") = 1.666666666666667e-05*(2*7.71))
          annotation (Placement(transformation(extent={{-114,4},{-94,24}})));
        Chemical.Sources.SubstanceInflowT CO2_produce(
          SubstanceFlow(displayUnit="mmol/min") = 1.666666666666667e-05*(2*6.17),
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.CarbonDioxide_gas())
          annotation (Placement(transformation(extent={{-94,-24},{-114,-4}})));

        Sensors.PartialPressure                     pCO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.CarbonDioxide_gas(),
          redeclare package Medium = Air)                                                                                                                                                                         annotation (
          Placement(transformation(extent={{-146,-42},{-126,-62}})));
        Sensors.PartialPressure                     pO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.Oxygen_gas(),
          redeclare package Medium = Air)                                                                                                                                                                 annotation (
          Placement(transformation(extent={{-146,-72},{-126,-92}})));
      equation
        connect(frequency.y, respiratoryMusclePressureCycle.frequence) annotation (
          Line(points = {{-45, 82}, {-34, 82}}, color = {0, 0, 127}));
        connect(environment.y, flowMeasure.q_in) annotation (
          Line(points = {{-340, 88}, {-318, 88}, {-318, 76}}, color = {127, 0, 0}, thickness = 0.5));
      connect(lungs.fluidVolume, chest.internalSpace) annotation (Line(points={{-146,6},
                {-152,6},{-152,50},{-65,50}},        color={0,0,127}));
      connect(pleauralPressure.pressure, lungs.externalPressure) annotation (
          Line(points={{-78,30},{-143,30},{-143,-11}},            color={0,0,
              127}));
      connect(chest.q_in[1],pleauralPressure.port)  annotation (Line(
          points={{-55.9,44},{-38,44},{-38,24},{-72,24}},
          color={127,0,0},
          thickness=0.5));
      connect(respiratoryMusclePressureCycle.val, chest.externalPressure)
        annotation (Line(points={{-14,82},{-8,82},{-8,62},{-63,62},{-63,53}},
            color={0,0,127}));
        connect(flowMeasure.q_out, lungsPathways.q_in) annotation (Line(
            points={{-318,56},{-318,10},{-308,10}},
            color={127,0,0},
            thickness=0.5));
      connect(lungsPathways.q_out, lungs.q_in[1]) annotation (Line(
          points={{-288,10},{-156,10},{-156,-1.025},{-135.9,-1.025}},
          color={127,0,0},
          thickness=0.5));
      connect(alveolarPressure.port, lungs.q_in[2]) annotation (Line(
          points={{-160,-26},{-170,-26},{-170,-1.675},{-135.9,-1.675}},
          color={127,0,0},
          thickness=0.5));
        connect(CO2_produce.port_b, lungs.substances.CO2) annotation (
            Line(points={{-114,-14},{-126,-14},{-126,-2}}, color={158,66,200}));
        connect(O2_consume.port_a, lungs.substances.O2) annotation (
            Line(points={{-114,14},{-126,14},{-126,-2}}, color={158,66,200}));
        connect(pCO2.port_a, CO2_produce.port_b) annotation (Line(points={{-126,
                -52},{-126,-14},{-114,-14}}, color={158,66,200}));
        connect(pCO2.port, lungs.q_in[3]) annotation (Line(points={{-136,-42},{
                -136,-32},{-176,-32},{-176,-26},{-174,-26},{-174,-2.325},{-135.9,
                -2.325}}, color={0,127,255}));
        connect(pO2.port_a, O2_consume.port_a) annotation (Line(points={{-126,-82},
                {-126,14},{-114,14}}, color={158,66,200}));
        connect(pO2.port, lungs.q_in[4]) annotation (Line(points={{-136,-72},{
                -158,-72},{-158,-32},{-176,-32},{-176,-26},{-174,-26},{-174,
                -2.975},{-135.9,-2.975}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-360, -100}, {100, 100}}),
            graphics={Text(
              extent={{-124,56},{-88,52}},
              textColor={0,0,0},
              textString="lungsVolume"), Text(
              extent={{-132,36},{-84,30}},
              textColor={0,0,0},
              textString="intrathoraxPressure")}),
          experiment(StopTime = 60, Tolerance = 1e-05, __Dymola_Algorithm = "Dassl"),
          Documentation(info = "<html>
<p>References:</p>
<p><br>Mecklenburgh, J. S., and W. W. Mapleson. &quot;Ventilatory assistance and respiratory muscle activity. 1: Interaction in healthy volunteers.&quot; <i>British journal of anaesthesia</i> 80.4 (1998): 422-433.</p>
</html>"));
      end SimpleRespiration;

      model Respiration "Human respiration model"
        extends Modelica.Icons.Example;
        import Physiolibrary.Types.*;
        replaceable package Air = Media.Air;
        //Chemical.Media.SimpleAir_C; //Kitware.Air_IdealGas; //Chemical.Media.SimpleAir_C; //Chemical.Media.Air_MixtureGasNasa;
        replaceable package PleuralFluid = Physiolibrary.Media.Water;

        parameter Pressure IntrathoraxPressure(displayUnit="mmHg")=-700;
        parameter Frequency RespirationRate(displayUnit="1/min")=0.2     "Respiration rate";
        parameter Volume ResidualVolume=0.0013   "Lungs residual volume";
        parameter Volume TotalLungCapacity=0.00623   "Total Lung Capacity";
        parameter Volume BaseTidalVolume=0.0005   "Base Tidal Volume";
        parameter Volume LungsAirVolume_initial=0.0031   "Initial volume of alveolar space";
        parameter Volume pleuralVolume_initial=0.0001   "Initial volume of pleural fluid";
        parameter Volume FunctionalResidualCapacity=0.00231   "Functional residual capacity";
        parameter Physiolibrary.Types.HydraulicResistance TotalResistance(
            displayUnit="(cmH2O.s)/l")=147099.75                                      "Total lungs pathways resistance";
        parameter Real BronchiResistanceFraction = 0.3;
        parameter Real AlveoliDuctResistanceFraction = 0.2;
        parameter Real TracheaResistanceFraction = 1 - (BronchiResistanceFraction + AlveoliDuctResistanceFraction) / 2;
        parameter Physiolibrary.Types.HydraulicResistance TracheaResistance = TotalResistance * TracheaResistanceFraction "Left Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance LeftBronchiResistance = TotalResistance * BronchiResistanceFraction "Left Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance LeftAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Left Alveoli Resistance";
        parameter Physiolibrary.Types.HydraulicResistance RightBronchiResistance = TotalResistance * BronchiResistanceFraction "Right Bronchi Resistance";
        parameter Physiolibrary.Types.HydraulicResistance RightAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Right Alveoli Resistance";
        parameter Physiolibrary.Types.HydraulicCompliance TotalCompliance=
            1.5001231516913e-06                                                                 "Total lungs compliance";
        parameter Pressure Pmin(displayUnit="Pa")=-700
                                       "Relative external lungs pressure minimum caused by respiratory muscles";
        parameter Pressure Pmax(displayUnit="mmHg")=0     "Relative external lungs pressure maximum";
        parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {1, Pmax, 0}} "Absolute external lungs pressure during respiration cycle scaled to time period (0,1)";
        parameter Temperature CoreTemperature=310.15   "body temperature";
        parameter Temperature EnvironmentTemperature=298.15   "external air temperature";
        parameter Mass m_initial = LungsAirVolume_initial * Air.density(Air.setState_pTX(system.p_ambient + Pmax, CoreTemperature, Air.reference_X));
        //  parameter Density d = Air.density(Air.setState_pTX(system.p_ambient+Pmax,CoreTemperature));

        parameter Volume RelaxedLungsCavitySpace = LungsAirVolume_initial+pleuralVolume_initial;

        parameter Fraction LeftLungsSizeFraction=0.5;
        parameter Fraction RightLungsSizeFraction=1-LeftLungsSizeFraction;

        parameter Fraction LeftPleuralSizeFraction=0.5;
        parameter Fraction RightPleuralSizeFraction=1-LeftPleuralSizeFraction;

        Physiolibrary.Blocks.Source.PeriodicCurveSource respiratoryMusclePressureCycle(data = RespiratoryMusclePressureCycle) "Relative position in respiratory cycle (0,1) to absolute external lungs pressure" annotation (
          Placement(transformation(extent = {{-34, 72}, {-14, 92}})));
        Physiolibrary.Fluid.Components.ElasticVessel leftAlveoli(redeclare
            package Medium =                                                                Air,
          volume_start=LungsAirVolume_initial*LeftLungsSizeFraction,                                                                     massFractions_start = Air.X(100, 40, 47, 760 - 187), useThermalPort = true,
          ZeroPressureVolume=FunctionalResidualCapacity*LeftLungsSizeFraction,
          ResidualVolume=ResidualVolume*LeftLungsSizeFraction,
          Compliance=TotalCompliance*LeftLungsSizeFraction,                                                                                                                                                                                                        useExternalPressureInput = true, useSigmoidCompliance = true,
          VitalCapacity=(TotalLungCapacity - ResidualVolume)*LeftLungsSizeFraction,
          BaseTidalVolume=BaseTidalVolume*LeftLungsSizeFraction,                                                                                                                                                                                                        useSubstances = true,  nPorts = 2,
          q_in(m_flow(start={0.0,0.028225848485321114}), p(start={101344.01141127005,101344.0078125},
                each displayUnit="bar")))                                                                                                                                                                                                         "Left alveolar space" annotation (
          Placement(transformation(extent = {{-162, 16}, {-142, 36}})));
        //0.0133,
        Physiolibrary.Fluid.Sensors.PressureMeasure leftPleauralPressure(redeclare
            package Medium =
            PleuralFluid, GetAbsolutePressure=false)                                                                                          "Left Pleaural pressure" annotation (
          Placement(transformation(extent = {{10, -10}, {-10, 10}}, rotation = 0, origin = {-70, 64})));
        inner Modelica.Fluid.System system(T_ambient = CoreTemperature) "Human body system setting" annotation (
          Placement(transformation(extent = {{60, 66}, {80, 86}})));
        Physiolibrary.Fluid.Sources.PressureSource environment(redeclare
            package
            Medium =                                                                      Air, temperature_start = EnvironmentTemperature,
          y(m_flow(start=0.09561940275276484)))                                                                                            "External environment" annotation (
          Placement(transformation(extent = {{-360, 78}, {-340, 98}})));
        Physiolibrary.Fluid.Components.Resistor leftBronchi(redeclare package
            Medium =                                                                   Air,  Resistance = LeftBronchiResistance,
          q_in(p(start=103156.07860174825, displayUnit="bar")),
          q_out(p(start=102073.43154792248, displayUnit="bar")))                                                                                                   annotation (
          Placement(transformation(extent={{-252,22},{-232,42}})));
        Physiolibrary.Types.Constants.FrequencyConst frequency(k = RespirationRate) annotation (
          Placement(transformation(extent={{-54,76},{-46,84}})));
        Chemical.Sources.SubstanceOutflow O2_left(SubstanceFlow(displayUnit = "mmol/min") = 0.0001285) annotation (
          Placement(transformation(extent={{-164,-14},{-144,6}})));
        Chemical.Sources.SubstanceInflowT CO2_left(SubstanceFlow(displayUnit = "mmol/min") = 0.00010283333333333, redeclare
            package stateOfMatter =
            Chemical.Interfaces.IdealGas,                                                                                                                                         substanceData = Chemical.Substances.CarbonDioxide_gas()) annotation (
          Placement(transformation(extent={{-200,-14},{-180,6}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure leftAlveolarPressure(redeclare
            package Medium =                                                                        Air) "Left Alveolar pressure" annotation (
          Placement(transformation(extent = {{-124, 22}, {-104, 42}})));
        Physiolibrary.Fluid.Components.Resistor rightBronchi(redeclare package
            Medium =                                                                    Air,  Resistance = RightBronchiResistance,
          q_in(m_flow(start=0.028225848485321524)),
          q_out(p(start=102073.43154792248, displayUnit="bar")))                                                                                                     annotation (
          Placement(transformation(extent = {{-252, -54}, {-232, -34}})));
        Physiolibrary.Fluid.Components.ElasticVessel rightAlveoli(redeclare
            package Medium =                                                                 Air,
          massFractions_start=Air.X(
                  100,
                  40,
                  47,
                  760 - 187),
          volume_start=LungsAirVolume_initial*RightLungsSizeFraction,                                                                                                                         useThermalPort = true,
          ZeroPressureVolume=FunctionalResidualCapacity*RightLungsSizeFraction,
          ResidualVolume=ResidualVolume*RightLungsSizeFraction,
          Compliance=TotalCompliance*RightLungsSizeFraction,                                                                                                                                                                                                        useExternalPressureInput = true, useSigmoidCompliance = true,
          VitalCapacity=(TotalLungCapacity - ResidualVolume)*RightLungsSizeFraction,
          BaseTidalVolume=BaseTidalVolume*RightLungsSizeFraction,                                                                                                                                                                                                        useSubstances = true, nPorts = 6,
          q_in(p(start={101344.01141127005,101344.0078125,101344.0078125,101344.0078125,
                  101344.0078125,101344.0078125}, each displayUnit="bar")))                                                                                                                                                                                                         "Right alveolar space" annotation (
          Placement(transformation(extent = {{-156, -58}, {-136, -38}})));
        Chemical.Sources.SubstanceInflowT CO2_right(SubstanceFlow(displayUnit = "mmol/min") = 0.00010283333333333, redeclare
            package stateOfMatter =
            Chemical.Interfaces.IdealGas,                                                                                                                                          substanceData = Chemical.Substances.CarbonDioxide_gas()) annotation (
          Placement(transformation(extent = {{-220, -96}, {-200, -76}})));
        Chemical.Sources.SubstanceOutflow O2_right(SubstanceFlow(displayUnit = "mmol/min") = 0.0001285) annotation (
          Placement(transformation(extent = {{-158, -96}, {-138, -76}})));
        Physiolibrary.Fluid.Components.ElasticVessel leftPleuralSpace(redeclare
            package Medium =
            PleuralFluid,
          volume_start=pleuralVolume_initial*LeftPleuralSizeFraction,                                                                                useThermalPort = false,
          ZeroPressureVolume=RelaxedLungsCavitySpace*LeftLungsSizeFraction,
          Compliance=TotalCompliance*LeftPleuralSizeFraction,                                                                                                                                                                                          useExternalPressureInput = true, useSigmoidCompliance = false, useSubstances = false,
          useInternalSpaceInput=true,
          InternalSpace=RelaxedLungsCavitySpace*LeftLungsSizeFraction,                                                                                                                                                                                                        nPorts = 1)
        "Left Pleural space"                                                                                                                                                                                                         annotation (
          Placement(transformation(extent={{-56,18},{-76,38}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure rightPleauralPressure(redeclare
            package Medium =
            PleuralFluid, GetAbsolutePressure=false)                                                                                           "Right pleaural pressure" annotation (
          Placement(transformation(extent = {{10, -10}, {-10, 10}}, rotation = 0, origin = {-70, -12})));
        Physiolibrary.Fluid.Components.ElasticVessel rightPleuralSpace(redeclare
            package Medium =
            PleuralFluid,
        volume_start=pleuralVolume_initial*RightPleuralSizeFraction,
        ZeroPressureVolume=RelaxedLungsCavitySpace*RightLungsSizeFraction,
        Compliance=TotalCompliance*RightPleuralSizeFraction,                                                                                                                                                                    useExternalPressureInput = true, useSigmoidCompliance = false, useSubstances = false,
        useInternalSpaceInput=true,
        InternalSpace=RelaxedLungsCavitySpace*RightLungsSizeFraction,                                                                                                                                                                                                        nPorts = 1) "Right Plearal space" annotation (
          Placement(transformation(extent={{-56,-58},{-76,-38}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure rightAlveolarPressure(redeclare
            package Medium =                                                                         Air) "Right Alveolar pressure" annotation (
          Placement(transformation(extent = {{-134, -38}, {-114, -18}})));
        Physiolibrary.Fluid.Components.Resistor trachea(redeclare package Medium = Air,  Resistance = 0.5 * TracheaResistance,
          q_in(m_flow(start=0.056451696970642506), p(start=105795.1786534674,
                displayUnit="bar")))                                                                                                                             annotation (
          Placement(transformation(extent={{-298,-12},{-278,8}})));
        Physiolibrary.Fluid.Components.Resistor leftAlveolarDuct(redeclare
            package Medium =
                     Air,  Resistance = LeftAlveoliResistance) annotation (
          Placement(transformation(extent={{-210,22},{-190,42}})));
        Physiolibrary.Fluid.Sensors.FlowMeasure flowMeasure(redeclare package
            Medium = Air) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-318, 66})));
        Physiolibrary.Fluid.Components.Resistor rightAlveolarDuct(redeclare
            package Medium =
                     Air,  Resistance = RightAlveoliResistance) annotation (
          Placement(transformation(extent = {{-212, -54}, {-192, -34}})));
        Physiolibrary.Fluid.Components.ElasticVessel upperRespiratoryTract(redeclare
            package Medium = Air,  useSubstances = true,
          volume_start=9.98e-05,
          massFractions_start = Air.X(100, 40, 47, 760 - 187), useThermalPort = true,
          Compliance = TotalCompliance / 100, ZeroPressureVolume(displayUnit = "ml") = 0.0001,
          ResidualVolume(displayUnit="ml"),
          InternalSpace=5e-05,                                                                                                                                                                                                        nPorts = 4) annotation (
          Placement(transformation(extent = {{-328, -10}, {-308, 10}})));
        Physiolibrary.Fluid.Components.Resistor upperRespiratoryTractResistance(redeclare
            package Medium = Air,  Resistance = 0.5 * TracheaResistance) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 90, origin={-318,30})));
        Chemical.Sources.PureSubstance water(redeclare package stateOfMatter =
            Chemical.Interfaces.Incompressible, substanceData = Chemical.Substances.Water_liquid()) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {-314, -68})));
        Chemical.Components.GasSolubility gasSolubility1(KC = 1e-5) annotation (
          Placement(transformation(extent = {{-362, -48}, {-342, -28}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pCO2(redeclare package
            stateOfMatter = Chemical.Interfaces.IdealGas, substanceData = Chemical.Substances.CarbonDioxide_gas(),
            redeclare package Medium = Air) annotation (
          Placement(transformation(extent={{-216,-64},{-196,-84}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pO2(redeclare package
            stateOfMatter = Chemical.Interfaces.IdealGas, substanceData = Chemical.Substances.Oxygen_gas(),
            redeclare package Medium = Air) annotation (
          Placement(transformation(extent = {{-138, -64}, {-158, -84}})));
        Physiolibrary.Fluid.Sensors.Temperature Temperature_alveolar(redeclare
            package Medium = Air) annotation (
          Placement(transformation(extent = {{-110, -40}, {-90, -20}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pH2O_alveolar(redeclare
            package stateOfMatter =
                             Chemical.Interfaces.IdealGas,                                                                                         substanceData = Chemical.Substances.Water_gas(), redeclare
            package Medium = Air) annotation (
          Placement(transformation(extent = {{-122, -66}, {-102, -86}})));
        Physiolibrary.Fluid.Sensors.PartialPressure pH2O_upperRespiratory(redeclare
            package stateOfMatter = Chemical.Interfaces.IdealGas,                                                                                                 substanceData = Chemical.Substances.Water_gas(), redeclare
            package Medium = Air) annotation (
          Placement(transformation(extent = {{-364, 34}, {-344, 14}})));
        Physiolibrary.Fluid.Sensors.Temperature Temperature_upperRespiratory(redeclare
            package Medium = Air) annotation (
          Placement(transformation(extent = {{-298, 30}, {-278, 50}})));
        Physiolibrary.Fluid.Sensors.Temperature Temperature_mouth(redeclare
            package Medium = Air) annotation (
          Placement(transformation(extent = {{-296, 72}, {-276, 92}})));
        Physiolibrary.Thermal.Components.Conductor conductor(Conductance(displayUnit = "W/K") = 10) annotation (
          Placement(transformation(extent = {{-302, -44}, {-322, -24}})));
        Physiolibrary.Thermal.Sources.UnlimitedHeat coreHeat(T = system.T_ambient) annotation (
          Placement(transformation(extent = {{-274, -44}, {-294, -24}})));
        Physiolibrary.Thermal.Components.Conductor conductor1(Conductance(displayUnit = "W/K") = 10) annotation (
          Placement(transformation(extent = {{-210, 6}, {-230, 26}})));
        Physiolibrary.Thermal.Components.Conductor conductor2(Conductance(displayUnit = "W/K") = 10) annotation (
          Placement(transformation(extent = {{-208, -40}, {-228, -20}})));
      equation
        connect(frequency.y, respiratoryMusclePressureCycle.frequence) annotation (
          Line(points={{-45,80},{-40,80},{-40,82},{-34,82}},
                                                color = {0, 0, 127}));
        connect(leftAlveolarPressure.port, leftAlveoli.q_in[1]) annotation (
          Line(points={{-114,22},{-152,22},{-152,24},{-152.1,24},{-152.1,25.35}},           color = {127, 0, 0}, thickness = 0.5));
        connect(leftPleuralSpace.q_in[1],leftPleauralPressure.port)  annotation (
          Line(points={{-65.9,28},{-65.9,48},{-70,48},{-70,54}},          color = {127, 0, 0}, thickness = 0.5));
        connect(rightPleuralSpace.q_in[1],rightPleauralPressure.port)  annotation (
          Line(points={{-65.9,-48},{-65.9,-28},{-70,-28},{-70,-22}},          color = {127, 0, 0}, thickness = 0.5));
        connect(rightAlveoli.q_in[1],rightAlveolarPressure.port)  annotation (
          Line(points={{-146.1,-49.0833},{-148,-49.0833},{-148,-60},{-124,-60},{
                -124,-38}},                                                                            color = {127, 0, 0}, thickness = 0.5));
        connect(leftBronchi.q_out, leftAlveolarDuct.q_in) annotation (
          Line(points={{-232,32},{-228,32},{-228,30},{-222,30},{-222,32},{-210,
              32}},                               color = {127, 0, 0}, thickness = 0.5));
        connect(leftAlveolarDuct.q_out, leftAlveoli.q_in[2]) annotation (
          Line(points={{-190,32},{-152,32},{-152,30},{-152.1,30},{-152.1,26.65}},           color = {127, 0, 0}, thickness = 0.5));
        connect(trachea.q_out, leftBronchi.q_in) annotation (
          Line(points={{-278,-2},{-268,-2},{-268,32},{-252,32}},        color = {127, 0, 0}, thickness = 0.5));
        connect(trachea.q_out, rightBronchi.q_in) annotation (
          Line(points={{-278,-2},{-268,-2},{-268,-44},{-252,-44}},        color = {127, 0, 0}, thickness = 0.5));
        connect(environment.y, flowMeasure.q_in) annotation (
          Line(points = {{-340, 88}, {-318, 88}, {-318, 76}}, color = {127, 0, 0}, thickness = 0.5));
        connect(rightBronchi.q_out, rightAlveolarDuct.q_in) annotation (
          Line(points = {{-232, -44}, {-212, -44}}, color = {127, 0, 0}, thickness = 0.5));
        connect(rightAlveolarDuct.q_out, rightAlveoli.q_in[2]) annotation (
          Line(points={{-192,-44},{-146,-44},{-146,-48.65},{-146.1,-48.65}},        color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTract.q_in[1], trachea.q_in) annotation (
          Line(points={{-318.1,-0.975},{-318.1,-6},{-318,-6},{-318,-2},{-298,-2}},                     color = {127, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_out, upperRespiratoryTractResistance.q_out) annotation (
          Line(points={{-318,56},{-318,40}},      color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTractResistance.q_in, upperRespiratoryTract.q_in[2]) annotation (
          Line(points={{-318,20},{-318,-0.325},{-318.1,-0.325}},    color = {127, 0, 0}, thickness = 0.5));
        connect(water.port_a, gasSolubility1.liquid_port) annotation (
          Line(points = {{-324, -68}, {-352, -68}, {-352, -48}}, color = {158, 66, 200}));
        connect(pCO2.port_a, CO2_right.port_b) annotation (
          Line(points={{-196,-74},{-190,-74},{-190,-86},{-200,-86}},          color = {158, 66, 200}));
        connect(pCO2.port, rightAlveoli.q_in[3]) annotation (Line(
            points={{-206,-64},{-184,-64},{-184,-44},{-148,-44},{-148,-49.3},{
                -146.1,-49.3},{-146.1,-48.2167}},
            color={127,0,0},
            thickness=0.5));
        connect(pO2.port_a, O2_right.port_a) annotation (
          Line(points = {{-158, -74}, {-166, -74}, {-166, -86}, {-158, -86}}, color = {158, 66, 200}));
        connect(pO2.port, rightAlveoli.q_in[4]) annotation (Line(
            points={{-148,-64},{-148,-44},{-146.1,-44},{-146.1,-47.7833}},
            color={127,0,0},
            thickness=0.5));
        connect(pH2O_alveolar.port, rightAlveoli.q_in[5]) annotation (Line(
            points={{-112,-66},{-112,-50},{-146,-50},{-146,-44},{-146.1,-44},{
                -146.1,-47.35}},
            color={127,0,0},
            thickness=0.5));
        connect(pH2O_upperRespiratory.port, upperRespiratoryTract.q_in[3])
          annotation (Line(
            points={{-354,34},{-354,48},{-330,48},{-330,14},{-318.1,14},{-318.1,
                0.325}},
            color={127,0,0},
            thickness=0.5));
        connect(conductor.q_out, upperRespiratoryTract.heatPort) annotation (
          Line(points={{-322,-34},{-324,-34},{-324,-10}},          color = {191, 0, 0}, thickness = 0.5));
        connect(conductor1.q_out, coreHeat.port) annotation (
          Line(points = {{-230, 16}, {-238, 16}, {-238, -16}, {-298, -16}, {-298, -34}, {-294, -34}}, color = {191, 0, 0}, thickness = 0.5));
        connect(coreHeat.port, conductor.q_in) annotation (
          Line(points = {{-294, -34}, {-302, -34}}, color = {191, 0, 0}, thickness = 0.5));
        connect(conductor2.q_out, coreHeat.port) annotation (
          Line(points = {{-228, -30}, {-238, -30}, {-238, -16}, {-298, -16}, {-298, -34}, {-294, -34}}, color = {191, 0, 0}, thickness = 0.5));
        connect(conductor1.q_in, leftAlveoli.heatPort) annotation (
          Line(points={{-210,16},{-158,16}},        color = {191, 0, 0}, thickness = 0.5));
        connect(conductor2.q_in, rightAlveoli.heatPort) annotation (
          Line(points={{-208,-30},{-168,-30},{-168,-58},{-152,-58}},              color = {191, 0, 0}, thickness = 0.5));
        connect(flowMeasure.q_in, Temperature_mouth.port) annotation (
          Line(points = {{-318, 76}, {-318, 82}, {-298, 82}, {-298, 72}, {-286, 72}}, color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTract.q_in[4], Temperature_upperRespiratory.port) annotation (
          Line(points={{-318.1,0.975},{-318.1,10},{-318,10},{-318,8},{-288,8},{
              -288,30}},                                                                               color = {127, 0, 0}, thickness = 0.5));
        connect(rightAlveoli.q_in[6], Temperature_alveolar.port) annotation (
          Line(points={{-146.1,-46.9167},{-100,-46.9167},{-100,-40}},        color = {127, 0, 0}, thickness = 0.5));
        connect(upperRespiratoryTract.substances.H2O, pH2O_upperRespiratory.port_a) annotation (
          Line(points = {{-328, 0}, {-334, 0}, {-334, 24}, {-344, 24}}, color = {158, 66, 200}));
        connect(gasSolubility1.gas_port, upperRespiratoryTract.substances.H2O) annotation (
          Line(points = {{-352, -28}, {-352, 0}, {-328, 0}}, color = {158, 66, 200}));
        connect(CO2_left.port_b, leftAlveoli.substances.CO2) annotation (
          Line(points={{-180,-4},{-170,-4},{-170,26},{-162,26}},          color = {158, 66, 200}));
        connect(O2_left.port_a, leftAlveoli.substances.O2) annotation (
          Line(points={{-164,-4},{-170,-4},{-170,26},{-162,26}},          color = {158, 66, 200}));
        connect(CO2_right.port_b, rightAlveoli.substances.CO2) annotation (
          Line(points = {{-200, -86}, {-172, -86}, {-172, -48}, {-156, -48}}, color = {158, 66, 200}));
        connect(rightAlveoli.substances.O2, O2_right.port_a) annotation (
          Line(points = {{-156, -48}, {-172, -48}, {-172, -86}, {-158, -86}}, color = {158, 66, 200}));
        connect(rightAlveoli.substances.H2O, pH2O_alveolar.port_a) annotation (
          Line(points = {{-156, -48}, {-102, -48}, {-102, -76}}, color = {158, 66, 200}));
      connect(leftPleuralSpace.externalPressure, respiratoryMusclePressureCycle.val)
        annotation (Line(points={{-73,37},{-73,48},{-2,48},{-2,82},{-14,82}},
            color={0,0,127}));
      connect(rightPleuralSpace.externalPressure,
        respiratoryMusclePressureCycle.val) annotation (Line(points={{-73,-39},
              {-73,-28},{-2,-28},{-2,82},{-14,82}}, color={0,0,127}));
        connect(leftAlveoli.fluidVolume,leftPleuralSpace. internalSpace) annotation (
            Line(points={{-142,18},{-90,18},{-90,34},{-75,34}}, color={0,0,127}));
        connect(leftPleauralPressure.pressure, leftAlveoli.externalPressure)
          annotation (Line(points={{-76,60},{-145,60},{-145,35}}, color={0,0,127}));
      connect(rightAlveoli.fluidVolume, rightPleuralSpace.internalSpace)
        annotation (Line(points={{-136,-56},{-82,-56},{-82,-42},{-75,-42}},
            color={0,0,127}));
      connect(rightPleauralPressure.pressure, rightAlveoli.externalPressure)
        annotation (Line(points={{-76,-16},{-140,-16},{-140,-39},{-139,-39}},
            color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false)),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-360, -100}, {100, 100}})),
          experiment(StopTime = 60, Tolerance = 1e-05, __Dymola_Algorithm = "Dassl"),
          Documentation(info = "<html>
<p>References:</p>
<p><br>Mecklenburgh, J. S., and W. W. Mapleson. &quot;Ventilatory assistance and respiratory muscle activity. 1: Interaction in healthy volunteers.&quot; <i>British journal of anaesthesia</i> 80.4 (1998): 422-433.</p>
</html>"));
      end Respiration;

      model CapillaryMembrane
        extends Modelica.Icons.Example;
        replaceable package Blood = Physiolibrary.Media.Blood;
        Components.ElasticVessel Artys(
          redeclare package Medium = Blood,
          massFractions_start=Blood.ArterialDefault,
          useSubstances=true,
          Compliance=7.5006157584566e-08)
          annotation (Placement(transformation(extent={{-72,-18},{-52,4}})));
        Components.ElasticVessel Veins(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
          useSubstances=true,
          volume_start=0.002,
          Compliance=7.5006157584566e-08)
          annotation (Placement(transformation(extent={{56,-12},{76,8}})));
          /*
    .* {0,1,1,1,
    0,0,0,0,0,0,0,
    1,0,0,0,0,0,
    0,0,1}
    
    "RBC","O2","CO2","CO","Hb","MetHb","HbF","Alb","Glb","PO4","DPG",
      "Glucose","Lactate","Urea","AminoAcids","Lipids","Ketoacids",
      "SID","H+","Others"
      */
          /*
    {  D_Epinephrine, D_Norepinephrine, D_Vasopressin, D_Insulin, D_Glucagon,
      D_Thyrotropin, D_Thyroxine, D_Leptin,
      D_Desglymidodrine, D_AlphaBlockers, D_BetaBlockers,
      D_AnesthesiaVascularConductance, D_Angiotensin2,
      D_Renin, D_Aldosterone}
    */
        inner Modelica.Fluid.System system(T_ambient=310.15)
          annotation (Placement(transformation(extent={{64,66},{84,86}})));
        Chemical.Components.Membrane O2(KC=0.01)
          annotation (Placement(transformation(extent={{-10,72},{10,92}})));
        Chemical.Components.Membrane CO2(KC=0.01)
          annotation (Placement(transformation(extent={{-10,54},{10,74}})));
        Chemical.Components.Membrane H2O(KC=0.01)
          annotation (Placement(transformation(extent={{-12,12},{8,32}})));
        Chemical.Components.Membrane CO(KC=0.01)
          annotation (Placement(transformation(extent={{-10,32},{10,52}})));
      equation
        connect(O2.port_a, Artys.substances.O2) annotation (Line(points={{-10,82},
                {-72,82},{-72,-7}},  color={158,66,200}));
        connect(O2.port_b, Veins.substances.O2) annotation (Line(points={{10,82},
                {56,82},{56,40},{56,40},{56,-2}},  color={158,66,200}));
        connect(CO2.port_a, Artys.substances.CO2) annotation (Line(points={{-10,64},
                {-76,64},{-76,-7},{-72,-7}},     color={158,66,200}));
        connect(CO2.port_b, Veins.substances.CO2) annotation (Line(points={{10,64},
                {56,64},{56,-2}},   color={158,66,200}));
        connect(CO.port_a, Artys.substances.CO) annotation (Line(points={{-10,42},
                {-72,42},{-72,-7}},  color={158,66,200}));
        connect(CO.port_b, Veins.substances.CO) annotation (Line(points={{10,42},
                {56,42},{56,-2}},   color={158,66,200}));
        connect(H2O.port_a, Artys.substances.H2O) annotation (Line(points={{-12,22},
                {-72,22},{-72,-7}},  color={158,66,200}));
        connect(H2O.port_b, Veins.substances.H2O) annotation (Line(points={{8,22},{
                56,22},{56,-2}},    color={158,66,200}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=20,
            Tolerance=1e-08,
            __Dymola_Algorithm="Dassl"));
      end CapillaryMembrane;
    end Examples;
    annotation (
      Documentation(info = "<html>
<p>The main usage of this fluid domain is modeling of the cardio-vascular, respiratory and lymhpatic system in human physiology. And because there are no extreme thermodynamic conditions, the system can be really simple &mdash;it is only necessary to model conditions for ideal gases, for incompressible liquids, at normal liquid temperatures and with relative pressure 5-20kPa. This boring thermodynamic state leads to the very simple blocks of resistance,  pressure, volumetric flow, inertia and finally the block of blood accumulation in elastic comparments.</p>
</html>"));
  end Fluid;

  package Thermal "Domain with Temperature and Heat Flow - extension of Modelica.Thermal.HeatTransfer"
    extends Modelica.Icons.Package;

    package Examples "Examples that demonstrate usage of the Pressure flow components"
      extends Modelica.Icons.ExamplesPackage;

      model SkinHeatFlow
        extends Modelica.Icons.Example;
        Components.IdealRadiator skinCirculation(MassFlow(displayUnit = "g/min") = 0.0028333333333333) "Blood flow through skin" annotation (
          Placement(transformation(extent = {{16, -32}, {36, -12}})));
        Sources.UnlimitedHeat bodyCore(T(displayUnit = "degC") = 310.15) annotation (
          Placement(transformation(extent = {{-20, -30}, {0, -10}})));
        Sources.UnlimitedHeat skin(T(displayUnit = "degC") = 301.15) annotation (
          Placement(transformation(extent = {{-8, 4}, {12, 24}})));
      equation
        connect(skinCirculation.q_in, bodyCore.port) annotation (
          Line(points = {{16, -20}, {0, -20}}, color = {191, 0, 0}, thickness = 1));
        connect(skin.port, skinCirculation.q_out) annotation (
          Line(points = {{12, 14}, {26, 14}, {26, -12}}, color = {191, 0, 0}, thickness = 1));
        annotation (
          experiment(StopTime = 10000, Tolerance = 1e-006),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end SkinHeatFlow;

      model MuscleHeat
        extends Modelica.Icons.Example;
        Components.HeatAccumulation muscle(relativeHeat_start = 52125.66, SpecificHeat = 3475.044, Weight(displayUnit = "kg") = 15) annotation (
          Placement(transformation(extent = {{16, 22}, {36, 42}})));
        Components.IdealRadiator muscleCirculation(MassFlow(displayUnit = "g/min") = 0.0114) "Blood circulation in skeletal muscle" annotation (
          Placement(transformation(extent = {{16, -32}, {36, -12}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow generatedHeat(Q_flow = 13.956) "Heat energy created by muscle" annotation (
          Placement(transformation(extent = {{-32, 20}, {-12, 40}})));
        Sources.UnlimitedHeat body(T(displayUnit = "degC") = 310.15) annotation (
          Placement(transformation(extent = {{-32, -30}, {-12, -10}})));
      equation
        connect(muscle.q_in, generatedHeat.port) annotation (
          Line(points = {{26, 32}, {8, 32}, {8, 30}, {-12, 30}}, color = {191, 0, 0}, thickness = 1));
        connect(muscleCirculation.q_in, body.port) annotation (
          Line(points = {{16, -20}, {-12, -20}}, color = {191, 0, 0}, thickness = 1));
        connect(muscle.q_in, muscleCirculation.q_out) annotation (
          Line(points = {{26, 32}, {26, -12}}, color = {191, 0, 0}, thickness = 1));
        annotation (
          experiment(StopTime = 10000, Tolerance = 1e-006),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end MuscleHeat;

      model ThermalBody_QHP
        import Physiolibrary;
        extends Modelica.Icons.Example;
        Thermal.Components.HeatAccumulation core(SpecificHeat = 3475.044, Weight = 10.75) annotation (
          Placement(transformation(extent = {{-12, -4}, {8, 16}})));
        Thermal.Components.HeatAccumulation GILumen(Weight = 1) annotation (
          Placement(transformation(extent = {{40, -52}, {60, -32}})));
        Thermal.Components.HeatAccumulation skeletalMuscle(SpecificHeat = 3475.044, Weight = 7.05) annotation (
          Placement(transformation(extent = {{36, 42}, {56, 62}})));
        Thermal.Components.IdealRadiator muscleBloodFlow(MassFlow(displayUnit = "g/min") = 0.0114, useMassFlowInput = false, SpecificHeat = 3851.856) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, origin = {32, 30})));
        Thermal.Sources.MassOutflow urination annotation (
          Placement(transformation(extent = {{-28, -60}, {-48, -40}})));
        Thermal.Sources.MassOutflow lungsVapor(VaporizationHeat(displayUnit = "kcal/g") = 2428344, SpecificHeat(displayUnit = "kcal/(kg.K)"), MassFlow(displayUnit = "g/min") = 4.6666666666667e-06) annotation (
          Placement(transformation(extent = {{12, 66}, {32, 86}})));
        Thermal.Components.HeatAccumulation skin(relativeHeat_start = -8373.6, SpecificHeat = 3475.044, Weight = 0.56) annotation (
          Placement(transformation(extent = {{-68, 4}, {-48, 24}})));
        Thermal.Components.IdealRadiator skinBloodFlow(MassFlow(displayUnit = "g/min") = 0.0028333333333333, useMassFlowInput = false, SpecificHeat = 3851.856) annotation (
          Placement(transformation(extent = {{10, -10}, {-10, 10}}, origin = {-28, 2})));
        Thermal.Sources.MassOutflow insensibleVapor(VaporizationHeat(displayUnit = "kcal/g") = 2428344, SpecificHeat(displayUnit = "kcal/(kg.K)"), MassFlow(displayUnit = "g/min") = 6.5e-06) annotation (
          Placement(transformation(extent = {{-48, 32}, {-28, 52}})));
        Thermal.Sources.MassOutflow sweating(VaporizationHeat(displayUnit = "kcal/g") = 2428344, SpecificHeat(displayUnit = "kcal/(kg.K)")) annotation (
          Placement(transformation(extent = {{-44, 58}, {-24, 78}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalConductor lumenVolume(G(displayUnit = "kcal/(min.K)") = 1) annotation (
          Placement(transformation(extent = {{32, -60}, {12, -40}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalConductor air(G(displayUnit = "kcal/(min.K)") = 2.4423) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-76, 50})));
        Thermal.Sources.UnlimitedHeat ambient(T = 295.15) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-76, 84})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow skinMetabolicHeat(Q_flow = 1.95384) annotation (
          Placement(transformation(extent = {{-92, 2}, {-72, 22}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow coreMetabolicHeat(Q_flow = 55.824) annotation (
          Placement(transformation(extent = {{86, -6}, {66, 14}})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow muscleMetabolicHeat(Q_flow(displayUnit = "kcal/min") = 9.7692) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {78, 60})));
        Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow foodHeatIntake(Q_flow = 0) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 180, origin = {78, -38})));
        Thermal.Components.Stream foodAbsorption(SpecificHeat = 4186.8) annotation (
          Placement(transformation(extent = {{44, -32}, {24, -12}})));
      equation
        connect(core.q_in, muscleBloodFlow.q_in) annotation (
          Line(points = {{-2, 6}, {-2, 32}, {22, 32}}, color = {191, 0, 0}, thickness = 1));
        connect(skeletalMuscle.q_in, muscleBloodFlow.q_out) annotation (
          Line(points = {{46, 52}, {32, 52}, {32, 40}}, color = {191, 0, 0}, thickness = 1));
        connect(core.q_in, urination.q_in) annotation (
          Line(points = {{-2, 6}, {-6, 6}, {-6, -50}, {-28, -50}}, color = {191, 0, 0}, thickness = 1));
        connect(core.q_in, lungsVapor.q_in) annotation (
          Line(points = {{-2, 6}, {-2, 76}, {12, 76}}, color = {191, 0, 0}, thickness = 1));
        connect(skin.q_in, insensibleVapor.q_in) annotation (
          Line(points = {{-58, 14}, {-58, 42}, {-48, 42}}, color = {191, 0, 0}, thickness = 1));
        connect(sweating.q_in, insensibleVapor.q_in) annotation (
          Line(points = {{-44, 68}, {-58, 68}, {-58, 42}, {-48, 42}}, color = {191, 0, 0}, thickness = 1));
        connect(GILumen.q_in, lumenVolume.port_a) annotation (
          Line(points = {{50, -42}, {40, -42}, {40, -50}, {32, -50}}, color = {191, 0, 0}, thickness = 1));
        connect(core.q_in, lumenVolume.port_b) annotation (
          Line(points = {{-2, 6}, {2, 6}, {2, -50}, {12, -50}}, color = {191, 0, 0}, thickness = 1));
        connect(skin.q_in, air.port_b) annotation (
          Line(points = {{-58, 14}, {-58, 30}, {-76, 30}, {-76, 40}}, color = {191, 0, 0}, thickness = 1));
        connect(skin.q_in, skinMetabolicHeat.port) annotation (
          Line(points = {{-58, 14}, {-66, 14}, {-66, 12}, {-72, 12}}, color = {191, 0, 0}, thickness = 1));
        connect(GILumen.q_in, foodHeatIntake.port) annotation (
          Line(points = {{50, -42}, {60, -42}, {60, -38}, {68, -38}}, color = {191, 0, 0}, thickness = 1));
        connect(skeletalMuscle.q_in, muscleMetabolicHeat.port) annotation (
          Line(points = {{46, 52}, {58, 52}, {58, 60}, {68, 60}}, color = {191, 0, 0}, thickness = 1));
        connect(core.q_in, coreMetabolicHeat.port) annotation (
          Line(points = {{-2, 6}, {32, 6}, {32, 4}, {66, 4}}, color = {191, 0, 0}, thickness = 1));
        connect(skinBloodFlow.q_in, core.q_in) annotation (
          Line(points = {{-18, 4}, {-12, 4}, {-12, 6}, {-2, 6}}, color = {191, 0, 0}, thickness = 1));
        connect(GILumen.q_in, foodAbsorption.q_in) annotation (
          Line(points = {{50, -42}, {50, -22}, {44, -22}}, color = {191, 0, 0}, thickness = 1));
        connect(foodAbsorption.q_out, core.q_in) annotation (
          Line(points = {{24, -22}, {2, -22}, {2, 6}, {-2, 6}}, color = {191, 0, 0}, thickness = 1));
        connect(ambient.port, air.port_a) annotation (
          Line(points = {{-76, 74}, {-76, 60}}, color = {191, 0, 0}, thickness = 1));
        connect(skinBloodFlow.q_out, skin.q_in) annotation (
          Line(points = {{-28, 12}, {-28, 14}, {-58, 14}}, color = {191, 0, 0}, thickness = 1));
        annotation (
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"),
          experiment(StopTime = 3600));
      end ThermalBody_QHP;

      model SkinHeatTransferOnBloodFlow
        extends Modelica.Icons.Example;
        Components.IdealRadiator skinCirculation(MassFlow(displayUnit = "g/min") = 0.0028333333333333) "Blood circulation through skin" annotation (
          Placement(transformation(extent = {{16, -32}, {36, -12}})));
        Sources.UnlimitedHeat core(T(displayUnit = "degC") = 310.15) annotation (
          Placement(transformation(extent = {{-32, -30}, {-12, -10}})));
        Sources.UnlimitedHeat skin(T(displayUnit = "degC") = 301.15) annotation (
          Placement(transformation(extent = {{-12, 2}, {8, 22}})));
      equation
        connect(skinCirculation.q_in, core.port) annotation (
          Line(points = {{16, -20}, {-12, -20}}, color = {191, 0, 0}, thickness = 1));
        connect(skin.port, skinCirculation.q_out) annotation (
          Line(points = {{8, 12}, {26, 12}, {26, -12}}, color = {191, 0, 0}, thickness = 1));
        annotation (
          experiment(StopTime = 10000, Tolerance = 1e-006),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>", info = "<html>
	<p>This flow rate can affect how much heat leaves the body, especially in cold conditions. This is shown in this model, where modeling constant temperatures of the body core (37&deg;C) and skin (28&deg;C), with a skin blood flow of 170 g/min and blood specific heat of 0.92 kcal/(kg.K), gives heat losses of about 1.4 kcal/min.</p>
	</html>"));
      end SkinHeatTransferOnBloodFlow;
    end Examples;

    package Components
      extends Modelica.Icons.Package;

      model HeatAccumulation "Accumulating of heat to substance"
        extends Physiolibrary.Icons.HeatAccumulation;
        //  extends Physiolibrary.SteadyStates.Interfaces.SteadyState(state_start=
        //        relativeHeat_start, storeUnit="kcal");
        Interfaces.HeatPort_b q_in "Heat inflow/outflow connector" annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}})));
        parameter Physiolibrary.Types.Heat relativeHeat_start = 0 "Heat start value = weight*(initialTemperature - 37degC)*specificHeat" annotation (
          Dialog(group = "Initialization"));
        parameter Physiolibrary.Types.SpecificHeatCapacity SpecificHeat = 4186.8 "Mass specific heat";
        Physiolibrary.Types.Temperature T "Current temperature";
        Physiolibrary.Types.RealIO.HeatOutput relativeHeat(start = relativeHeat_start) "Current accumulated heat = weight*(T - 37degC)*specificHeat" annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -100}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {60, -100})));
        //nominal=1
        //absoluteHeat =  weight*310.15*specificHeat + relativeHeat
        constant Physiolibrary.Types.Temperature NormalBodyTemperature = 310.15 "Shift of absolute zero temperature to normal body values";
        parameter Boolean useMassInput = false "=true, if mass input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Mass Weight = 1 "Total mass weight if useMassInput=false" annotation (
          Dialog(enable = not useMassInput));
        Physiolibrary.Types.RealIO.MassInput weight(start = Weight) = m if useMassInput "Weight of mass, where the heat are accumulated" annotation (
          Placement(transformation(extent = {{-120, 60}, {-80, 100}})));
      protected
        Physiolibrary.Types.Mass m;
      equation
        if not useMassInput then
          m = Weight;
        end if;
        q_in.T = NormalBodyTemperature + relativeHeat / (m * SpecificHeat);
        T = q_in.T;
      //state = relativeHeat;  //
        der(relativeHeat) = q_in.Q_flow;
      //change = q_in.Q_flow;
        annotation (
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>", info = "<html>
	<p>The &quot;HeatAccumulation&quot; library class models heat accumulation in Physiolibrary. This class has one thermal connector with temperature and heat flow. Heat energy is accumulated inside the class, stored in the variable &quot;relativeHeat&quot;. This value is relative to normal body temperature of 37 &deg;C; a positive value therefore indicates an internal temperature above 37 &deg;C, while a negative value indicates temperature below 37 &deg;C. Of course the particular value of temperature depends on the mass and specific heat of the instance.</p>
	</html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-80, 100}, {220, 140}}, textString = "%name", lineColor = {0, 0, 255})}));
      end HeatAccumulation;

      model IdealRadiator "Closed circiut radiator, where outflowed = ambient temperature"
        extends Interfaces.ConditionalMassFlow;
        extends Physiolibrary.Icons.Radiator;
        parameter Physiolibrary.Types.SpecificHeatCapacity SpecificHeat = 3851.856 "Specific heat of flow circuit medium";
        //default heat capacity of blood is used as 0.92 kcal/(degC.kg)
        Thermal.Interfaces.HeatPort_a q_in annotation (
          Placement(transformation(extent = {{-110, 10}, {-90, 30}})));
        Thermal.Interfaces.HeatPort_b q_out annotation (
          Placement(transformation(extent = {{-10, 90}, {10, 110}})));
      equation
        q_in.Q_flow + q_out.Q_flow = 0;
      //  assert(substanceFlow>=-Modelica.Constants.eps,"In IdealRadiator must be always the forward flow direction! Not 'substanceFlow<0'!");
        q_in.Q_flow = q * (q_in.T - q_out.T) * SpecificHeat;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-144, -142}, {156, -102}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>", info = "<html>
	<p>This class has two thermal connectors &ndash; one for liquid inside the radiator and another for the material around the radiator. Note that there is no liquid flow inside these connectors. The liquid flow can be described by a parameter or input to the instance. Together with the liquid specific heat, this flow determines the amount of heat flux from the liquid to a surrounding environment of different temperature. The calculation fulfills the ideal condition of microcirculation, where the outflowing blood has the same temperature as a tissue. This is really useful for modeling body thermal transfers, because the transfer of heat with blood flow is more significant than the typical rate of conduction through solid mass.&nbsp;</p>
	<p><br>The real inflow to radiator can be described by substanceFlow and temperature q_in.T.</p>
	<p><b>q_in.q=q_out.q is not the heat inflow to Radiator input</b>, but the heat convected from radiator to environment!</p>
	<p>The environment temperature is the same as radiator output temperature q_out.T. </p>
	<p>And the flow of heat from radiator to environment is driven by Fick principle.</p>
	</html>"));
      end IdealRadiator;

      model Conductor "Heat resistor"
        extends Interfaces.OnePort;
        extends Physiolibrary.Icons.Resistor;
        parameter Boolean useConductanceInput = false "=true, if external conductance value is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.ThermalConductance Conductance = 0 "Thermal conductance if useConductanceInput=false" annotation (
          Dialog(enable = not useConductanceInput));
        Physiolibrary.Types.RealIO.ThermalConductanceInput conductance(start = Conductance) = c if useConductanceInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 40})));
      protected
        Physiolibrary.Types.ThermalConductance c;
      equation
        if not useConductanceInput then
          c = Conductance;
        end if;
        q_in.Q_flow = c * (q_in.T - q_out.T);
        annotation (
          Icon(graphics={  Text(extent = {{-70, -30}, {70, 30}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end Conductor;

      model Stream "Flow of whole heated mass"
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalMassFlow;
        parameter Physiolibrary.Types.SpecificHeatCapacity SpecificHeat "Of flow circuit medium";
      equation
        q_in.Q_flow = if q > 0 then q * q_in.T * SpecificHeat else q * q_out.T * SpecificHeat;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{20, -84}, {320, -44}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>", info = "<html>
	<p><h4><font color=\"#008000\">Bidirectional heated mass flow by temperature</font></h4></p>
	<p>Possible field values: </p>
	<table cellspacing=\"2\" cellpadding=\"0\" border=\"0.1\"><tr>
	<td></td>
	<td><p align=\"center\"><h4>forward flow</h4></p></td>
	<td><p align=\"center\"><h4>backward flow</h4></p></td>
	</tr>
	<tr>
	<td><p align=\"center\"><h4>massFlow</h4></p></td>
	<td><p align=\"center\">&gt;=0</p></td>
	<td><p align=\"center\">&lt;=0</p></td>
	</tr>
	<tr>
	<td><p align=\"center\"><h4>q_in.q</h4></p></td>
	<td><p align=\"center\">=massFlow*q_in.T*SpecificHeat</p></td>
	<td><p align=\"center\">=-q_out.q</p></td>
	</tr>
	<tr>
	<td><p align=\"center\"><h4>q_out.q</h4></p></td>
	<td><p align=\"center\">=-q_in.q</p></td>
	<td><p align=\"center\">=massFlow*q_out.T*SpecificHeat</p></td>
	</tr>
	</table>
	<br/>
	</html>"));
      end Stream;
    end Components;

    package Sources
      extends Modelica.Icons.SourcesPackage;

      model UnlimitedHeat "Prescribed temperature"
        outer Modelica.Fluid.System system "System wide properties";
        parameter Boolean useTemperatureInput = false "=true, if fixed temperature is from input instead of parameter" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Temperature T = system.T_ambient "Fixed temperature at port if useTemperatureInput=false" annotation (
          Dialog(enable = not useTemperatureInput));
        parameter Boolean isIsolatedInSteadyState = false "=true, if there is no flow at port in steady state" annotation (
          Dialog(group = "Simulation", tab = "Equilibrium"));
        Interfaces.HeatPort_b port annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}})));
      protected
        Physiolibrary.Types.Temperature t "Current temperature";
      public
        Physiolibrary.Types.RealIO.TemperatureInput temperature(start = T) = t if useTemperatureInput annotation (
          Placement(transformation(extent = {{-120, -20}, {-80, 20}})));
      equation
        if not useTemperatureInput then
          t = T;
        end if;
        port.T = t;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-150, 150}, {150, 110}}, textString = "%name", lineColor = {0, 0, 255}), Text(extent = {{-150, -110}, {150, -140}}, lineColor = {0, 0, 0}, textString = "T=%T"), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, fillColor = {159, 159, 223}, fillPattern = FillPattern.Backward), Text(extent = {{0, 0}, {-100, -100}}, lineColor = {0, 0, 0}, textString = "K"), Line(points = {{-52, 0}, {56, 0}}, color = {191, 0, 0}, thickness = 0.5), Polygon(points = {{50, -20}, {50, 20}, {90, 0}, {50, -20}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid)}),
          Documentation(info = "<HTML>
        <p>
        This model defines a fixed temperature T at its port in Kelvin,
        i.e., it defines a fixed temperature as a boundary condition.
        </p>
        </HTML>
        ", revisions = "<html>
        <p><i>2009-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"));
      end UnlimitedHeat;

      model MassOutflow "One-directional outflow of heated mass with enthalpy (vaporization heat)"
        extends Interfaces.ConditionalMassFlow;
        Interfaces.HeatPort_a q_in "flow circuit" annotation (
          Placement(transformation(extent = {{-110, -10}, {-90, 10}})));
        parameter Physiolibrary.Types.SpecificEnergy VaporizationHeat = 0 "Used for whole outflow stream";
        // or 2428344 for water vaporization
        parameter Physiolibrary.Types.SpecificHeatCapacity SpecificHeat = 4186.8 "Of outflowing medium";
        //default heat capacity of water is 1 kcal/(degC.kg)
      equation
      //  assert(liquidOutflow_>=-Modelica.Constants.eps,"HeatOutstream must have always one forward flow direction! Not 'liquidOutflow_<0'!");
        q_in.Q_flow = q * (q_in.T * SpecificHeat + VaporizationHeat);
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{20, -84}, {320, -44}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end MassOutflow;

      model MassInflow "One-directional inflow of heated mass with enthalpy (heat of solvation)"
        extends Interfaces.ConditionalMassFlow;
        extends Interfaces.ConditionalTemperature;
        Interfaces.HeatPort_b q_out "flow circuit" annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
        parameter Physiolibrary.Types.SpecificEnergy dH = 0 "Enthalpy of incoming substance (i.e. enthalpy of solvation)";
        // or 2428344 for water vaporization
        parameter Physiolibrary.Types.SpecificHeatCapacity SpecificHeat = 4186.8 "Of inflowing medium";
        //default heat capacity of water is 1 kcal/(degC.kg)
      equation
      //  assert(liquidOutflow_>=-Modelica.Constants.eps,"HeatOutstream must have always one forward flow direction! Not 'liquidOutflow_<0'!");
        q_out.Q_flow = -q * (temperature * SpecificHeat + dH);
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{20, -84}, {320, -44}}, textString = "%name", lineColor = {0, 0, 255})}),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end MassInflow;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;
      connector HeatPort = Modelica.Thermal.HeatTransfer.Interfaces.HeatPort(T(displayUnit = "degC"), Q_flow(displayUnit = "kcal/min", nominal = 4186.8 / 60));

      connector HeatPort_a "Heat inflow"
        extends HeatPort;
        annotation (
          defaultComponentName = "port_a",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-20, 10}, {20, -10}}, lineColor = {191, 0, 0}, lineThickness = 0.5), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid)}),
          Diagram(graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-160, 110}, {40, 50}}, lineColor = {191, 0, 0}, textString = "%name")}));
      end HeatPort_a;

      connector HeatPort_b "Heat outflow"
        extends HeatPort;
        annotation (
          defaultComponentName = "port_b",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-20, 10}, {20, -10}}, lineColor = {191, 0, 0}, lineThickness = 0.5), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-160, 110}, {40, 50}}, lineColor = {191, 0, 0}, textString = "%name")}));
      end HeatPort_b;

      partial model OnePort "Heat OnePort"
        HeatPort_a q_in annotation (
          Placement(transformation(extent = {{-110, -10}, {-90, 10}})));
        HeatPort_b q_out annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}})));
      equation
        q_in.Q_flow + q_out.Q_flow = 0;
        annotation (
          Documentation(revisions = "<html>
	<p><i>2009-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end OnePort;

      partial model ConditionalMassFlow "Input of mass flow vs. parametric mass flow"
        parameter Boolean useMassFlowInput = false "=true, if mass flow input is used instead of parameter MassFlow" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.MassFlowRate MassFlow = 0 "Mass flow if useMassFlowInput=false" annotation (
          Dialog(enable = not useMassFlowInput));
        Physiolibrary.Types.RealIO.MassFlowRateInput massFlow(start = MassFlow) = q if useMassFlowInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 70})));
        Physiolibrary.Types.MassFlowRate q "Current mass flow";
      equation
        if not useMassFlowInput then
          q = MassFlow;
        end if;
      end ConditionalMassFlow;

      partial model ConditionalTemperature "Input of temperature vs. parametric temperature"
        parameter Boolean useTemperatureInput = false "=true, if temperature input is used instead of parameter T" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Temperature T = 0 "Temperature if useTemperatureInput=false" annotation (
          Dialog(enable = not useTemperatureInput));
        Physiolibrary.Types.RealIO.TemperatureInput t(start = T) = temperature if useTemperatureInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-80, 70}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 70})));
        Physiolibrary.Types.Temperature temperature "Current temperature";
      equation
        if not useTemperatureInput then
          temperature = T;
        end if;
      end ConditionalTemperature;
    end Interfaces;
    annotation (
      Documentation(revisions = "<html>
	<p>Copyright (c) 2008-2018, Marek Matej&aacute;k, marek@matfyz.cz </p>
	<p>All rights reserved. </p>
	</html>"));
  end Thermal;

  package Population "Domain for populatiom models for cells, viruses, bacterias, tissues, organism etc."
    extends Modelica.Icons.Package;

    package Examples "Examples that demonstrate usage of the Population models"
      extends Modelica.Icons.ExamplesPackage;

      model PredatorPrey "LotkaVolterra equations"
        extends Modelica.Icons.Example;
        Components.Population predator(population_start = 2) annotation (
          Placement(transformation(extent = {{-8, 42}, {12, 62}})));
        Components.Reproduction reproduction2(useChangePerMemberInput = true) annotation (
          Placement(transformation(extent = {{-52, 42}, {-32, 62}})));
        Components.Mortality mortality2(LifeTime(displayUnit = "s") = 1) annotation (
          Placement(transformation(extent = {{34, 42}, {54, 62}})));
        Components.Reproduction reproduction1(LifeTime(displayUnit = "s") = 1) annotation (
          Placement(transformation(extent = {{-56, -40}, {-36, -20}})));
        Components.Mortality mortality1(useChangePerMemberInput = true) annotation (
          Placement(transformation(extent = {{32, -40}, {52, -20}})));
        Components.Population prey(population_start = 1) annotation (
          Placement(transformation(extent = {{-12, -40}, {8, -20}})));
        Physiolibrary.Types.Constants.PopulationChangePerMemberConst preyMortality(LifeTime(displayUnit = "s") = 1) annotation (
          Placement(transformation(extent = {{28, -4}, {36, 4}})));
        Physiolibrary.Blocks.Factors.Normalization predatorEffect annotation (
          Placement(transformation(extent = {{52, -24}, {32, -4}})));
        Physiolibrary.Types.Constants.PopulationChangePerMemberConst predatorReproduction(LifeTime(displayUnit = "s") = 1) annotation (
          Placement(transformation(extent = {{-56, 80}, {-48, 88}})));
        Physiolibrary.Blocks.Factors.Normalization preyEffekt annotation (
          Placement(transformation(extent = {{-52, 60}, {-32, 80}})));
      equation
        connect(preyMortality.y, predatorEffect.yBase) annotation (
          Line(points = {{37, 0}, {42, 0}, {42, -12}}, color = {0, 0, 127}));
        connect(predator.population, predatorEffect.u) annotation (
          Line(points = {{8, 42}, {8, 20}, {56, 20}, {56, -14}, {50, -14}}, color = {0, 0, 127}));
        connect(predatorReproduction.y, preyEffekt.yBase) annotation (
          Line(points = {{-47, 84}, {-42, 84}, {-42, 72}}, color = {0, 0, 127}));
        connect(prey.population, preyEffekt.u) annotation (
          Line(points = {{4, -40}, {4, -48}, {-66, -48}, {-66, 70}, {-50, 70}}, color = {0, 0, 127}));
        connect(reproduction2.port_b, predator.port) annotation (
          Line(points = {{-32, 52}, {2, 52}}, color = {0, 127, 127}, thickness = 1));
        connect(predator.port, mortality2.port_a) annotation (
          Line(points = {{2, 52}, {34.2, 52}}, color = {0, 127, 127}, thickness = 1));
        connect(reproduction1.port_b, prey.port) annotation (
          Line(points = {{-36, -30}, {-2, -30}}, color = {0, 127, 127}, thickness = 1));
        connect(prey.port, mortality1.port_a) annotation (
          Line(points = {{-2, -30}, {32.2, -30}}, color = {0, 127, 127}, thickness = 1));
        connect(preyEffekt.y, reproduction2.changePerMember) annotation (
          Line(points = {{-42, 66}, {-42, 56}}, color = {0, 0, 127}));
        connect(predatorEffect.y, mortality1.changePerMember) annotation (
          Line(points = {{42, -18}, {42, -26}}, color = {0, 0, 127}));
        annotation (
          experiment(StopTime = 20),
          __Dymola_experimentSetupOutput(equdistant = false));
      end PredatorPrey;
    end Examples;

    package Components
      extends Modelica.Icons.Package;

      model Population
        extends Physiolibrary.Icons.Population;
        /*  extends Physiolibrary.SteadyStates.Interfaces.SteadyState(
        	    state(nominal=NominalPopulation),
        	    change(nominal=NominalPopulationChange),
        	    state_start=population_start,
        	    storeUnit="1");
        	*/
        parameter Physiolibrary.Types.Population population_start(nominal = NominalPopulation) = 1e-8 "Initial population size in compartment" annotation (
          HideResult = true,
          Dialog(group = "Initialization"));
        parameter Physiolibrary.Types.Population NominalPopulation = 1 "Numerical scale. Default is 1, but for huge amount of cells it should be any number in the appropriate numerical order of typical amount." annotation (
          HideResult = true,
          Dialog(tab = "Solver", group = "Numerical support of very huge populations"));
        parameter Physiolibrary.Types.PopulationChange NominalPopulationChange = 1 / (60 * 60 * 24) "Numerical scale. Default change is 1 individual per day, but for much faster or much slower chnages should be different." annotation (
          HideResult = true,
          Dialog(tab = "Solver", group = "Numerical support of very fast or very slow changes"));
        Interfaces.PopulationPort_b port(population(nominal = NominalPopulation), change(nominal = NominalPopulationChange)) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}), iconTransformation(extent = {{-10, -10}, {10, 10}})));
        Physiolibrary.Types.RealIO.PopulationOutput population(start = population_start, nominal = NominalPopulation) annotation (
          Placement(transformation(extent = {{46, -102}, {66, -82}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {60, -100})));
      equation
        port.population = population;
      //state = population; //
        der(population) = port.change;
      //change = port.change;
        annotation (
          Icon(graphics={  Text(extent = {{-112, 100}, {248, 140}}, lineColor = {0, 0, 255}, textString = "%name")}),
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end Population;

      model Reproduction "As population change per one individual"
        extends Interfaces.ConditionalLifeTime;
        Interfaces.PopulationPort_b port_b annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      equation
        port_b.change = -changePerPopulationMember * port_b.population;
        annotation (
          Icon(graphics={  Rectangle(extent = {{-100, -52}, {100, 48}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 23}, {80, -2}, {-80, -27}, {-80, 23}}, lineColor = {0, 127, 127}, rotation = 360), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -78}, rotation = 360, textString = "%name")}));
      end Reproduction;

      model Mortality "As population change per one individual"
        extends Interfaces.ConditionalLifeTime;
        Interfaces.PopulationPort_a port_a annotation (
          Placement(transformation(extent = {{-108, -10}, {-88, 10}}), iconTransformation(extent = {{-108, -10}, {-88, 10}})));
      equation
        port_a.change = changePerPopulationMember * port_a.population;
        annotation (
          Icon(graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 127, 127}, rotation = 360), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -76}, rotation = 360, textString = "%name")}));
      end Mortality;

      model Stream "As population change per one individual"
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalLifeTime;
      equation
        port_a.change = if changePerPopulationMember > 0 then changePerPopulationMember * port_a.population else changePerPopulationMember * port_b.population;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 127, 127}, rotation = 360), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -76}, rotation = 360, textString = "%name")}));
      end Stream;

      model Change
        extends Interfaces.OnePort;
        extends Interfaces.ConditionalChange;
      equation
        port_a.change = change;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 127, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 25}, {80, 0}, {-80, -25}, {-80, 25}}, lineColor = {0, 127, 127}, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid, rotation = 360), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -76}, rotation = 360, textString = "%name")}));
      end Change;
    end Components;

    package Sources
      extends Modelica.Icons.SourcesPackage;

      model Growth
        extends Interfaces.ConditionalChange;
        Interfaces.PopulationPort_b port_b annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}}), iconTransformation(extent = {{90, -10}, {110, 10}})));
      equation
        port_b.change = -change;
        annotation (
          Icon(graphics={  Rectangle(extent = {{-100, -52}, {100, 48}}, lineColor = {0, 127, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 23}, {80, -2}, {-80, -27}, {-80, 23}}, rotation = 360, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid, pattern = LinePattern.None, lineColor = {0, 127, 127}), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -78}, rotation = 360, textString = "%name")}));
      end Growth;

      model Loss
        extends Interfaces.ConditionalChange;
        Interfaces.PopulationPort_a port_a annotation (
          Placement(transformation(extent = {{-110, -10}, {-90, 10}}), iconTransformation(extent = {{-110, -10}, {-90, 10}})));
      equation
        port_a.change = change;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -52}, {100, 48}}, lineColor = {0, 127, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, rotation = 360), Polygon(points = {{-80, 23}, {80, -2}, {-80, -27}, {-80, 23}}, lineColor = {0, 127, 127}, rotation = 360, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-150, -20}, {150, 20}}, lineColor = {0, 0, 255}, origin = {-8, -78}, rotation = 360, textString = "%name")}));
      end Loss;
    end Sources;

    package Interfaces
      extends Modelica.Icons.InterfacesPackage;

      connector PopulationPort "Average number of population members and their change"
        Physiolibrary.Types.Population population "Average number of population individuals";
        flow Physiolibrary.Types.PopulationChange change "Average population change = change of population individuals";
        annotation (
          Documentation(revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end PopulationPort;

      connector PopulationPort_a "Increase (or decrease) of population"
        extends PopulationPort;
        annotation (
          defaultComponentName = "port_a",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-20, 10}, {20, -10}}, lineColor = {0, 127, 127}, lineThickness = 1), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 127, 127}, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 127, 127}, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-160, 110}, {40, 50}}, lineColor = {0, 127, 127}, textString = "%name")}),
          Documentation(info = "<html>
	<p>
	Connector with one flow signal of type Real.
	</p>
	</html>", revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end PopulationPort_a;

      connector PopulationPort_b "Decrease (or increase) of population"
        extends PopulationPort;
        annotation (
          defaultComponentName = "port_b",
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-20, 10}, {20, -10}}, lineColor = {0, 127, 127}, lineThickness = 1), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 127, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 127, 127}, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-160, 112}, {40, 52}}, lineColor = {0, 127, 127}, fillColor = {0, 127, 127}, fillPattern = FillPattern.Solid, textString = "%name")}),
          Documentation(info = "<html>
	<p>
	Connector with one flow signal of type Real.
	</p>
	</html>", revisions = "<html>
	<p><i>2014-2018</i></p>
	<p>Marek Matejak, marek@matfyz.cz </p>
	</html>"));
      end PopulationPort_b;

      partial model OnePort "Partial change of population between two ports without its accumulation"
        PopulationPort_b port_b annotation (
          Placement(transformation(extent = {{90, -10}, {110, 10}})));
        PopulationPort_a port_a annotation (
          Placement(transformation(extent = {{-110, -10}, {-90, 10}})));
      equation
        port_a.change + port_b.change = 0;
      end OnePort;

      partial model ConditionalChange "Input of population change vs. parametric constant change"
        parameter Boolean useChangeInput = false "=true, if real input connector is used instead of parameter PopulationChange" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.PopulationChange PopulationChange = 0 "Population change if useChangeInput=false" annotation (
          HideResult = not useChangeInput,
          Dialog(enable = not useChangeInput));
        Physiolibrary.Types.RealIO.PopulationChangeInput populationChange(start = PopulationChange) = change if useChangeInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 40})));
        Physiolibrary.Types.PopulationChange change "Current population change";
      equation
        if not useChangeInput then
          change = PopulationChange;
        end if;
      end ConditionalChange;

      partial model ConditionalLifeTime "Input of population change per one population member vs. parametric lifetime"
        parameter Boolean useChangePerMemberInput = false "=true, if real input connector is used instead of parameter LifeTime" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Time LifeTime = 1e-8 "Mean life time for population (=1.44*halftime) if useChangePerMember=false" annotation (
          HideResult = not useChangePerMemberInput,
          Dialog(enable = not useChangePerMemberInput));
        Physiolibrary.Types.RealIO.PopulationChangePerMemberInput changePerMember(start = 1 / LifeTime) = changePerPopulationMember if useChangePerMemberInput annotation (
          Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 60}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 40})));
        Physiolibrary.Types.PopulationChangePerMember changePerPopulationMember "Current population change per individual";
      equation
        if not useChangePerMemberInput then
          changePerPopulationMember = 1 / LifeTime;
        end if;
      end ConditionalLifeTime;
    end Interfaces;
    annotation (
      Documentation(revisions = "<html>
	<p>Copyright (c) 2008-2018, Marek Matej&aacute;k, marek@matfyz.cz </p>
	<p>All rights reserved. </p>
	</html>"));
  end Population;

  package Icons "Icons for physiological models"
    //extends Modelica.Icons.IconsPackage;
    extends Modelica.Icons.Package;

    class Golem
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -98}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/golem.png")}));
    end Golem;

    class CardioVascular
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/csv.png")}));
    end CardioVascular;

    class Water
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/indexVoda.png")}));
    end Water;

    class Electrolytes
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/electrolytes.png")}));
    end Electrolytes;

    class Proteins
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-98, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/protein.png")}));
    end Proteins;

    class Gases
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/gases.png")}));
    end Gases;

    class NutrientsMetabolism
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/vyziva.png")}));
    end NutrientsMetabolism;

    class Heat
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/ohen.png")}));
    end Heat;

    class Hormones
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/hormony.png")}));
    end Hormones;

    class Nerves
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/nervyNeuron.png")}));
    end Nerves;

    class Setup
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/setup.png")}));
    end Setup;

    class Status
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-98, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/tissueFitness.png")}));
    end Status;

    class SkeletalMuscle
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-70, -80}, {40, 92}}, fileName = "modelica://Physiolibrary/Resources/Icons/sval.png")}));
    end SkeletalMuscle;

    class Bone
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, pattern = LinePattern.None), Bitmap(extent = {{-88, -84}, {52, 96}}, fileName = "modelica://Physiolibrary/Resources/Icons/bone.png")}));
    end Bone;

    class OtherTissue
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-74, -94}, {48, 60}}, fileName = "modelica://Physiolibrary/Resources/Icons/pojivovaTkan.png")}));
    end OtherTissue;

    class RespiratoryMuscle
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-66, -86}, {44, 86}}, fileName = "modelica://Physiolibrary/Resources/Icons/respiracniSvaly.png")}));
    end RespiratoryMuscle;

    class Fat
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-84, -68}, {38, 86}}, fileName = "modelica://Physiolibrary/Resources/Icons/tukovaBunka.png")}));
    end Fat;

    class Skin
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-74, -84}, {48, 56}}, fileName = "modelica://Physiolibrary/Resources/Icons/skin.png")}));
    end Skin;

    class Brain
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-78, -92}, {44, 62}}, fileName = "modelica://Physiolibrary/Resources/Icons/brain.png")}));
    end Brain;

    class GITract
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-80, -80}, {42, 74}}, fileName = "modelica://Physiolibrary/Resources/Icons/traviciTrakt.png")}));
    end GITract;

    class LeftHeart
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -100}, {24, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/srdceLeva.png")}));
    end LeftHeart;

    class RightHeart
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-26, -100}, {92, 66}}, fileName = "modelica://Physiolibrary/Resources/Icons/srdceprava.png")}));
    end RightHeart;

    class Liver
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-84, -100}, {86, 34}}, fileName = "modelica://Physiolibrary/Resources/Icons/jatra.png")}));
    end Liver;

    class Kidney
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-92, -88}, {40, 86}}, fileName = "modelica://Physiolibrary/Resources/Icons/kidney.png")}));
    end Kidney;

    class Bladder
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, pattern = LinePattern.None), Bitmap(extent = {{-92, -88}, {40, 86}}, fileName = "modelica://Physiolibrary/Resources/Icons/mocovyMechyr.png")}));
    end Bladder;

    class GILumen
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/traviciTrakt2.png")}));
    end GILumen;

    class ThyroidGland
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-92, -88}, {40, 86}}, fileName = "modelica://Physiolibrary/Resources/Icons/stitnaZlaza.png")}));
    end ThyroidGland;

    class Pancreas
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/pankreas.png")}));
    end Pancreas;

    class AdrenalGland
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/nadledviny.png")}));
    end AdrenalGland;

    class Lungs
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-70, -80}, {40, 92}}, fileName = "modelica://Physiolibrary/Resources/Icons/plice.png")}));
    end Lungs;

    class Tissues
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-46, 26}, {32, 98}}, fileName = "modelica://Physiolibrary/Resources/Icons/bone.png"), Bitmap(extent = {{-62, -92}, {50, -10}}, fileName = "modelica://Physiolibrary/Resources/Icons/skin.png"), Bitmap(extent = {{-38, -20}, {64, 90}}, fileName = "modelica://Physiolibrary/Resources/Icons/sval.png"), Bitmap(extent = {{-10, -56}, {102, 36}}, fileName = "modelica://Physiolibrary/Resources/Icons/traviciTrakt.png"), Text(extent = {{64, -66}, {94, -96}}, lineColor = {0, 0, 0}, textString = "..."), Bitmap(extent = {{-98, -30}, {-24, 36}}, fileName = "modelica://Physiolibrary/Resources/Icons/brain.png")}));
    end Tissues;

    class Peritoneum
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-70, -80}, {40, 92}}, fileName = "modelica://Physiolibrary/Resources/Icons/peritoneum.png")}));
    end Peritoneum;

    class Plasma
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-70, -80}, {40, 92}}, fileName = "modelica://Physiolibrary/Resources/Icons/plazma.png")}));
    end Plasma;

    class Hypophysis
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/hypofyza.png")}));
    end Hypophysis;

    class Heart
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/heartPict.png")}));
    end Heart;

    class SweatGland
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/potniZlaza.png")}));
    end SweatGland;

    class Cell
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/OsmothicCell.png")}));
    end Cell;

    package HeatLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -82}, {76, 44}}, fileName = "modelica://Physiolibrary/Resources/Icons/ohen.png")}));
    end HeatLib;

    package StatusLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, 40}, {72, -96}}, fileName = "modelica://Physiolibrary/Resources/Icons/tissueFitness.png")}));
    end StatusLib;

    package NervesLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -96}, {72, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/nervyNeuron.png")}));
    end NervesLib;

    package NutrientsMetabolismLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-98, -100}, {80, 40}}, fileName = "modelica://Physiolibrary/Resources/Icons/vyziva.png")}));
    end NutrientsMetabolismLib;

    package OxygenLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -98}, {78, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/O2.png")}));
    end OxygenLib;

    package ProteinsLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-98, -98}, {76, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/protein.png")}));
    end ProteinsLib;

    package SetupLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-94, -98}, {72, 44}}, fileName = "modelica://Physiolibrary/Resources/Icons/setup.png")}));
    end SetupLib;

    package CardioVascularLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -100}, {76, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/csv.png")}));
    end CardioVascularLib;

    package WaterLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-90, -84}, {72, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/indexVoda.png")}));
    end WaterLib;

    package KidneyLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -96}, {72, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/Kidney.png")}));
    end KidneyLib;

    package ElectrolytesLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-78, -94}, {64, 38}}, fileName = "modelica://Physiolibrary/Resources/Icons/electrolytes.png")}));
    end ElectrolytesLib;

    package GasesLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-88, -82}, {66, 34}}, fileName = "modelica://Physiolibrary/Resources/Icons/gases.png")}));
    end GasesLib;

    partial package GolemLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -98}, {78, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/golem.png")}));
    end GolemLib;

    partial package BaseLib
      extends Modelica.Icons.Package;
    end BaseLib;

    package HormonesLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-88, -88}, {74, 30}}, fileName = "modelica://Physiolibrary/Resources/Icons/hormony.png")}));
    end HormonesLib;

    package AutonomicControlLib
      extends Modelica.Icons.Package;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-96, -96}, {72, 42}}, fileName = "modelica://Physiolibrary/Resources/Icons/sympatetickeNervy.png")}));
    end AutonomicControlLib;

    partial class Resistor
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-70, -30}, {70, 30}}, lineColor = {0, 0, 0}, fillColor = {241, 241, 241}, fillPattern = FillPattern.Solid), Line(points = {{-90, 0}, {-70, 0}}), Line(points = {{70, 0}, {90, 0}})}));
    end Resistor;

    class Lymph
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Lymph.png")}));
    end Lymph;

    class RespiratoryCenter
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/respiracniCentrum.png")}));
    end RespiratoryCenter;

    class Oxygen
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/O2.png")}));
    end Oxygen;

    class CarbonDioxide
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/prvkyCO2.png")}));
    end CarbonDioxide;

    class AcidBase
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/acidobaze.png")}));
    end AcidBase;

    class Ventilation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/dychani.png")}));
    end Ventilation;

    class PeripheralChemoreceptors
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/baroreflex.png")}));
    end PeripheralChemoreceptors;

    class HeatCore
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, 100}, {100, -100}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo2.png")}));
    end HeatCore;

    class Glycogen
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, pattern = LinePattern.None), Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/glykogen.png")}));
    end Glycogen;

    class Lipids
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/FattyAcid.png")}));
    end Lipids;

    class KetoAcids
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/KetoAcid.png")}));
    end KetoAcids;

    class Glucose
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/glucose.png")}));
    end Glucose;

    class Lactate
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Lactate.png")}));
    end Lactate;

    class AminoAcids
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/AminoAcid.png")}));
    end AminoAcids;

    class Urea
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Urea.png")}));
    end Urea;

    class MetabolismPart
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 120}}), graphics={  Bitmap(extent={{28,44},
                {98,120}},                                                                                                                         fileName = "modelica://Physiolibrary/Resources/Icons/ohen.png")}));
    end MetabolismPart;

    class CellularMetabolism
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/cellularMetabolism.png")}));
    end CellularMetabolism;

    class FemaleSex
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/hormonesFemaleSex.png")}));
    end FemaleSex;

    class Barroreceptor
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/baroreflex.png")}));
    end Barroreceptor;

    class NervusVagus
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/vagus.png")}));
    end NervusVagus;

    class SympatheticNerves
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/sympatetickeNervy.png")}));
    end SympatheticNerves;

    class PhysicalExercise
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/cviceni.png")}));
    end PhysicalExercise;

    class SinoatrialNode
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/SANode.png")}));
    end SinoatrialNode;

    block StatusNormal
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaNormal.png")}));
    end StatusNormal;

    block StatusConfused
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaZmateni.png")}));
    end StatusConfused;

    block StatusImpaired
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaVaznejsiStav.png")}));
    end StatusImpaired;

    block StatusNotBreathing
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaNedychaSam.png")}));
    end StatusNotBreathing;

    block StatusComatose
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaKoma.png")}));
    end StatusComatose;

    block StatusMayBeDead
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaSkoroMrtvy.png")}));
    end StatusMayBeDead;

    block StatusIsReallyDead
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/siluetaMrtvy.png")}));
    end StatusIsReallyDead;

    class SkeletalMuscleAcidity
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/kyselostVeSvalech.png")}));
    end SkeletalMuscleAcidity;

    class Sodium
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Na.png")}));
    end Sodium;

    class Potassium
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/K.png")}));
    end Potassium;

    class Phosphate
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/fosfat.png")}));
    end Phosphate;

    class Sulphate
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/sulfat02.png")}));
    end Sulphate;

    class Amonium
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/NH4.png")}));
    end Amonium;

    class Chloride
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Cl.png")}));
    end Chloride;

    class LungShunt
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/lungBloodFlow.png")}));
    end LungShunt;

    class Hydrostatics
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/pressureMeassure.png")}));
    end Hydrostatics;

    class UpperTorso
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo1.png")}));
    end UpperTorso;

    class MiddleTorso
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo2.png")}));
    end MiddleTorso;

    class LowerTorso
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo3.png")}));
    end LowerTorso;

    class RedCells
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/cervenaKrvinka.png")}));
    end RedCells;

    class SystemicCirculation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/krevniRecisteSiluetacloveka.png")}));
    end SystemicCirculation;

    class PulmonaryCirculation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/krevniRecistePlice.png")}));
    end PulmonaryCirculation;

    class Blood
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/bloodProperties.png")}));
    end Blood;

    class BaseFactorIcon0
      annotation (
        Icon(graphics={  Rectangle(extent = {{-100, -40}, {100, 60}}, lineColor = {0, 127, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-76, -22}, {64, 44}}, lineColor = {0, 0, 0}, textString = "%name")}));
    end BaseFactorIcon0;

    partial class BaseFactorIcon
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 20})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -40})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -20}, {100, 20}}, lineColor = {95, 95, 95}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-90, -10}, {92, 10}}, textString = "%name", lineColor = {0, 0, 0})}));
    end BaseFactorIcon;

    partial class BaseFactorIcon2
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 60})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -60})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -50}, {100, 50}}, lineColor = {0, 127, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-86, -36}, {100, 40}}, textString = "%name", lineColor = {0, 0, 0}, fillPattern = FillPattern.Sphere)}));
    end BaseFactorIcon2;

    partial class BaseFactorIcon3
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 20})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -40})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -20}, {100, 20}}, lineColor = {0, 127, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-90, -10}, {92, 10}}, textString = "%name", lineColor = {0, 0, 0})}));
    end BaseFactorIcon3;

    partial class BaseFactorIcon4
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 20})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -40})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -20}, {100, 20}}, lineColor = {127, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-90, -10}, {92, 10}}, textString = "%name", lineColor = {0, 0, 0})}));
    end BaseFactorIcon4;

    partial class BaseFactorIcon5
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 20})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -40})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -20}, {100, 20}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere), Text(extent = {{-90, -10}, {92, 10}}, textString = "%name", lineColor = {0, 0, 0})}));
    end BaseFactorIcon5;

    partial class BaseFactorIcon6
      Modelica.Blocks.Interfaces.RealInput yBase annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 20})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -40})));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-100, -20}, {100, 20}}, lineColor = {0, 87, 87}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere)}));
    end BaseFactorIcon6;

    partial class ConversionIcon "Base icon for conversion functions"
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, lineColor = {191, 0, 0}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{-74, 0}, {30, 0}}, color = {191, 0, 0}), Polygon(points = {{80, 0}, {20, 20}, {20, -20}, {80, 0}}, lineColor = {191, 0, 0}, fillColor = {191, 0, 0}, fillPattern = FillPattern.Solid)}));
    end ConversionIcon;

    partial class Diffusion
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/diffusion.png")}));
    end Diffusion;

    class Substance
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Concentration.png")}));
    end Substance;

    class Speciation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Speciation.png"), Text(extent = {{-182, -84}, {60, -118}}, lineColor = {0, 0, 255}, textString = "%name")}));
    end Speciation;

    class MolarFlowMeasure
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/molarFlowMeassure.png")}));
    end MolarFlowMeasure;

    class GasSolubility
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/GasSolubility.png")}));
    end GasSolubility;

    class Reabsorption
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/reabsorption.svg")}));
    end Reabsorption;

    class Reabsorption2
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/reabsorption.png")}));
    end Reabsorption2;

    class Dilution
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -101}, {100, 101}}, fileName = "modelica://Physiolibrary/Resources/Icons/dilution.png", origin = {0, 33}, rotation = 270)}));
    end Dilution;

    partial class ElasticBalloon
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/elastic_vessel.svg")}));
    end ElasticBalloon;

    class BloodElasticCompartment
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/elastickyKompartment.png")}));
    end BloodElasticCompartment;

    class BloodSequesteredCompartment
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/sequerestedVolume.png")}));
    end BloodSequesteredCompartment;

    partial class HydraulicResistor
      annotation (
        Icon(graphics={  Bitmap(extent = {{-120, -42}, {120, 44}}, fileName = "modelica://Physiolibrary/Resources/Icons/resistor.svg")}));
    end HydraulicResistor;

    class FlowMeasure
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/flowMeassure.png")}));
    end FlowMeasure;

    class Membrane
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/membrane.png")}));
    end Membrane;

    class PressureMeasure
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/pressureMeassure.png")}));
    end PressureMeasure;

    class InternalElasticBalloon
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/elastic_membrane.svg")}));
    end InternalElasticBalloon;

    class Inertance
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/inertia.svg")}));
    end Inertance;

    class HydrostaticGradient
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {102, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/hydrostatic_column.svg")}));
    end HydrostaticGradient;

    class Radiator
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Radiator.png")}));
    end Radiator;

    class MichaelisMenten
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-80, -84}, {86, 26}}, fileName = "modelica://Physiolibrary/Resources/Icons/MichaelisMenten.png")}));
    end MichaelisMenten;

    class HeatAccumulation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/HeatAccumulation.png")}));
    end HeatAccumulation;

    class OsmoticCell
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/OsmothicCell.png")}));
    end OsmoticCell;

    class IdealGas
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/IdealGas.png")}));
    end IdealGas;

    class PartialPressure
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/PartialPressure.png")}));
    end PartialPressure;

    class ConservationLaw
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, fillColor = {170, 255, 213}, fillPattern = FillPattern.Solid, pattern = LinePattern.None), Polygon(points = {{-40, -60}, {-40, -20}, {-80, -40}, {-40, -60}}, pattern = LinePattern.None, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid, lineColor = {0, 0, 0}), Line(points = {{-80, 10}, {-80, -80}, {-80, -80}})}));
    end ConservationLaw;

    class Nephron
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Nefron.png")}));
    end Nephron;

    class Torso
      annotation (
        Icon(graphics={  Bitmap(extent = {{-28, 58}, {28, 98}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo1.png"), Bitmap(extent = {{-40, -24}, {40, 56}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo2.png"), Bitmap(extent = {{-40, -98}, {40, -18}}, fileName = "modelica://Physiolibrary/Resources/Icons/torzo3.png")}));
    end Torso;

    class PerfusionOD
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-160, -100}, {152, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/perfusion.png")}));
    end PerfusionOD;

    class PerfusionDO
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-160, -100}, {160, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/perfusion2.png")}));
    end PerfusionDO;

    class CollapsingVessel
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/kolaps.png")}));
    end CollapsingVessel;

    class PeripheralCirculation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/krevniReciste.png")}));
    end PeripheralCirculation;

    class HeartVentricle
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/komoraSrdce.png")}));
    end HeartVentricle;

    class Population
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Populace.png")}));
    end Population;

    class FlowFiltration
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -74}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/flowFiltration.png")}));
    end FlowFiltration;

    class Microcirculation
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent = {{-100, -98}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/microcirculation.png")}));
    end Microcirculation;

    class IdealValve
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/ideal_valve.svg")}));
    end IdealValve;

    class Pump
      annotation (
        Icon(graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/pump.svg")}));
    end Pump;

    model Arteries
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-87.243, -87.3037}, {87.243, 87.3037}}, fileName = "modelica://Physiolibrary/Resources/Icons/Arteries.png", origin = {4.25124, 18.8661}, rotation = 75)}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Arteries;

    class Atrium
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Atrium.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Atrium;

    class Cardio
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Cardio.png"), Bitmap(extent = {{-50, -38}, {52, 62}}, fileName = "modelica://Physiolibrary/Resources/Icons/Cross.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Cardio;

    class ECMO
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/ECMO.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end ECMO;

    class Heart_detailed
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Heart_detailed.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Heart_detailed;

    class O2
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/O2.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end O2;

    class Screw
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Screw.png", origin = {2, -4}, rotation = 90)}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Screw;

    class Settings
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Settings.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Settings;

    class Valve
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Valve.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Valve;

    class Ventricle
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-100, -100}, {100, 100}}, fileName = "modelica://Physiolibrary/Resources/Icons/Ventricle.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Ventricle;

    class Vessels
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Bitmap(extent = {{-130.465, -88.1195}, {130.465, 88.1195}}, origin = {0.99971, 8.9994}, rotation = -68, fileName = "modelica://Physiolibrary/Resources/Icons/Vessels.png")}),
        Diagram(coordinateSystem(preserveAspectRatio = false)));
    end Vessels;
    annotation (
      Documentation(revisions = ""));
  end Icons;

  package Types "Physiological units with nominals"
    //extends Modelica.Icons.TypesPackage;
    extends Modelica.Icons.Package;
    //If you have an idea to add the next physiological type to the next version, please write me at marek@matfyz.cz. Thank you

    package UsersGuide "User's Guide"
      extends Modelica.Icons.Information;

      class NewType "Adding new type"
        extends Modelica.Icons.Information;
        annotation (
          Documentation(info = "<html>
	<p>Definition of new type (&quot;QuantityX&quot;) in Physiolibrary:</p>
	<ul>
	<li>Define base type Types.QuantityX with SI units in &quot;final unit&quot;, default display units and nominal (e.g. value of one display unit at SI units). </li>
	</ul>
	<p>Optional: </p>
	<ul>
	<li>Define typed input and output connectors for QuantityX: Types.RealIO.QuantityXInput and Types.RealIO.QuantityXOutput. </li>
	<li>Define typed constant for QuantityX: Types.Constants.QuantityXConst </li>
	<li>Define typed RealInputParameter for QuantityX: Types.RealInputParameters.QuantityX </li>
	<li>Define typed replaceable variable RealTypes for QuantityX: Types.RealTypes.QuantityX </li>
	</ul>
	</html>"));
      end NewType;
      annotation (
        DocumentationClass = true,
        Documentation(info = "<html>
	<p>Package <b>Physiolibrary</b> is a modelica package for <b>Human Physiology</b> that is developed from <b>HumMod</b> modelica implementation, see <a href=\"http://patf-biokyb.lf1.cuni.cz/wiki/hummod/hummod\">http://hummod.org</a>. It provides constants, types, connectors, partial models and model components fitted for physiological models of human body. </p>
	<p>This is a short <b>User&apos;s Guide</b> for the overall library. Some of the main sublibraries have their own User&apos;s Guides that can be accessed by the following links: </p>
	<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
	<td valign=\"top\"><p>Types </p></td>
	<td valign=\"top\"><p>Physiological types. Physiological unit vs. SI units, nominals, inputs/outputs, typed constants.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Blocks</p></td>
	<td valign=\"top\"><p>Useful blocks, that are missing in package Modelica.Blocks (MSL 3.2), cubic interpolation curves, multiplication factors.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Chemical</p></td>
	<td valign=\"top\"><p>Library to chemical subsystems such as intravascular, interstitial or intracellular chemical substances in fluxes and interactions.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Hydraulic</p></td>
	<td valign=\"top\"><p>Library to hydraulic subsystems such as in cardiovascular system.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Thermal</p></td>
	<td valign=\"top\"><p>Library of termoregulation support.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Osmotic</p></td>
	<td valign=\"top\"><p>Library to model water fluxes through semipermeable membrane caused by osmotic pressure.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Mixed</p></td>
	<td valign=\"top\"><p>Library to join domains above together.</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>Icons</p></td>
	<td valign=\"top\"><p>Icons</p></td>
	</tr>
	<tr>
	<td valign=\"top\"><p>FileUtilities</p></td>
	<td valign=\"top\"><p>Read/write values from/to file. </p></td>
	</tr>
	</table>
	</html>"));
    end UsersGuide;

    package Constants
      extends Modelica.Icons.SourcesPackage;

      block AccelerationConst "Constant signal of type Acceleration"
        parameter Types.Acceleration k "Constant Acceleration output value";
        RealIO.AccelerationOutput y "Acceleration constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "acceleration",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end AccelerationConst;

      block AmountOfSubstanceConst "Constant signal of type AmountOfSubstance"
        parameter Types.AmountOfSubstance k "Constant AmountOfSubstance output value";
        RealIO.AmountOfSubstanceOutput y "AmountOfSubstance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "amountOfSubstance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end AmountOfSubstanceConst;

      block ConcentrationConst "Constant signal of type Concentration"
        parameter Types.Concentration k "Constant Concentration output value";
        RealIO.ConcentrationOutput y "Concentration constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "concentration",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end ConcentrationConst;

      block DensityConst "Constant signal of type Density"
        parameter Types.Density k "Constant Density output value";
        RealIO.DensityOutput y "Density constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "density",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end DensityConst;

      block DiffusionPermeabilityConst "Constant signal of type DiffusionPermeability"
        parameter Types.DiffusionPermeability k "Constant DiffusionPermeability output value";
        RealIO.DiffusionPermeabilityOutput y "DiffusionPermeability constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "diffusionPermeability",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end DiffusionPermeabilityConst;

      block ElectricChargeConst "Constant signal of type ElectricCharge"
        parameter Types.ElectricCharge k "Constant ElectricCharge output value";
        RealIO.ElectricChargeOutput y "ElectricCharge constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "electricCharge",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end ElectricChargeConst;

      block ElectricCurrentConst "Constant signal of type ElectricCurrent"
        parameter Types.ElectricCurrent k "Constant ElectricCurrent output value";
        RealIO.ElectricCurrentOutput y "ElectricCurrent constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "electricCurrent",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end ElectricCurrentConst;

      block ElectricPotentialConst "Constant signal of type ElectricPotential"
        parameter Types.ElectricPotential k "Constant ElectricPotential output value";
        RealIO.ElectricPotentialOutput y "ElectricPotential constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "electricPotential",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end ElectricPotentialConst;

      block EnergyConst "Constant signal of type Energy"
        parameter Types.Energy k "Constant Energy output value";
        RealIO.EnergyOutput y "Energy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "energy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end EnergyConst;

      block EnthalpyConst "Constant signal of type Enthalpy"
        parameter Types.Enthalpy k "Constant Enthalpy output value";
        RealIO.EnthalpyOutput y "Enthalpy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "enthalpy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end EnthalpyConst;

      block MolarEnthalpyConst "Constant signal of type MolarEnthalpy"
        parameter Types.MolarEnthalpy k "Constant Enthalpy output value";
        RealIO.MolarEnthalpyOutput y "Molar Enthalpy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "molarEnthalpy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MolarEnthalpyConst;

      block FractionConst "Constant signal of type Fraction"
        parameter Types.Fraction k "Constant Fraction output value";
        RealIO.FractionOutput y "Fraction constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "fraction",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end FractionConst;

      block FrequencyConst "Constant signal of type Frequency"
        parameter Types.Frequency k "Constant Frequency output value";
        RealIO.FrequencyOutput y "Frequency constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "frequency",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end FrequencyConst;

      block GasSolubilityConst "Constant signal of type GasSolubility"
        parameter Types.GasSolubility k "Constant GasSolubility output value";
        RealIO.GasSolubilityOutput y "GasSolubility constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "gasSolubility",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end GasSolubilityConst;

      block HeatConst "Constant signal of type Heat"
        parameter Types.Heat k "Constant Heat output value";
        RealIO.HeatOutput y "Heat constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "heat",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HeatConst;

      block HeightConst "Constant signal of type Height"
        parameter Types.Height k "Constant Height output value";
        RealIO.HeightOutput y "Height constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "height",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HeightConst;

      block HeatFlowRateConst "Constant signal of type HeatFlowRate"
        parameter Types.HeatFlowRate k "Constant HeatFlowRate output value";
        RealIO.HeatFlowRateOutput y "HeatFlowRate constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "heatFlowRate",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HeatFlowRateConst;

      block HydraulicComplianceConst "Constant signal of type HydraulicCompliance"
        parameter Types.HydraulicCompliance k "Constant HydraulicCompliance output value";
        RealIO.HydraulicComplianceOutput y "HydraulicCompliance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "hydraulicCompliance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HydraulicComplianceConst;

      block HydraulicElastanceConst "Obsolete, please use HydraulicCompliance instead!"
        extends Modelica.Icons.ObsoleteModel;
        parameter Types.HydraulicElastance k "Hydraulic elastance";
        RealIO.HydraulicElastanceOutput y "HydraulicElastance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "hydraulicElastance",
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}),
          Documentation(info = "<html>
        <p>Please use the reciprocal value of hydraulic elastance, wich is called hydraulic compliance for the compatibility with other blocks and models!</p>
        <p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Blocks.Math.Reciprocal) before connecting to library components!</p>
        </html>"));
      end HydraulicElastanceConst;

      block HydraulicElastanceToComplianceConst "Constant signal of type HydraulicCompliance from HydraulicElastance constant"
        parameter Types.HydraulicElastance k "Reciprocal constant value of hydraulic compliance";
        RealIO.HydraulicComplianceOutput y "HydraulicCompliance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1 / k;
        annotation (
          defaultComponentName = "hydraulicElastance2Compliance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HydraulicElastanceToComplianceConst;

      block HydraulicConductanceConst "Constant signal of type HydraulicConductance"
        parameter Types.HydraulicConductance k "Constant HydraulicConductance output value";
        RealIO.HydraulicConductanceOutput y "HydraulicConductance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "hydraulicConductance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HydraulicConductanceConst;

      block HydraulicResistanceConst "Obsolete, please use HydraulicConductance instead!"
        parameter Types.HydraulicResistance k "Hydraulic resistance";
        Modelica.Blocks.Interfaces.RealOutput y(final quantity = "HydraulicConductance", final unit = "(Pa.s)/m3", displayUnit = "(mmHg.min)/ml", nominal = 1e+6 * 133.322387415 * 60) "HydraulicResistance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "hydraulicResistance",
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}),
          Documentation(info = "<html>
        <p>Please use the reciprocal value of hydraulic resistance, wich is called hydraulic conductance for the compatibility with other blocks and models!</p>
        <p>Because zero hydraulic conductance means zero volumetric flow, it is much better to use this reciprocal value of hydraulic resistance.</p>
        <p>Even it is not recommended, you can use this block, but do not forget to make reciprocal value (in example using Blocks.Math.Reciprocal) before connecting to library components!</p>
        </html>"));
      end HydraulicResistanceConst;

      block HydraulicResistanceToConductanceConst "Constant signal of type HydraulicConductance from HydraulicResistance parameter"
        parameter Types.HydraulicResistance k "Reciprocal constant value of hydraulic conductance";
        RealIO.HydraulicConductanceOutput y "HydraulicConductance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1 / k;
        annotation (
          defaultComponentName = "hydraulicResistance2conductance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HydraulicResistanceToConductanceConst;

      block HydraulicInertanceConst "Constant signal of type HydraulicInertance"
        parameter Types.HydraulicInertance k "Constant HydraulicInertance output value";
        RealIO.HydraulicInertanceOutput y "HydraulicInertance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "hydraulicInertance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end HydraulicInertanceConst;

      block MassConst "Constant signal of type Mass"
        parameter Types.Mass k "Constant Mass output value";
        RealIO.MassOutput y "Mass constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "mass",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MassConst;

      block MassConcentrationConst "Constant signal of type MassConcentration"
        parameter Types.MassConcentration k "Constant MassConcentration output value";
        RealIO.MassConcentrationOutput y "MassConcentration constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "massConcentration",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MassConcentrationConst;

      block MassFlowRateConst "Constant signal of type MassFlowRate"
        parameter Types.MassFlowRate k "Constant MassFlowRate output value";
        RealIO.MassFlowRateOutput y "MassFlowRate constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "massFlowRate",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MassFlowRateConst;

      block MolarFlowRateConst "Constant signal of type MolarFlowRate"
        parameter Types.MolarFlowRate k "Constant MolarFlowRate output value";
        RealIO.MolarFlowRateOutput y "MolarFlowRate constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "molarFlowRate",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MolarFlowRateConst;

      block OsmolarityConst "Constant signal of type Osmolarity"
        parameter Types.Osmolarity k "Constant Osmolarity output value";
        RealIO.OsmolarityOutput y "Osmolarity constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "osmolarity",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end OsmolarityConst;

      block OsmoticPermeabilityConst "Constant signal of type OsmoticPermeability"
        parameter Types.OsmoticPermeability k "Constant OsmoticPermeability output value";
        RealIO.OsmoticPermeabilityOutput y "OsmoticPermeability constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "osmoticPermeability",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end OsmoticPermeabilityConst;

      block PressureConst "Constant signal of type Pressure"
        parameter Types.Pressure k "Constant Pressure output value";
        RealIO.PressureOutput y "Pressure constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "pressure",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PressureConst;

      block SpecificEnergyConst "Constant signal of type SpecificEnergy"
        parameter Types.SpecificEnergy k "Constant SpecificEnergy output value";
        RealIO.SpecificEnergyOutput y "SpecificEnergy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "specificEnergy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end SpecificEnergyConst;

      block SpecificEnthalpyConst "Constant signal of type SpecificEnthalpy"
        parameter Types.SpecificEnthalpy k "Constant SpecificEnthalpy output value";
        RealIO.SpecificEnthalpyOutput y "SpecificEnthalpy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "specificEnthalpy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end SpecificEnthalpyConst;

      block SpecificHeatCapacityConst "Constant signal of type SpecificHeatCapacity"
        parameter Types.SpecificHeatCapacity k "Constant SpecificHeatCapacity output value";
        RealIO.SpecificHeatCapacityOutput y "SpecificHeatCapacity constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "specificHeatCapacity",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end SpecificHeatCapacityConst;

      block TemperatureConst "Constant signal of type Temperature"
        parameter Types.Temperature k "Constant Temperature output value";
        RealIO.TemperatureOutput y "Temperature constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "temperature",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end TemperatureConst;

      block ThermalConductanceConst "Constant signal of type ThermalConductance"
        parameter Types.ThermalConductance k "Constant ThermalConductance output value";
        RealIO.ThermalConductanceOutput y "ThermalConductance constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "thermalConductance",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end ThermalConductanceConst;

      block TimeConst "Constant signal of type Time"
        parameter Types.Time k "Constant Time output value";
        RealIO.TimeOutput y "Time constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "time",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end TimeConst;

      block VolumeFlowRateConst "Constant signal of type VolumeFlowRate"
        parameter Types.VolumeFlowRate k "Constant VolumeFlowRate output value";
        RealIO.VolumeFlowRateOutput y "VolumeFlowRate constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "volumeFlowRate",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end VolumeFlowRateConst;

      block VolumeConst "Constant signal of type Volume"
        parameter Types.Volume k "Constant Volume output value";
        RealIO.VolumeOutput y "Volume constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "volume",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end VolumeConst;

      block DeprecatedUntypedConstant "Deprecated Untyped Constant for automatic conversion from initial versions of Physiolibrary"
        extends Modelica.Icons.ObsoleteModel;
        parameter Real k "Untyped constant output value";
        parameter String varName = "";
        parameter String units = "1";
        Modelica.Blocks.Interfaces.RealOutput y "Untyped constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "acceleration",
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end DeprecatedUntypedConstant;

      block pHConst "Constant signal of type pH"
        parameter Types.pH k "Constant pH output value";
        Types.RealIO.pHOutput y "pH constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "pH",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end pHConst;

      block VolumeDensityOfChargeConst "Constant signal of type VolumeDensityOfCharge"
        parameter Types.VolumeDensityOfCharge k "Constant VolumeDensityOfCharge output value";
        Types.RealIO.VolumeDensityOfChargeOutput y "VolumeDensityOfCharge constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "volumeDensityOfCharge",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end VolumeDensityOfChargeConst;

      block VelocityConst "Constant signal of type Velocity"
        parameter Types.Velocity k "Constant Velocity output value";
        Types.RealIO.VelocityOutput y "Velocity constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "velocity",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end VelocityConst;

      block PowerConst "Constant signal of type Power"
        parameter Types.Power k "Constant Power output value";
        RealIO.PowerOutput y "Power constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "power",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PowerConst;

      block PositionConst "Constant signal of type Position"
        parameter Types.Position k "Constant Position output value";
        RealIO.PositionOutput y "Position constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "height",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PositionConst;

      block MolarEnergyConst "Constant signal of type MolarEnergy"
        parameter Types.MolarEnergy k "Constant MolarEnergy output value";
        RealIO.MolarEnergyOutput y "MolarEnergy constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "molarEnergy",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end MolarEnergyConst;

      block OneConst "1"
        RealIO.FractionOutput y "=1" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1;
        annotation (
          defaultComponentName = "one",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "1")}));
      end OneConst;

      block PopulationConst "Constant signal of type Population"
        parameter Types.Population k "Constant Population output value";
        RealIO.PopulationOutput y "Population constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "population",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PopulationConst;

      block PopulationChangeConst "Constant signal of type PopulationChange"
        parameter Types.PopulationChange k "Constant PopulationChange output value";
        RealIO.PopulationChangeOutput y "PopulationChange constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = k;
        annotation (
          defaultComponentName = "populationChange",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PopulationChangeConst;

      block PopulationChangePerMemberConst "Constant signal of type PopulationChangePerMember"
        parameter Types.Time LifeTime "Mean lifetime as 1/PopulationChangePerMember output value";
        RealIO.PopulationChangePerMemberOutput y "PopulationChangePerMember constant" annotation (
          Placement(transformation(extent = {{40, -10}, {60, 10}}), iconTransformation(extent = {{40, -10}, {60, 10}})));
      equation
        y = 1 / LifeTime;
        annotation (
          defaultComponentName = "populationChangePerMember",
          Diagram(coordinateSystem(extent = {{-40, -40}, {40, 40}})),
          Icon(coordinateSystem(extent = {{-40, -40}, {40, 40}}, preserveAspectRatio = false), graphics={  Rectangle(extent = {{-40, 40}, {40, -40}}, lineColor = {0, 0, 0}, radius = 10, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -44}, {100, -64}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "%name"), Text(extent = {{-40, 10}, {40, -10}}, lineColor = {0, 0, 0}, fillColor = {236, 236, 236}, fillPattern = FillPattern.Solid, textString = "Const")}));
      end PopulationChangePerMemberConst;
    end Constants;

    package RealIO
      extends Modelica.Icons.Package;
      connector AccelerationInput = input Acceleration "input Acceleration as connector" annotation (
        defaultComponentName = "acceleration",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Acceleration.
            </p>
            </html>"));
      connector AccelerationOutput = output Acceleration "output Acceleration as connector" annotation (
        defaultComponentName = "acceleration",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector AmountOfSubstanceInput = input AmountOfSubstance "input AmountOfSubstance as connector" annotation (
        defaultComponentName = "amountofsubstance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type AmountOfSubstance.
            </p>
            </html>"));
      connector AmountOfSubstanceOutput = output AmountOfSubstance "output AmountOfSubstance as connector" annotation (
        defaultComponentName = "amountofsubstance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector ConcentrationInput = input Concentration "input Concentration as connector" annotation (
        defaultComponentName = "concentration",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Concentration.
            </p>
            </html>"));
      connector ConcentrationOutput = output Concentration "output Concentration as connector" annotation (
        defaultComponentName = "concentration",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector DiffusionPermeabilityInput = input DiffusionPermeability "input DiffusionPermeability as connector" annotation (
        defaultComponentName = "diffusionmembranepermeability",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type DiffusionMembranePermeability.
            </p>
            </html>"));
      connector DiffusionPermeabilityOutput = output DiffusionPermeability "output DiffusionPermeability as connector" annotation (
        defaultComponentName = "diffusionmembranepermeability",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector ElectricCurrentInput = input ElectricCurrent "input ElectricCurrent as connector" annotation (
        defaultComponentName = "electriccurrent",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type ElectricCurrent.
            </p>
            </html>"));
      connector ElectricCurrentOutput = output ElectricCurrent "output ElectricCurrent as connector" annotation (
        defaultComponentName = "electriccurrent",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector ElectricChargeInput = input ElectricCharge "input ElectricCharge as connector" annotation (
        defaultComponentName = "electriccharge",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type ElectricCharge.
            </p>
            </html>"));
      connector ElectricChargeOutput = output ElectricCharge "output ElectricCharge as connector" annotation (
        defaultComponentName = "electriccharge",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector EnergyInput = input Energy "input Energy as connector" annotation (
        defaultComponentName = "energy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Energy.
            </p>
            </html>"));
      connector EnergyOutput = output Energy "output Energy as connector" annotation (
        defaultComponentName = "energy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector EnthalpyInput = input Enthalpy "input Enthalpy as connector" annotation (
        defaultComponentName = "enthalpy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Enthalpy.
            </p>
            </html>"));
      connector EnthalpyOutput = output Enthalpy "output Enthalpy as connector" annotation (
        defaultComponentName = "enthalpy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector MolarEnthalpyInput = input MolarEnthalpy "input MolarEnthalpy as connector" annotation (
        defaultComponentName = "molarEnthalpy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MolarEnthalpy.
            </p>
            </html>"));
      connector MolarEnthalpyOutput = output MolarEnthalpy "output MolarEnthalpy as connector" annotation (
        defaultComponentName = "molarEnthalpy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HeatInput = input Heat "input Heat as connector" annotation (
        defaultComponentName = "heat",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Heat.
            </p>
            </html>"));
      connector HeatOutput = output Heat "output Heat as connector" annotation (
        defaultComponentName = "heat",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HeatFlowRateInput = input HeatFlowRate "input HeatFlowRate as connector" annotation (
        defaultComponentName = "heatflowrate",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HeatFlowRate.
            </p>
            </html>"));
      connector HeatFlowRateOutput = output HeatFlowRate "output HeatFlowRate as connector" annotation (
        defaultComponentName = "heatflowrate",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HeightInput = input Height "input Height as connector" annotation (
        defaultComponentName = "height",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Height.
            </p>
            </html>"));
      connector HeightOutput = output Height "output Height as connector" annotation (
        defaultComponentName = "height",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector MassInput = input Mass "input Mass as connector" annotation (
        defaultComponentName = "mass",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Mass.
            </p>
            </html>"));
      connector MassOutput = output Mass "output Mass as connector" annotation (
        defaultComponentName = "mass",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector MassFractionInput = input MassFraction "input Mass Fraction as connector" annotation (
        defaultComponentName = "massFraction",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MassFraction.
            </p>
            </html>"));
      connector MassFractionOutput = output MassFraction "output MassFraction as connector" annotation (
        defaultComponentName = "massFraction",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector MassFlowRateInput = input MassFlowRate "input MassFlowRate as connector" annotation (
        defaultComponentName = "massflowrate",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MassFlowRate.
            </p>
            </html>"));
      connector MassFlowRateOutput = output MassFlowRate "output MassFlowRate as connector" annotation (
        defaultComponentName = "massflowrate",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector MolarFlowRateInput = input MolarFlowRate "input MolarFlowRate as connector" annotation (
        defaultComponentName = "molarflowrate",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MolarFlowRate.
            </p>
            </html>"));
      connector MolarFlowRateOutput = output MolarFlowRate "output MolarFlowRate as connector" annotation (
        defaultComponentName = "molarflowrate",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector OsmolarityInput = input Osmolarity "input Concentration as connector" annotation (
        defaultComponentName = "osmolarity",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Concentration.
            </p>
            </html>"));
      connector OsmolarityOutput = output Osmolarity "output Concentration as connector" annotation (
        defaultComponentName = "osmolarity",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector PressureInput = input Pressure "input Pressure as connector" annotation (
        defaultComponentName = "pressure",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Pressure.
            </p>
            </html>"));
      connector PressureOutput = output Pressure "output Pressure as connector" annotation (
        defaultComponentName = "pressure",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector VolumeInput = input Volume "input Volume as connector" annotation (
        defaultComponentName = "volume",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Volume.
            </p>
            </html>"));
      connector VolumeOutput = output Volume "output Volume as connector" annotation (
        defaultComponentName = "volume",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector VolumeFlowRateInput = input VolumeFlowRate "input VolumeFlowRate as connector" annotation (
        defaultComponentName = "volumeflowrate",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type VolumeFlowRate.
            </p>
            </html>"));
      connector VolumeFlowRateOutput = output VolumeFlowRate "output VolumeFlowRate as connector" annotation (
        defaultComponentName = "volumeflowrate",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector TemperatureInput = input Temperature "input Temperature as connector" annotation (
        defaultComponentName = "temperature",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Temperature.
            </p>
            </html>"));
      connector TemperatureOutput = output Temperature "output Temperature as connector" annotation (
        defaultComponentName = "temperature",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector TimeInput = input Time "input Time as connector" annotation (
        defaultComponentName = "time",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Time.
            </p>
            </html>"));
      connector TimeOutput = output Time "output Time as connector" annotation (
        defaultComponentName = "time",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector ThermalConductanceInput = input ThermalConductance "input ThermalConductance as connector" annotation (
        defaultComponentName = "thermalconductance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type ThermalConductance.
            </p>
            </html>"));
      connector ThermalConductanceOutput = output ThermalConductance "output ThermalConductance as connector" annotation (
        defaultComponentName = "thermalconductance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector ElectricPotentialInput = input ElectricPotential "input ElectricPotential as connector" annotation (
        defaultComponentName = "electricpotential",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type ElectricPotential.
            </p>
            </html>"));
      connector ElectricPotentialOutput = output ElectricPotential "output ElectricPotential as connector" annotation (
        defaultComponentName = "electricpotential",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector FractionInput = input Fraction "input Fraction as connector" annotation (
        defaultComponentName = "fraction",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Fraction.
            </p>
            </html>"));
      connector FractionOutput = output Fraction "output Fraction as connector" annotation (
        defaultComponentName = "fraction",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector FrequencyInput = input Frequency "input Frequency as connector" annotation (
        defaultComponentName = "frequency",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Frequency.
            </p>
            </html>"));
      connector FrequencyOutput = output Frequency "output Frequency as connector" annotation (
        defaultComponentName = "frequency",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Frequency.
          </p>
          </html>"));
      connector OsmoticPermeabilityInput = input OsmoticPermeability "input OsmoticPermeability as connector" annotation (
        defaultComponentName = "osmoticmembranepermeability",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type OsmoticMembranePermeability.
            </p>
            </html>"));
      connector OsmoticPermeabilityOutput = output OsmoticPermeability "output OsmoticPermeability as connector" annotation (
        defaultComponentName = "osmoticmembranepermeability",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HydraulicConductanceInput = input HydraulicConductance "input HydraulicConductance as connector" annotation (
        defaultComponentName = "hydraulicconductance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HydraulicConductance.
            </p>
            </html>"));
      connector HydraulicConductanceOutput = output HydraulicConductance "output HydraulicConductance as connector" annotation (
        defaultComponentName = "hydraulicconductance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HydraulicResistanceInput = input HydraulicResistance "input HydraulicResistance as connector" annotation (
        defaultComponentName = "hydraulicResistance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HydraulicResistance.
            </p>
            </html>"));
      connector HydraulicResistanceOutput = output HydraulicResistance "output HydraulicResistance as connector" annotation (
        defaultComponentName = "hydraulicResistance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HydraulicComplianceInput = input HydraulicCompliance "input HydraulicCompliance as connector" annotation (
        defaultComponentName = "hydrauliccompliance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HydraulicCompliance.
            </p>
            </html>"));
      connector HydraulicComplianceOutput = output HydraulicCompliance "output HydraulicCompliance as connector" annotation (
        defaultComponentName = "hydrauliccompliance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HydraulicElastanceInput = input HydraulicElastance "input HydraulicElastance as connector" annotation (
        defaultComponentName = "hydraulicelastance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HydraulicElastance.
            </p>
            </html>"));
      connector HydraulicElastanceOutput = output HydraulicElastance "output HydraulicElastance as connector" annotation (
        defaultComponentName = "hydraulicelastance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector DensityInput = input Density "input Density as connector" annotation (
        defaultComponentName = "density",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Volume.
            </p>
            </html>"));
      connector DensityOutput = output Density "output Density as connector" annotation (
        defaultComponentName = "density",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector HydraulicInertanceInput = input HydraulicInertance "input HydraulicInertance as connector" annotation (
        defaultComponentName = "hydraulicinertance",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type HydraulicInertance.
            </p>
            </html>"));
      connector HydraulicInertanceOutput = output HydraulicInertance "output HydraulicInertance as connector" annotation (
        defaultComponentName = "hydraulicinertance",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector GasSolubilityInput = input GasSolubility "input GasSolubility as connector" annotation (
        defaultComponentName = "gassolubility",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type GasSolubility.
            </p>
            </html>"));
      connector GasSolubilityOutput = output GasSolubility "output GasSolubility as connector" annotation (
        defaultComponentName = "gassolubility",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector SpecificEnergyInput = input SpecificEnergy "input SpecificEnergy as connector" annotation (
        defaultComponentName = "specificEnergy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Volume.
            </p>
            </html>"));
      connector SpecificEnergyOutput = output SpecificEnergy "output SpecificEnergy as connector" annotation (
        defaultComponentName = "specificEnergy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector SpecificEnthalpyInput = input SpecificEnthalpy "input SpecificEnthalpy as connector" annotation (
        defaultComponentName = "specificEnthalpy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type SpecificEnthalpy.
            </p>
            </html>"));
      connector SpecificEnthalpyOutput = output SpecificEnthalpy "output SpecificEnthalpy as connector" annotation (
        defaultComponentName = "specificEnthalpy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector SpecificHeatCapacityInput = input SpecificHeatCapacity "input SpecificHeatCapacity as connector" annotation (
        defaultComponentName = "specificHeatCapacity",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Volume.
            </p>
            </html>"));
      connector SpecificHeatCapacityOutput = output SpecificHeatCapacity "output SpecificHeatCapacity as connector" annotation (
        defaultComponentName = "specificHeatCapacity",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Real.
          </p>
          </html>"));
      connector pHInput = input pH "input pH as connector" annotation (
        defaultComponentName = "pH",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type pH.
            </p>
            </html>"));
      connector pHOutput = output pH "output pH as connector" annotation (
        defaultComponentName = "pH",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type pH.
          </p>
          </html>"));
      connector VolumeDensityOfChargeInput = input VolumeDensityOfCharge "input VolumeDensityOfCharge as connector" annotation (
        defaultComponentName = "volumeDensityOfCharge",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type VolumeDensityOfCharge.
            </p>
            </html>"));
      connector VolumeDensityOfChargeOutput = output VolumeDensityOfCharge "output VolumeDensityOfCharge as connector" annotation (
        defaultComponentName = "volumeDensityOfCharge",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type VolumeDensityOfCharge.
          </p>
          </html>"));
      connector MassConcentrationInput = input MassConcentration "input MassConcentration as connector" annotation (
        defaultComponentName = "massConcentration",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MassConcentration.
            </p>
            </html>"));
      connector MassConcentrationOutput = output MassConcentration "output MassConcentration as connector" annotation (
        defaultComponentName = "massConcentration",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type MassConcentration.
          </p>
          </html>"));
      connector VelocityInput = input Velocity "input Velocity as connector" annotation (
        defaultComponentName = "velocity",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Velocity.
            </p>
            </html>"));
      connector VelocityOutput = output Velocity "output Velocity as connector" annotation (
        defaultComponentName = "velocity",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Velocity.
          </p>
          </html>"));
      connector PowerInput = input Power "input Power as connector" annotation (
        defaultComponentName = "power",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Power.
            </p>
            </html>"));
      connector PowerOutput = output Power "output Power as connector" annotation (
        defaultComponentName = "power",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Power.
          </p>
          </html>"));
      connector PositionInput = input Position "input Position as connector" annotation (
        defaultComponentName = "position",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Position.
            </p>
            </html>"));
      connector PositionOutput = output Position "output Position as connector" annotation (
        defaultComponentName = "position",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Position.
          </p>
          </html>"));
      connector MolarEnergyInput = input MolarEnergy "input MolarEnergy as connector" annotation (
        defaultComponentName = "molarEnergy",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type MolarEnergy.
            </p>
            </html>"));
      connector MolarEnergyOutput = output MolarEnergy "output MolarEnergy as connector" annotation (
        defaultComponentName = "molarEnergy",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type MolarEnergy.
          </p>
          </html>"));
      connector PopulationInput = input Population "input Population as connector" annotation (
        defaultComponentName = "population",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type Population.
            </p>
            </html>"));
      connector PopulationOutput = output Population "output Population as connector" annotation (
        defaultComponentName = "population",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type Population.
          </p>
          </html>"));
      connector PopulationChangeInput = input PopulationChange "input PopulationChange as connector" annotation (
        defaultComponentName = "populationChange",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type PopulationChange.
            </p>
            </html>"));
      connector PopulationChangeOutput = output PopulationChange "output PopulationChange as connector" annotation (
        defaultComponentName = "populationChange",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type PopulationChange.
          </p>
          </html>"));
      connector PopulationChangePerMemberInput = input
          PopulationChangePerMember                                              "input PopulationChangePerMember as connector" annotation (
        defaultComponentName = "populationChangePerMember",
        Icon(graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid)}, coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.2)),
        Diagram(coordinateSystem(preserveAspectRatio = true, initialScale = 0.2, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{0, 50}, {100, 0}, {0, -50}, {0, 50}}, lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, fillPattern = FillPattern.Solid), Text(extent = {{-10, 85}, {-10, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
            <p>
            Connector with one input signal of type PopulationChangePerMember.
            </p>
            </html>"));
      connector PopulationChangePerMemberOutput = output
          PopulationChangePerMember                                                "output PopulationChangePerMember as connector" annotation (
        defaultComponentName = "populationChangePerMember",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 100}, {100, 0}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {1, 1}), graphics={  Polygon(points = {{-100, 50}, {0, 0}, {-100, -50}, {-100, 50}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{30, 110}, {30, 60}}, lineColor = {0, 0, 127}, textString = "%name")}),
        Documentation(info = "<html>
          <p>
          Connector with one output signal of type PopulationChangePerMember.
          </p>
          </html>"));
    end RealIO;

    expandable connector BusConnector "Empty control bus that is adapted to the signals connected to it"
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Rectangle(extent = {{-20, 2}, {20, -2}}, lineColor = {0, 0, 255}, lineThickness = 0.5), Polygon(points = {{-80, 50}, {80, 50}, {100, 30}, {80, -40}, {60, -50}, {-60, -50}, {-80, -40}, {-100, 30}, {-80, 50}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-65, 25}, {-55, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-5, 25}, {5, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{55, 25}, {65, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-35, -15}, {-25, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{25, -15}, {35, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Polygon(points = {{-40, 25}, {40, 25}, {50, 15}, {40, -20}, {30, -25}, {-30, -25}, {-40, -20}, {-50, 15}, {-40, 25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-32.5, 7.5}, {-27.5, 12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-2.5, 12.5}, {2.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{27.5, 12.5}, {32.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-17.5, -7.5}, {-12.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{12.5, -7.5}, {17.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 70}, {150, 40}}, lineColor = {0, 0, 0}, textString = "%name")}),
        Documentation(info = "<html>
        <p>
        This connector defines the \"expandable connector\" that
        is used as bus in the Physiomodel (www.physiomodel.org).
        Note, this connector is \"empty\". When using it, the actual content is
        constructed by the signals connected to this bus.
        </p>
        </html>"));
    end BusConnector;

    expandable connector TissueBusConnector "Empty control bus that is adapted to the signals connected to it"
    annotation (
      Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Rectangle(extent = {{-20, 2}, {20, -2}}, lineColor = {0, 0, 255}, lineThickness = 0.5), Polygon(
            points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},{-60,-50},{-80,
                -40},{-100,30},{-80,50}},
            lineColor={0,0,0},
            fillColor={0,255,0},
            fillPattern=FillPattern.Solid),                                                                                                                                                                                                        Ellipse(extent = {{-65, 25}, {-55, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-5, 25}, {5, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{55, 25}, {65, 15}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-35, -15}, {-25, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{25, -15}, {35, -25}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid)}),
      Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.2), graphics={  Polygon(
            points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},
                {-50,15},{-40,25}},
            lineColor={0,0,0},
            fillColor={0,255,0},
            fillPattern=FillPattern.Solid),                                                                                                                                                                                                        Ellipse(extent = {{-32.5, 7.5}, {-27.5, 12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-2.5, 12.5}, {2.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{27.5, 12.5}, {32.5, 7.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{-17.5, -7.5}, {-12.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Ellipse(extent = {{12.5, -7.5}, {17.5, -12.5}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 70}, {150, 40}}, lineColor = {0, 0, 0}, textString = "%name")}),
      Documentation(info = "<html>
        <p>
        This connector defines the \"expandable connector\" that
        is used as bus in the Physiomodel (www.physiomodel.org).
        Note, this connector is \"empty\". When using it, the actual content is
        constructed by the signals connected to this bus.
        </p>
        </html>"));
    end TissueBusConnector;

    type Energy = Modelica.Units.SI.Energy(displayUnit = "kcal", nominal = 4186.8);
    type Time = Modelica.Units.SI.Time(displayUnit = "min", nominal = 60);
    type Frequency = Modelica.Units.SI.Frequency(displayUnit = "1/min");
    type Mass = Modelica.Units.SI.Mass(displayUnit = "g", nominal = 1e-3, min = 0, max = Modelica.Constants.inf);
    type MassFraction = Modelica.Units.SI.MassFraction(nominal = 0.1, min = ModelicaServices.Machine.small, max = Modelica.Constants.inf);
    type MassFlowRate = Modelica.Units.SI.MassFlowRate(displayUnit = "mg/min", nominal = 0.001);
    type Density = Modelica.Units.SI.Density(displayUnit = "kg/l", nominal = 1e-3);
    type MolarMass = Modelica.Units.SI.MolarMass(displayUnit = "kDa", nominal = 1);
    type Height = Modelica.Units.SI.Height(displayUnit = "cm", nominal = 1e-2);
    type Position = Modelica.Units.SI.Position(displayUnit = "cm", nominal = 1e-2);
    type Velocity = Modelica.Units.SI.Velocity(displayUnit = "km/h", nominal = 1);
    type Acceleration = Modelica.Units.SI.Acceleration(displayUnit = "m/s2", nominal = 1);
    type AbsolutePressure = Modelica.Units.SI.AbsolutePressure(displayUnit = "mmHg", nominal = 101325, min = 0, max = Modelica.Constants.inf);
    type Pressure = Modelica.Units.SI.Pressure(displayUnit = "mmHg", nominal = 1e5);
    type Volume = Modelica.Units.SI.Volume(displayUnit = "ml", nominal = 1e-6, min = 0, max = Modelica.Constants.inf);
    type VolumeFlowRate = Modelica.Units.SI.VolumeFlowRate(displayUnit = "ml/min", nominal = 1e-6 / 60);
    type VolumeFraction = Modelica.Units.SI.VolumeFraction(nominal = 1e-2, min = ModelicaServices.Machine.small, max = Modelica.Constants.inf);
    type MoleFraction = Modelica.Units.SI.MoleFraction(nominal = 1e-2, min = ModelicaServices.Machine.small, max = Modelica.Constants.inf);
    replaceable type Concentration = Modelica.Units.SI.Concentration(displayUnit = "mmol/l", min = ModelicaServices.Machine.small, max = Modelica.Constants.inf) constrainedby Real;
    replaceable type AmountOfSubstance = Modelica.Units.SI.AmountOfSubstance(displayUnit = "mmol", min = 0, max = Modelica.Constants.inf) constrainedby Real;
    replaceable type MolarFlowRate = Modelica.Units.SI.MolarFlowRate(displayUnit = "mmol/min") constrainedby Real;
    replaceable type MolarEnergy = Modelica.Units.SI.MolarEnergy(displayUnit = "kcal/mol", nominal = 4186.8) constrainedby Real "chemical internal energy, chemical enthalpy, Gibb's energy ..";
    type MassConcentration = Modelica.Units.SI.MassConcentration(displayUnit = "mg/l", nominal = 1e-3, min = ModelicaServices.Machine.small, max = Modelica.Constants.inf);
    type Osmolarity = Modelica.Units.SI.Concentration(displayUnit = "mosm/l", nominal = 1, min = ModelicaServices.Machine.small, max = Modelica.Constants.inf);
    type Heat = Modelica.Units.SI.Heat(displayUnit = "kcal", nominal = 4186800);
    //needed to heat 1 liter of water by 1 degC
    type Temperature = Modelica.Units.SI.Temperature(displayUnit = "degC", nominal = 1, min = 0);
    type HeatFlowRate = Modelica.Units.SI.HeatFlowRate(displayUnit = "kcal/min", nominal = 4186.8 / 60);
    type Power = Modelica.Units.SI.Power(displayUnit = "kcal/min", nominal = 4186.8 / 60);
    type PowerPerMass = Real(final quantity = "Power per Mass", final unit = "W/kg", displayUnit = "cal/(g.min)", nominal = 4.1868 / (0.001 * 60));
    type ThermalConductance = Modelica.Units.SI.ThermalConductance(displayUnit = "kcal/(min.K)", nominal = 4186.8 / 60);
    type SpecificHeatCapacity = Modelica.Units.SI.SpecificHeatCapacity(displayUnit = "kcal/(kg.K)", nominal = 4186.8);
    type SpecificEnergy = Modelica.Units.SI.SpecificEnergy(displayUnit = "kcal/kg", nominal = 4186.8) "vaporization, ..";
    type SpecificEnthalpy = Modelica.Units.SI.SpecificEnthalpy(displayUnit = "kcal/kg", nominal = 1e5);
    type ElectricPotential = Modelica.Units.SI.ElectricPotential(displayUnit = "mV", nominal = 1e-3);
    type ElectricCharge = Modelica.Units.SI.ElectricCharge(displayUnit = "meq", nominal = 1e-3);
    type VolumeDensityOfCharge = Modelica.Units.SI.VolumeDensityOfCharge(displayUnit = "meq/l", nominal = 9.64853399 * 10 ^ 4);
    type ElectricCurrent = Modelica.Units.SI.ElectricCurrent(displayUnit = "meq/min", nominal = 9.64853399 * 10 ^ 4 / 1000 / 60);
    //unknown units in Standard Modelica Library 3.2
    type Fraction = Real(final quantity = "Fraction", final unit = "1", displayUnit = "%", nominal = 1e-2);
    type pH = Real(final quantity = "pH", final unit = "1", final displayUnit = "1", nominal = 7, min = 0, max = 14);
    type Permeability = Real(final quantity = "Permeability", final unit = "mol2.s-1.J-1", displayUnit = "mol2.min-1.kJ-1", nominal = 1e-6, min = 0);
    type OsmoticPermeability = Real(final quantity = "OsmoticPermeability", final unit = "m3/(Pa.s)", displayUnit = "ml/(mmHg.min)", nominal = 1e-6 / (133.322387415 * 60), min = 0);
    type DiffusionPermeability = Real(final quantity = "DiffusionPermeability", final unit = "m3/s", displayUnit = "ml/min", nominal = 1e-6 / 60, min = 0);
    type HydraulicConductance = Real(final quantity = "HydraulicConductance", final unit = "m3/(Pa.s)", displayUnit = "l/(mmHg.min)", nominal = 1e-3 / (133.322387415 * 60), min = 0);
    type HydraulicResistance = Real(final quantity = "HydraulicConductance", final unit = "(Pa.s)/m3", displayUnit = "(mmHg.min)/l", nominal = 1e+3 * 133.322387415 * 60, min = 0);
    type HydraulicCompliance = Real(final quantity = "HydraulicCompliance", final unit = "m3/Pa", displayUnit = "ml/mmHg", nominal = 1e-6 / 133.322387415);
    type HydraulicElastance = Real(final quantity = "HydraulicElastance", final unit = "Pa/m3", displayUnit = "mmHg/ml", nominal = 133.322387415 / 1e-6);
    type HydraulicInertance = Real(final quantity = "HydraulicInertance", final unit = "Pa.s2/kg", displayUnit = "mmHg.min2/g", nominal = 133.322387415 * 60 ^ 2 / 1e-3);
    type GasSolubility = Real(final quantity = "GasSolubility", final unit = "(mol/m3)/(mol/m3)", displayUnit = "(mmol/l)/kPa at 25degC", nominal = 1e-2, min = 0) "Gas solubility in liquid";
    type GasSolubilityPa = Real(final quantity = "GasSolubilityPa", final unit = "(mol/m3)/Pa", nominal = 1e-4, min = 0) "Gas solubility in liquid by partial pressure";
    type StoichiometricNumber = Modelica.Units.SI.StoichiometricNumber;
    // Integer(final quantity="StoichiometricNumber", min=1);
    type Population = Real(final quantity = "Population", final unit = "1", displayUnit = "1", min = 0) "Average number of population individuals";
    type PopulationChange = Real(final quantity = "PopulationChange", final unit = "1/s", displayUnit = "1/d") "Average change of population individuals";
    type PopulationChangePerMember = Real(final quantity = "PopulationChangePerMember", final unit = "1/s", displayUnit = "1/d") "Average change per population individual";
    type Area = Modelica.Units.SI.Area(displayUnit = "cm2", nominal = 1e-4) "Type for area";
    type Length = Modelica.Units.SI.Length(displayUnit = "cm", nominal = 1e-2) "Type for length and radius";
    type Enthalpy = Modelica.Units.SI.Enthalpy(displayUnit = "kcal", nominal = 4186.8) "Heat energy";
    type MolarEnthalpy = Modelica.Units.SI.MolarEnthalpy(displayUnit = "kcal/mol", nominal = 4186.8) "Heat energy of substance";
    annotation (
      Documentation(revisions = "<html>
        <p>Copyright (c) 2017-2018, Marek Matej&aacute;k, http://www.physiolib.com </p>
        </html>"));
  end Types;

  package Blocks "Base Signal Blocks Library"
    extends Modelica.Icons.Package;

    package Math "Modelica.Math extension"
      extends Modelica.Icons.Package;

      model Integrator "Integrator with support of steady state calculation."
        // extends Physiolibrary.SteadyStates.Interfaces.SteadyState(state_start=
        //       y_start, state(nominal=NominalValue));
        parameter Real k = 1 "Integrator gain";
        parameter Real y_start = 0 "Initial or guess value of output (= state)" annotation (
          Dialog(group = "Initialization"));
        extends Modelica.Blocks.Interfaces.SISO(u(nominal = NominalValue / k), y(start = y_start, nominal = NominalValue));
        parameter Real NominalValue = 1 "Numerical scale. For some substances such as hormones, hydronium or hydroxide ions should be set." annotation (
          HideResult = true,
          Dialog(tab = "Solver", group = "Numerical support of very small concentrations"));
        parameter String stateName=getInstanceName();
      equation
      //state = y;  //
        der(y) = k * u;
      //change = k*u;
        annotation (
          defaultComponentName = "int",
          Documentation(info = "<html>
        <p>
        This blocks computes output <b>y</b> (element-wise) as
        <i>integral</i> of the input <b>u</b> multiplied with
        the gain <i>k</i>:
        </p>
        <pre>
                 k
             y = - u
                 s
        </pre>

        <p>
        It might be difficult to initialize the integrator in steady state.
        This is discussed in the description of package
        <a href=\"Modelica://Modelica.Blocks.Continuous#info\">Continuous</a>.
        </p>

        </html>
        "),      Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Line(points = {{-80, 78}, {-80, -90}}, color = {192, 192, 192}), Polygon(points = {{-80, 90}, {-88, 68}, {-72, 68}, {-80, 90}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-90, -80}, {82, -80}}, color = {192, 192, 192}), Polygon(points = {{90, -80}, {68, -72}, {68, -88}, {90, -80}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Text(extent = {{0, -10}, {60, -70}}, lineColor = {192, 192, 192}, textString = "I"), Text(extent = {{-150, -150}, {150, -110}}, lineColor = {0, 0, 0}, textString = "k=%k"), Line(points = {{-80, -80}, {80, 80}}, color = {0, 0, 127})}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Rectangle(extent = {{-60, 60}, {60, -60}}, lineColor = {0, 0, 255}), Line(points = {{-100, 0}, {-60, 0}}, color = {0, 0, 255}), Line(points = {{60, 0}, {100, 0}}, color = {0, 0, 255}), Text(extent = {{-36, 60}, {32, 2}}, lineColor = {0, 0, 0}, textString = "k"), Text(extent = {{-32, 0}, {36, -58}}, lineColor = {0, 0, 0}, textString = "s"), Line(points = {{-46, 0}, {46, 0}})}));
      end Integrator;

      block Add "u + parameter"
        parameter Real k(start = 1) "value added to input signal";
      public
        Modelica.Blocks.Interfaces.RealInput u "Input signal connector" annotation (
          Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
        Modelica.Blocks.Interfaces.RealOutput y "Output signal connector" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
      equation
        y = k + u;
        annotation (
          defaultComponentName = "add",
          Documentation(info = "<html>
	<p>This block computes output <i>y</i> as <i>sum</i> of offset <i>k</i> with the input <i>u</i>: </p>
	<p><code>    y = k + u;</code> </p>
	</html>"),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Polygon(points = {{-100, 100}, {100, 40}, {100, -40}, {-100, -100}, {-100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -42}, {100, 40}}, lineColor = {0, 0, 0}, textString = "u+%k"), Text(extent = {{-150, 140}, {150, 100}}, textString = "%name", lineColor = {0, 0, 255})}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Polygon(points = {{-100, -100}, {-100, 100}, {100, 0}, {-100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-76, 38}, {0, -34}}, lineColor = {0, 0, 255}, textString = "k")}));
      end Add;

      block Reciprocal "1 / u"
        extends Modelica.Blocks.Interfaces.SISO;
      equation
        y = 1 / u;
        annotation (
          defaultComponentName = "rec",
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Text(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 0}, textString = "1/u")}),
          Documentation(info = "<html>
	<p>This blocks computes the output <b>y</b> as <i>reciprocal value</i> of the input <b>u</b>: </p>
	<p><code>    y = 1 / u ;</code> </p>
	</html>"));
      end Reciprocal;

      block Power "b ^ u"
        parameter Boolean useBaseInput = false "=true, if exponential base input is used instead of parameter Base" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Real Base = 10 "exponential base if useBaseInput=false" annotation (
          Dialog(enable = not useBaseInput));
        Modelica.Blocks.Interfaces.RealOutput y annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
        Modelica.Blocks.Interfaces.RealInput base(start = Base) = b if useBaseInput annotation (
          Placement(transformation(extent = {{-120, 40}, {-80, 80}})));
        Modelica.Blocks.Interfaces.RealInput exponent annotation (
          Placement(transformation(extent = {{-120, -80}, {-80, -40}})));
      protected
        Real b "Current exponential base";
      equation
        if not useBaseInput then
          b = Base;
        end if;
        y = b ^ exponent;
        annotation (
          defaultComponentName = "pow",
          Documentation(info = "<html>
<p>y = base^exponent</p>
</html>"),Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.04), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-100, -40}, {100, 40}}, lineColor = {0, 0, 0}, textString = "b^u")}));
      end Power;

      block Min "Pass through the smallest signal"
        extends Modelica.Blocks.Interfaces.MISO;
      equation
        y = min(u);
        annotation (
          defaultComponentName = "min",
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-90, 36}, {90, -36}}, lineColor = {160, 160, 164}, textString = "min()")}),
          Documentation(info = "<html>
<p>
This block computes the output <b>y</b> as <i>minimum</i> of
the Real inputs <b>u[1]</b>,<b>u[2]</b> .. <b>u[nin]</b>:
</p>
<pre>    y = <b>min</b> ( u );
</pre>
</html>
          "));
      end Min;

      block Log10AsEffect "min( 0, log10(u) )"
        extends Modelica.Blocks.Interfaces.SISO;
      equation
        y = if u > 1 then Modelica.Math.log10(u) else 0;
        annotation (
          defaultComponentName = "logEffect",
          Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Polygon(points = {{90, 0}, {68, 8}, {68, -8}, {90, 0}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-90, 0}, {68, 0}}, color = {192, 192, 192}), Polygon(points = {{-80, 90}, {-88, 68}, {-72, 68}, {-80, 90}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-80, -80}, {-80, 68}}, color = {192, 192, 192}), Text(extent = {{-44, -56}, {94, -80}}, lineColor = {192, 192, 192}, textString = "max(log10,0)"), Line(points = {{-100, 0}, {-80, 0}, {-78, 0}, {-74, 0}, {-76, 0}, {-74, 0}, {-72, 0}, {-69.5, 6.08}, {-64.7, 15.9}, {-57.5, 26}, {-47, 36.1}, {-31.8, 46.1}, {-10.1, 56}, {22.1, 66}, {68.7, 76.1}, {80, 78}}, color = {0, 0, 0})}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Line(points = {{-80, 80}, {-88, 80}}, color = {192, 192, 192}), Line(points = {{-80, -80}, {-88, -80}}, color = {192, 192, 192}), Line(points = {{-80, -90}, {-80, 84}}, color = {192, 192, 192}), Text(extent = {{-65, 96}, {-38, 78}}, lineColor = {160, 160, 164}, textString = "y"), Polygon(points = {{-80, 100}, {-86, 84}, {-74, 84}, {-80, 100}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-100, 0}, {84, 0}}, color = {192, 192, 192}), Polygon(points = {{100, 0}, {84, 6}, {84, -6}, {100, 0}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-100, 0}, {-80, 0}, {-78, 0}, {-74, 0}, {-76, 0}, {-74, 0}, {-72, 0}, {-69.5, 6.08}, {-64.7, 15.9}, {-57.5, 26}, {-47, 36.1}, {-31.8, 46.1}, {-10.1, 56}, {22.1, 66}, {68.7, 76.1}, {80, 78}}, color = {0, 0, 0}), Text(extent = {{70, -3}, {90, -23}}, textString = "20", lineColor = {0, 0, 255}), Text(extent = {{-78, -1}, {-58, -21}}, textString = "1", lineColor = {0, 0, 255}), Text(extent = {{-109, 72}, {-89, 88}}, textString = " 1.3", lineColor = {0, 0, 255}), Text(extent = {{-109, -88}, {-89, -72}}, textString = "-1.3", lineColor = {0, 0, 255}), Text(extent = {{62, 30}, {90, 10}}, lineColor = {160, 160, 164}, textString = "u")}),
          Documentation(info = "<html>
<p>This blocks computes the output <b>y</b> as the <i>base 10 logarithm</i> of the input <b>u </b>if <b>u&gt;1</b> or 0 otherwise </p>
<p><code>    y = if(u&gt;1) <b>log10</b>( u ) else 0;</code></p>
</html>"));
      end Log10AsEffect;

      block Parts "Divide the input value by weights"
        extends Modelica.Blocks.Interfaces.SIMO;
        parameter Real w[nout] = ones(nout) "Optional: weight coefficients";
      protected
        Real coef;
        Real weight[nout];
      equation
        ones(nout) * weight = 1;
        for i in 1:nout loop
          weight[i] = w[i] * coef;
          y[i] = u * weight[i];
        end for;
        annotation (
          defaultComponentName = "parts",
          Documentation(info = "<html>
<p>This blocks divide input value u to output array y by weights. The sum of output values is equal to input value <b>u</b>: </p>
<p><code>    u = (w[1]*y[1] + w[2]*y[2] + ... + w[n]*y[n]) / (w[1] + w[2] + ... + w[n]);</code></p>
<p>Example: </p>
<pre>     parameter:   nin = 3;  w=ones(3);

  results in the following equations:

<p><code>     y[1]=u/3,  y[2]=u/3,  y[3]=u/3;</code> </p>
</html>"),Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}), graphics={  Text(extent = {{-100, -100}, {100, 100}}, lineColor = {0, 0, 0}, textString = "Parts")}));
      end Parts;

      block HomotopyStrongComponentBreaker "Break the strong component in normalized signal with independent default constant value"
        extends Modelica.Blocks.Interfaces.SISO;
        parameter Real defaultValue = 1;
        parameter Real defaultSlope = 0;
      equation
        y = homotopy(u, defaultValue + defaultSlope * (u - defaultValue));
      //y = homotopy(u,defaultValue);
        annotation (
          defaultComponentName = "homotopy",
          Documentation(info = "<html>
<p>This blocks should solve the initial strong component problem. In the non-linear-strong-component-cycled place, where the default or mean value of variable is known.</p>
<p>For example the regulation loop L driven by loop-dependent effect E with default value 1:</p>
<p> </p>
<p>E=f(L(E)) can be rewritten to E=f(L( H )), where H is output from this block with input E. </p>
</html>"),Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.04), graphics={  Text(extent = {{-100, -24}, {96, 20}}, lineColor = {0, 0, 255}, textString = "Homotopy")}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, grid = {2, 2}, initialScale = 0.04), graphics={  Rectangle(extent = {{-100, -100}, {100, 100}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-98, -18}, {98, 26}}, lineColor = {0, 0, 255}, textString = "Homotopy")}));
      end HomotopyStrongComponentBreaker;

      block DegradationGain "Output the degradation flow from HalfTime and the amount as the input signal"
        parameter Physiolibrary.Types.Time HalfTime "Half time to compute degradation from amount or mass";
      public
        Modelica.Blocks.Interfaces.RealInput u "Input signal connector" annotation (
          Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
        Modelica.Blocks.Interfaces.RealOutput y "Output signal connector" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
      equation
        y = Modelica.Math.log(2) / HalfTime * u;
        annotation (
          Documentation(info = "<html>
<p>
This block computes output <i>y</i> as
<i>product</i> of gain <i>k</i> with the
input <i>u</i>:
</p>
<pre>
    y = k * u;
</pre>

</html>"),Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{-100, -100}, {-100, 100}, {100, 0}, {-100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 140}, {150, 100}}, textString = "%name", lineColor = {0, 0, 255})}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{-100, -100}, {-100, 100}, {100, 0}, {-100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-76, 38}, {0, -34}}, textString = "k", lineColor = {0, 0, 255})}));
      end DegradationGain;

      block FractionGain "Output the fraction of the input signal"
        parameter Physiolibrary.Types.Fraction f "Half time to compute degradation from amount or mass";
      public
        Modelica.Blocks.Interfaces.RealInput u "Input signal connector" annotation (
          Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
        Modelica.Blocks.Interfaces.RealOutput y "Output signal connector" annotation (
          Placement(transformation(extent = {{100, -10}, {120, 10}})));
      equation
        y = f * u;
        annotation (
          Documentation(info = "<html>
<p>
This block computes output <i>y</i> as
<i>product</i> of gain <i>k</i> with the
input <i>u</i>:
</p>
<pre>
    y = k * u;
</pre>

</html>"),Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{-100, -100}, {-100, 100}, {100, 0}, {-100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-150, 140}, {150, 100}}, textString = "%name", lineColor = {0, 0, 255})}),
          Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics={  Polygon(points = {{-100, -100}, {-100, 100}, {100, 0}, {-100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-76, 38}, {0, -34}}, textString = "k", lineColor = {0, 0, 255})}));
      end FractionGain;
    end Math;

    package Interpolation "Empirical Dependence of Two Variables"
      extends Modelica.Icons.Package;

      function Spline "Cubic spline interpolation function"
        input Real[:] x "x coordinations of interpolating points";
        //souradnice x souradnice uzlovych bodu
        input Real[:, 4] a "cubic polynom coefficients of curve segments between interpolating points";
        //parametry kubiky
        input Real xVal "input value of x to calculate y value";
        //vstupni hodnota
        output Real yVal "y value at xVal";
        //     output Real outExtra;
      protected
        Integer index "index of segment";
        Integer n "number of interpolating points";
      algorithm
      // Najdi interval, ve kterem se nachazi xVal
        if xVal <= x[1] then
          yVal := xVal * a[1, 3] + a[1, 4];
        else
          n := size(x, 1);
          if xVal >= x[n] then
            yVal := xVal * a[n + 1, 3] + a[n + 1, 4];
          else
            index := 2;
            while xVal > x[index] and index < n loop
              index := index + 1;
            end while;
            yVal := ((a[index, 1] * xVal + a[index, 2]) * xVal + a[index, 3]) * xVal + a[index, 4];
          end if;
        end if;
      //kdyz je hodnota xVal pred prvnim uzlovym bodem
      //pocitam primku
      //pocet uzlovych bodu
      //kdyz je hodnota xVal za poslednim uzlovym bodem
      //pocitam primku
      /*
         x1:=x[index-1];
         x2:=x[index];
         y1:=y[index-1];
         y2:=y[index];
         slope1:=slope[index-1];
         slope2:=slope[index];

         a1:=-(-x2*slope2 - x2*slope1 + slope2*x1 + slope1*x1 + 2*y2 - 2*y1)/(x2 - x1)^3;
         a2:=(-x2^2*slope2-2*x2^2*slope1-3*x2*y1+x2*slope1*x1+3*x2*y2-x2*slope2*x1-3*y1*x1+slope1*x1^2+3*y2*x1+2*slope2*x1^2)/(x2-x1)^3;
         a3:=-(-slope1*x2^3-2*x2^2*slope2*x1-x2^2*slope1*x1+x2*slope2*x1^2+2*x2*slope1*x1^2+6*x2*x1*y2-6*x2*x1*y1+slope2*x1^3)/(x2-x1)^3;
         a4:=(-slope1*x2^3*x1+y1*x2^3-slope2*x1^2*x2^2+slope1*x1^2*x2^2-3*y1*x2^2*x1+3*y2*x1^2*x2+slope2*x1^3*x2-y2*x1^3)/(x2-x1)^3;

         yVal :=a1*(xVal)^3 + a2*(xVal)^2 + a3*(xVal) + a4;
         */
      //    outExtra := xVal + yVal;
        annotation (
          derivative(noDerivative = x, noDerivative = a) = Spline_der,
          Documentation(revisions = "<html>
<p>author: Ondrej Vacek</p>
</html>"));
      end Spline;

      function SplineCoefficients "Cubic spline interpolation coefficients"
        input Real[:] x "x coordinations of interpolating points";
        input Real[:] y "y coordinations of interpolating points";
        input Real[:] slope "slopes at interpolating points";
        output Real[size(x, 1) + 1, 4] a "cubic polynom coefficients of curve segments between interpolating points";
        //pocet hodnot ctyrech parametru kubiky je o jeden vic nez pocet bodu
      protected
        Integer n "number of interpolating points";
        Integer i "index of segment";
        Real x1 "previos point";
        Real x2 "current point";
        Real y1 "previous point";
        Real y2 "current point";
        Real slope1 "previous point";
        Real slope2 "current point";
      algorithm
        n := size(x, 1);
      //pocet uzlovych bodu
        for i in 2:n loop
          x1 := x[i - 1];
          x2 := x[i];
          y1 := y[i - 1];
          y2 := y[i];
          slope1 := slope[i - 1];
          slope2 := slope[i];
          a[i, 1] := -((-x2 * slope2) - x2 * slope1 + x1 * slope2 + x1 * slope1 + 2 * y2 - 2 * y1) / (x2 - x1) ^ 3;
          a[i, 2] := ((-x2 ^ 2 * slope2) - 2 * x2 ^ 2 * slope1 - 3 * x2 * y1 + x2 * slope1 * x1 + 3 * x2 * y2 - x2 * slope2 * x1 - 3 * y1 * x1 + slope1 * x1 ^ 2 + 3 * y2 * x1 + 2 * slope2 * x1 ^ 2) / (x2 - x1) ^ 3;
          a[i, 3] := -((-slope1 * x2 ^ 3) - 2 * x2 ^ 2 * slope2 * x1 - x2 ^ 2 * slope1 * x1 + x2 * slope2 * x1 ^ 2 + 2 * x2 * slope1 * x1 ^ 2 + 6 * x2 * x1 * y2 - 6 * x2 * x1 * y1 + slope2 * x1 ^ 3) / (x2 - x1) ^ 3;
          a[i, 4] := ((-slope1 * x2 ^ 3 * x1) + y1 * x2 ^ 3 - slope2 * x1 ^ 2 * x2 ^ 2 + slope1 * x1 ^ 2 * x2 ^ 2 - 3 * y1 * x2 ^ 2 * x1 + 3 * y2 * x1 ^ 2 * x2 + slope2 * x1 ^ 3 * x2 - y2 * x1 ^ 3) / (x2 - x1) ^ 3;
        end for;
      //cyklus od 2 do n
      //predchozi bod
      //soucasny bod
      //predchozi bod
      //soucasny bod
      //predchozi bod
      //soucasny bod
      //vypocty parametru kubiky (od 2 do n) podle souradnic a smernic dvou bodu : y=a[i,4]+a[i,3]*x+a[i,2]*x^2+a[i,1]*x^3
        a[1, :] := {0, 0, slope[1], y[1] - x[1] * slope[1]};
      //vypocet prvni sady parametru kubiky  - primky
        a[n + 1, :] := {0, 0, slope[n], y[n] - x[n] * slope[n]};
      //vypocet posledni sady parametru kubiky - primky
        annotation (
          Documentation(revisions = "<html>
<p>author: Ondrej Vacek</p>
</html>"));
      end SplineCoefficients;

      model Curve "2D natural cubic interpolation spline defined with (x,y,slope) points"
        parameter Real x[:] = fill(Modelica.Constants.N_A, 1) "x coordinations of interpolating points";
        parameter Real y[:] = fill(Modelica.Constants.N_A, 1) "y coordinations of interpolating points";
        parameter Real slope[:] = fill(Modelica.Constants.N_A, 1) "slopes at interpolating points";
        parameter Real[:, 3] data = transpose({x, y, slope}) "Array of interpolating points as {x,y,slope}";
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        parameter Real Yscale = 1 "conversion scale to SI unit of y values";
        Modelica.Blocks.Interfaces.RealInput u annotation (
          Placement(transformation(extent = {{-120, -20}, {-80, 20}})));
        Modelica.Blocks.Interfaces.RealOutput val annotation (
          Placement(transformation(extent = {{80, -20}, {120, 20}})));
      protected
        parameter Real a[:, :] = SplineCoefficients(data[:, 1] * Xscale, data[:, 2] * Yscale, data[:, 3] * Yscale / Xscale) "cubic polynom coefficients of curve segments between interpolating points";
      equation
        val = Spline(data[:, 1] * Xscale, a, u);
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{-70, -76}, {-20, -48}, {0, 12}, {34, 62}, {76, 72}}, color = {0, 0, 127}, smooth = Smooth.Bezier), Line(points = {{-48, -82}, {-48, 90}, {-48, 90}}, color = {0, 0, 127}, smooth = Smooth.Bezier, arrow = {Arrow.None, Arrow.Filled}), Line(points = {{-72, -74}, {68, -74}, {68, -74}}, color = {0, 0, 127}, smooth = Smooth.Bezier, arrow = {Arrow.None, Arrow.Filled})}));
      end Curve;

      function Spline_der "Derivative of Cubic spline interpolation function"
        input Real[:] x "x coordinations of interpolating points";
        //souradnice x souradnice uzlovych bodu
        input Real[:, 4] a "cubic polynom coefficients of curve segments between interpolating points";
        //parametry kubiky
        input Real xVal "input value of x to calculate y value";
        //vstupni hodnota
        input Real xVal_der;
        output Real yVal_der "derivative y at xVal";
      protected
        Integer index "index of segment";
        Integer n "number of interpolating points";
      algorithm
      // Najdi interval, ve kterem se nachazi xVal
        if xVal <= x[1] then
          yVal_der := xVal_der * a[1, 3];
        else
          n := size(x, 1);
          if xVal >= x[n] then
            yVal_der := xVal_der * a[n + 1, 3];
          else
            index := 2;
            while xVal > x[index] and index < n loop
              index := index + 1;
            end while;
            yVal_der := (a[index, 1] * xVal_der * xVal + (a[index, 1] * xVal + a[index, 2]) * xVal_der) * xVal + ((a[index, 1] * xVal + a[index, 2]) * xVal + a[index, 3]) * xVal_der;
          end if;
        end if;
      //kdyz je hodnota xVal pred prvnim uzlovym bodem
      //yVal := xVal * a[1,3] + a[1,4]; //pocitam primku
      //pocet uzlovych bodu
      //kdyz je hodnota xVal za poslednim uzlovym bodem
      //yVal := xVal * a[n+1,3] + a[n+1,4];  //pocitam primku
      //yVal := ((a[index,1]*xVal + a[index,2])*xVal + a[index,3])*xVal + a[index,4];
      /*
         x1:=x[index-1];
         x2:=x[index];
         y1:=y[index-1];
         y2:=y[index];
         slope1:=slope[index-1];
         slope2:=slope[index];

         a1:=-(-x2*slope2 - x2*slope1 + slope2*x1 + slope1*x1 + 2*y2 - 2*y1)/(x2 - x1)^3;
         a2:=(-x2^2*slope2-2*x2^2*slope1-3*x2*y1+x2*slope1*x1+3*x2*y2-x2*slope2*x1-3*y1*x1+slope1*x1^2+3*y2*x1+2*slope2*x1^2)/(x2-x1)^3;
         a3:=-(-slope1*x2^3-2*x2^2*slope2*x1-x2^2*slope1*x1+x2*slope2*x1^2+2*x2*slope1*x1^2+6*x2*x1*y2-6*x2*x1*y1+slope2*x1^3)/(x2-x1)^3;
         a4:=(-slope1*x2^3*x1+y1*x2^3-slope2*x1^2*x2^2+slope1*x1^2*x2^2-3*y1*x2^2*x1+3*y2*x1^2*x2+slope2*x1^3*x2-y2*x1^3)/(x2-x1)^3;

         yVal :=a1*(xVal)^3 + a2*(xVal)^2 + a3*(xVal) + a4;
         */
      //    outExtra := xVal + yVal;
        annotation (
          Documentation(revisions = "<html>
<p>author: Ondrej Vacek</p>
</html>"));
      end Spline_der;
    end Interpolation;

    package Factors "Multiplication Effects"
      extends Modelica.Icons.Package;

      model Normalization "effect = u/NormalValue"
        extends Physiolibrary.Icons.BaseFactorIcon;
        parameter Real NormalValue = 1 "Normal value of u, because y=(u/NormalValue)*yBase.";
        parameter Boolean enabled = true "disabled => y=yBase";
        Modelica.Blocks.Interfaces.RealInput u annotation (
          Placement(transformation(extent = {{-100, -20}, {-60, 20}})));
        Physiolibrary.Types.Fraction effect;
      equation
        effect = if enabled then u / NormalValue else 1;
        y = effect * yBase;
        annotation (
          Documentation(revisions = "<html>
<p><i>2009-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>", info = "<html>
<p><h4>y = yBase * u</h4></p>
</html>"));
      end Normalization;

      model DamagedFraction "effect = 1 - DamagedAreaFraction"
        extends Physiolibrary.Icons.BaseFactorIcon;
        parameter Physiolibrary.Types.Fraction DamagedAreaFraction = 0;
        Physiolibrary.Types.Fraction effect;
      equation
        effect = 1 - DamagedAreaFraction;
        y = yBase * effect;
      end DamagedFraction;

      model Spline "effect = spline(data,u)"
        extends Physiolibrary.Icons.BaseFactorIcon4;
        Modelica.Blocks.Interfaces.RealInput u(nominal = Xscale) annotation (
          Placement(transformation(extent = {{-100, -20}, {-60, 20}})));
        parameter Boolean enabled = true "disabled => y=yBase";
        parameter Real[:, 3] data = {{0, 0, 0}} "Array of interpolating points as {x,y,slope}";
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        parameter Real Yscale = 1 "conversion scale to SI unit of y values";
        parameter Boolean UsePositiveLog10 = false "x = if u/scaleX <=1 then 0 else log10(u/scaleX)";
        Physiolibrary.Types.Fraction effect "Multiplication coeffecient for yBase to reach y";
      protected
        parameter Real a[:, :] = if enabled then Interpolation.SplineCoefficients(data[:, 1], data[:, 2] * Yscale, data[:, 3] * Yscale) else zeros(1, 1) "Cubic polynom coefficients of curve segments between interpolating points";
      equation
        effect = if not enabled then 1 elseif UsePositiveLog10 then Interpolation.Spline(data[:, 1], a, if u / Xscale <= 1 then 0 else log10(u / Xscale)) else Interpolation.Spline(data[:, 1], a, u / Xscale);
        y = effect * yBase;
        annotation (
          Documentation(revisions = "<html>
<p><i>2009-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>"));
      end Spline;

      model LagSpline "Adapt the input signal before interpolation"
        extends Physiolibrary.Icons.BaseFactorIcon5;
        Modelica.Blocks.Interfaces.RealInput u annotation (
          Placement(transformation(extent = {{-100, -20}, {-60, 20}})));
        parameter Boolean enabled = true "disabled => y=yBase";
        parameter Physiolibrary.Types.Time HalfTime(displayUnit = "min") = 1;
        //=3462.468;
        parameter Real initialValue = 1 "as u/Xscale";
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        parameter Real Yscale = 1 "conversion scale to SI unit of y values";
        parameter Boolean UsePositiveLog10 = false "x = if u_delayed/scaleX <=1 then 0 else log10(u_delayed/scaleX)";
        parameter Real[:, 3] data = {{0, 0, 0}};
        Blocks.Math.Integrator integrator(k = Modelica.Math.log(2) / HalfTime, y_start = initialValue * Xscale, NominalValue = Xscale) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, 38})));
        Modelica.Blocks.Math.Feedback feedback annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-38, 68})));
        Physiolibrary.Types.Fraction effect;
        Spline spline(data = data, Xscale = Xscale, Yscale = Yscale, UsePositiveLog10 = UsePositiveLog10, enabled = enabled) annotation (
          Placement(transformation(extent = {{-10, -18}, {10, 2}})));
      equation
        effect = spline.effect;
        connect(feedback.y, integrator.u) annotation (
          Line(points = {{-38, 59}, {-38, 50}}, color = {0, 0, 127}));
        connect(integrator.y, feedback.u2) annotation (
          Line(points = {{-38, 27}, {-38, 16}, {-62, 16}, {-62, 68}, {-46, 68}}, color = {0, 0, 127}));
        connect(feedback.u1, u) annotation (
          Line(points = {{-38, 76}, {-38, 94}, {-88, 94}, {-88, 0}, {-80, 0}}, color = {0, 0, 127}));
        connect(integrator.y, spline.u) annotation (
          Line(points = {{-38, 27}, {-38, -8}, {-8, -8}}, color = {0, 0, 127}));
        connect(yBase, spline.yBase) annotation (
          Line(points = {{0, 20}, {0, -6}}, color = {0, 0, 127}));
        connect(spline.y, y) annotation (
          Line(points = {{0, -12}, {0, -40}}, color = {0, 0, 127}));
        annotation (
          Documentation(revisions = "<html>
<p><i>2009-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>", info = "<html>
<p>If the input signal u is constant and it is different from starting delayed input d, the middle value between u and d will be reached after HalfTime.</p>
<p>The mathematical background:</p>
<p>d&apos;(t) = k*(u(t) - d(t))       =&gt;       The solution of d(t) in special case, if u(t) is constant at each time t:  d(t)=u+(d(0)-u)*e^(-k*t),  where the definition of HalfTime is  d(HalfTime) = d(0) + (d(0)-u)/2.</p>
</html>"));
      end LagSpline;

      model SplineLag "Adapt the effect after interpolation"
        extends Physiolibrary.Icons.BaseFactorIcon3;
        Modelica.Blocks.Interfaces.RealInput u annotation (
          Placement(transformation(extent = {{-100, -20}, {-60, 20}})));
        parameter Boolean enabled = true "disabled => y=yBase";
        parameter Physiolibrary.Types.Time HalfTime(displayUnit = "d") = 1;
        //Tau(unit="day");
        parameter String stateName = getInstanceName() "Name in Utilities input/output function" annotation (
          Evaluate = true,
          HideResult = true,
          Dialog(group = "Value I/O", tab = "IO"));
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        parameter Boolean UsePositiveLog10 = false "x = if u/scaleX <=1 then 0 else log10(u/scaleX)";
        parameter Real[:, 3] data = {{0, 0, 0}};
        Modelica.Blocks.Math.Product product annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -32})));
        Blocks.Math.Integrator integrator(y_start = 1, k = Modelica.Math.log(2) / HalfTime) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-26, 12})));
        Modelica.Blocks.Math.Feedback feedback annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-26, 44})));
        Physiolibrary.Types.Fraction effect;
        Spline spline(data = data, Xscale = Xscale, UsePositiveLog10 = UsePositiveLog10, enabled = enabled) annotation (
          Placement(transformation(extent = {{-36, 56}, {-16, 76}})));
        Physiolibrary.Types.Constants.FractionConst fraction(k(displayUnit = "1") = 1) annotation (
          Placement(transformation(extent = {{-44, 82}, {-36, 90}})));
      equation
      //der(effect) = (ln(2)/HalfTime)*(spline(data,u)-effect)
        effect = integrator.y;
        connect(yBase, product.u1) annotation (
          Line(points = {{0, 20}, {0, 30}, {0, -20}, {6, -20}}, color = {0, 0, 127}));
        connect(product.y, y) annotation (
          Line(points = {{-2.02067e-015, -43}, {-2.02067e-015, -55.5}, {0, -55.5}, {0, -40}}, color = {0, 0, 127}));
        connect(feedback.y, integrator.u) annotation (
          Line(points = {{-26, 35}, {-26, 24}}, color = {0, 0, 127}));
        connect(integrator.y, feedback.u2) annotation (
          Line(points = {{-26, 1}, {-26, -8}, {-50, -8}, {-50, 44}, {-34, 44}}, color = {0, 0, 127}));
        connect(integrator.y, product.u2) annotation (
          Line(points = {{-26, 1}, {-26, -8}, {-6, -8}, {-6, -20}}, color = {0, 0, 127}));
        connect(feedback.u1, spline.y) annotation (
          Line(points = {{-26, 52}, {-26, 62}}, color = {0, 0, 127}));
        connect(u, spline.u) annotation (
          Line(points = {{-80, 0}, {-82, 0}, {-82, 66}, {-34, 66}}, color = {0, 0, 127}));
        connect(fraction.y, spline.yBase) annotation (
          Line(points = {{-35, 86}, {-26, 86}, {-26, 68}}, color = {0, 0, 127}));
        annotation (
          Documentation(revisions = "<html>
<p><i>2009-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>"));
      end SplineLag;

      model SplineLagOrZero "LagSpline if not Failed"
        extends Physiolibrary.Icons.BaseFactorIcon2;

        parameter Boolean useFunctionFailedInput = false "=true, if FunctionFailed input is used" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Boolean FunctionFailed = false "Function failed" annotation(Dialog(enable = not useFunctionFailedInput));
        Modelica.Blocks.Interfaces.RealInput u annotation (
          Placement(transformation(extent = {{-120, -40}, {-80, 0}}), iconTransformation(extent = {{-120, -40}, {-80, 0}})));
        parameter Boolean enabled = true "disabled => y=yBase";
        parameter Physiolibrary.Types.Time HalfTime(displayUnit = "d") = 1;
        parameter Real[:, 3] data = {{0, 0, 0}};
        parameter String stateName = getInstanceName() "Name in Utilities input/output function" annotation (
          Evaluate = true,
          HideResult = true,
          Dialog(group = "Value I/O", tab = "IO"));
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        Interpolation.Curve curve(x = data[:, 1], y = data[:, 2], slope = data[:, 3], Xscale = Xscale) annotation (
          Placement(transformation(extent = {{-76, -10}, {-56, 10}})));
        Modelica.Blocks.Math.Product product annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {0, -50})));
        Blocks.Math.Integrator integrator(y_start = 1, k = Modelica.Math.log(2) / HalfTime) annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-14, -6})));
        Modelica.Blocks.Math.Feedback feedback annotation (
          Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-14, 26})));
        Modelica.Blocks.Logical.Switch switch1 annotation (
          Placement(transformation(extent = {{-48, 40}, {-28, 60}})));
        Modelica.Blocks.Sources.Constant Constant1(k = 0) annotation (
          Placement(transformation(extent = {{-70, 52}, {-58, 64}})));
        Modelica.Blocks.Interfaces.BooleanInput Failed(start = FunctionFailed) = ff if useFunctionFailedInput annotation (
          Placement(transformation(extent = {{-120, 20}, {-80, 60}})));
        Physiolibrary.Types.Fraction effect;
        Modelica.Blocks.Logical.Switch switch2 annotation (
          Placement(transformation(extent = {{-24, 90}, {-4, 70}})));
        Physiolibrary.Types.Constants.OneConst One annotation (
          Placement(transformation(extent = {{-60, 78}, {-40, 98}})));
        Modelica.Blocks.Sources.BooleanConstant booleanConstant(k = enabled) annotation (
          Placement(transformation(extent = {{-96, 62}, {-76, 82}})));

        Boolean ff;
      equation
        if not useFunctionFailedInput then
          ff=FunctionFailed;
        end if;
        effect = integrator.y;
        connect(yBase, product.u1) annotation (
          Line(points = {{0, 60}, {0, 31}, {0, -38}, {6, -38}}, color = {0, 0, 127}));
        connect(product.y, y) annotation (
          Line(points = {{-2.02067e-015, -61}, {-2.02067e-015, -55.5}, {0, -55.5}, {0, -60}}, color = {0, 0, 127}));
        connect(feedback.y, integrator.u) annotation (
          Line(points = {{-14, 17}, {-14, 6}}, color = {0, 0, 127}));
        connect(integrator.y, feedback.u2) annotation (
          Line(points = {{-14, -17}, {-14, -26}, {-38, -26}, {-38, 26}, {-22, 26}}, color = {0, 0, 127}));
        connect(integrator.y, product.u2) annotation (
          Line(points = {{-14, -17}, {-14, -26}, {-6, -26}, {-6, -38}}, color = {0, 0, 127}));
        connect(curve.val, switch1.u3) annotation (
          Line(points = {{-56, 0}, {-54, 0}, {-54, 42}, {-50, 42}}, color = {0, 0, 127}));
        connect(Constant1.y, switch1.u1) annotation (
          Line(points = {{-57.4, 58}, {-50, 58}}, color = {0, 0, 127}));
        switch1.u2=ff;
        connect(switch2.y, feedback.u1) annotation (
          Line(points = {{-3, 80}, {0, 80}, {0, 64}, {-14, 64}, {-14, 34}}, color = {0, 0, 127}));
        connect(booleanConstant.y, switch2.u2) annotation (
          Line(points = {{-75, 72}, {-38, 72}, {-38, 80}, {-26, 80}}, color = {255, 0, 255}));
        connect(switch2.u1, switch1.y) annotation (
          Line(points = {{-26, 72}, {-34, 72}, {-34, 66}, {-22, 66}, {-22, 50}, {-27, 50}}, color = {0, 0, 127}));
        connect(One.y, switch2.u3) annotation (
          Line(points = {{-37.5, 88}, {-26, 88}}, color = {0, 0, 127}));
        connect(u, curve.u)
          annotation (Line(points={{-100,-20},{-76,-20},{-76,0}}, color={0,0,127}));
        annotation (
          Documentation(revisions = "<html>
<p><i>2009-2018</i></p>
<p>Marek Matejak, marek@matfyz.cz </p>
</html>"));
      end SplineLagOrZero;
    end Factors;

    package Source
      model PeriodicCurveSource "Periodic signal source as 2D natural cubic interpolation spline defined with (x,y,slope) points on scaled preriod interval (0,1)"
        import Modelica.Constants.pi;
        parameter Real x[:] = fill(Modelica.Constants.N_A, 1) "x coordinations of interpolating points";
        parameter Real y[:] = fill(Modelica.Constants.N_A, 1) "y coordinations of interpolating points";
        parameter Real slope[:] = fill(Modelica.Constants.N_A, 1) "slopes at interpolating points";
        parameter Real[:, 3] data = transpose({x, y, slope}) "Array of interpolating points as {x,y,slope}";
        parameter Real Xscale = 1 "conversion scale to SI unit of x values";
        parameter Real Yscale = 1 "conversion scale to SI unit of y values";
        Physiolibrary.Types.RealIO.FrequencyInput frequence annotation (
          Placement(transformation(extent = {{-120, -20}, {-80, 20}})));
        Modelica.Blocks.Interfaces.RealOutput val annotation (
          Placement(transformation(extent = {{80, -20}, {120, 20}})));
        parameter Integer nu = 4 * 9 * 25;
      protected
        parameter Real a[:, :] = Interpolation.SplineCoefficients(data[:, 1] * Xscale, data[:, 2] * Yscale, data[:, 3] * Yscale / Xscale) "cubic polynom coefficients of curve segments between interpolating points";
        parameter Real curve[nu] = {Physiolibrary.Blocks.Interpolation.Spline(data[:, 1], a, i / (nu - 1)) for i in 0:nu - 1};
        parameter Integer nfi = div(nu, 2) + 1;
        constant Complex I(re = 0, im = 1);
        Complex complexValue;
        parameter Complex c[nfi] = FFT(curve, nfi) "Fourier series coefficients";
      equation
        complexValue = sum(c[j + 1] * Modelica.ComplexMath.exp(2 * pi * I * j * time * frequence) for j in 0:nfi - 1);
      //Inverse Fourier transformation
        val = complexValue.re;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 98}, {100, -102}}, lineColor = {0, 0, 127}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Line(points = {{-48, 10}, {-20, 82}, {-14, -74}, {30, 98}, {34, -58}, {60, 8}}, color = {0, 0, 127}, smooth = Smooth.Bezier), Line(points = {{-48, -82}, {-48, 90}, {-48, 90}}, color = {0, 0, 127}, smooth = Smooth.Bezier, arrow = {Arrow.None, Arrow.Filled}), Line(points = {{-72, -74}, {68, -74}, {68, -74}}, color = {0, 0, 127}, smooth = Smooth.Bezier, arrow = {Arrow.None, Arrow.Filled})}));
      end PeriodicCurveSource;

      function FFT "Get fourier series coeficient"
        import Modelica.Constants.pi;
        input Real f[:] "equidistant-sampled function";
        input Integer nfi = div(size(f, 1), 2) + 1 "";
        output Complex c[nfi] "Fourier series coeficient";
      protected
        Real Ai[nfi] "FFT amplitudes of interested frequency points";
        Real Phii[nfi] "FFT phases of interested frequency points";
        Integer info "Information flag from FFT computation; = 0: FFT successfully computed";
      algorithm
        (info, Ai, Phii) := Modelica.Math.FastFourierTransform.realFFT(f, nfi);
        for j in 1:nfi loop
          c[j] := Complex(re = Ai[j] * cos(Phii[j] * (pi / 180)), im = Ai[j] * sin(Phii[j] * (pi / 180)));
        end for;
      end FFT;
    end Source;
    annotation (
      Documentation(revisions = "<html>
<p>Copyright (c) 2008-2015, Marek Matej&aacute;k, marek@matfyz.cz </p>
<p>All rights reserved. </p>
</html>"));
  end Blocks;

  package Organs "Prototypes of human physiological organ models"
    package Heart "Heart Components"

      model Heart
         extends Physiolibrary.Icons.Heart;
         import Physiolibrary.Types.*;

         replaceable package Blood = Physiolibrary.Media.Blood                    constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                       "Blood medium model" annotation ( choicesAllMatching = true);

          parameter Types.HydraulicConductance RightCoronaryLarge(displayUnit=
              "ml/(mmHg.min)")=1.2501026264094e-09           "Conductance of lagre coronary vessels" annotation(Dialog(tab="Right heart",group="Coronary blood suply"));
          parameter Types.HydraulicConductance RightCoronarySmall(displayUnit=
              "ml/(mmHg.min)")=6.2505131320471e-11           "Conductance of small coronary vessels" annotation(Dialog(tab="Right heart",group="Coronary blood suply"));
          parameter Types.HydraulicConductance LeftCoronaryLarge(displayUnit=
              "ml/(mmHg.min)")=5.0004105056377e-09           "Conductance of lagre coronary vessels" annotation(Dialog(tab="Left heart", group="Coronary blood suply"));
          parameter Types.HydraulicConductance LeftCoronarySmall(displayUnit=
              "ml/(mmHg.min)")=3.1252565660236e-10           "Conductance of small coronary vessels" annotation(Dialog(tab="Left heart", group="Coronary blood suply"));

          parameter Volume RightAtriumBlood_initial=5.16454e-05 "Initial blood volume in right atrium" annotation(Dialog(tab="Right heart", group="Atrium"));
          parameter HydraulicCompliance RightAtriumCompliance=9.3757696980707e-08 "Mean compliance of right atrium" annotation(Dialog(tab="Right heart", group="Atrium"));
          parameter Volume RightVentricle_initial=8.75e-05 "Initial blood volume in right ventricle" annotation(Dialog(tab="Right heart", group="Ventricle"));
          parameter HydraulicCompliance RightVentricleBasicCompliance=
            2.1901798014693e-07                                                           "Basic compliance od right ventricle" annotation(Dialog(tab="Right heart", group="Ventricle"));

          parameter Volume LeftAtriumBlood_initial=5.05035e-05 "Initial blood volume in left atrium" annotation(Dialog(tab="Left heart", group="Atrium"));
          parameter HydraulicCompliance LeftAtriumCompliance=4.6878848490354e-08 "Mean compliance of left atrium" annotation(Dialog(tab="Left heart", group="Atrium"));
          parameter Volume LeftVentricle_initial=8.75e-05 "Initial blood volume in left ventricle" annotation(Dialog(tab="Left heart", group="Ventricle"));
          parameter HydraulicCompliance LeftVentricleBasicCompliance=
            1.0950899007347e-07                                                          "Basic compliance od left ventricle" annotation(Dialog(tab="Left heart", group="Ventricle"));

          parameter Frequency BaseHeartRate=1.3666666666667
                                            "Base heart rate" annotation(Dialog(group="Sinoatrial node"));
          parameter Real SA_SympatheticRateIncrease[:,3]={{0.0,0,0},{1.0,10,10},{5.0,120,0}} "Heart rate increase on sympathetic neural activity" annotation(Dialog(group="Sinoatrial node"));
          parameter Real SA_ParasympatheticRateIncrease[:,3]={{ 0.0,    0,  0}, { 2.0,  -20,  -8}, { 8.0,  -40,  0}} "Heart rate increase on parasympathetic neural activity" annotation(Dialog(group="Sinoatrial node"));

          parameter Real AdaptationOnNA[:,3]={{-4.0,0.0,0},{0.0,1.0,0.3},{12.0,4.0,0}} "Neural activity effect based on mean atrial pressure change" annotation(Dialog(group="Baroreceptors"));
          parameter Pressure AdaptivePressure(displayUnit="mmHg")=799.93432449   "Initial value of adapted mean atrial pressure" annotation(Dialog(group="Baroreceptors"));
          parameter Time AdaptationTau(displayUnit="d")=2592000   "Delay coefficient of baroreceptors adaptation" annotation(Dialog(group="Baroreceptors"));

          parameter Physiolibrary.Types.Pressure NormalPericardiumPressure=-446
          "Typical value of pericardium cavity pressure (relative to environment ambient pressure)";

          parameter Physiolibrary.Types.Volume RV_NormalEndDiastolicVolume=0.000125
        "Typical value of blood volume in ventricle after filling"
          annotation (Dialog(tab="Right heart", group="Diastole"));
          parameter Physiolibrary.Types.Pressure RV_NormalFillingPressure=
            95.9921189388
        "Typical value of filling pressure relative to pericardium pressure"
          annotation (Dialog(tab="Right heart", group="Diastole"));                   //(0.00051*101325/760)*(RV_NormalEndDiastolicVolume^(1/RV_n_Diastole))
          parameter Physiolibrary.Types.Fraction RV_stiffnes=1
        "Relative stiffnes (1 if normal)"
          annotation (Dialog(tab="Right heart", group="Diastole"));
          parameter Physiolibrary.Types.Fraction RV_n_Diastole(displayUnit="1")=2
        "Exponent of P-V characteristic of EDV curve on filling pressure"
          annotation (Dialog(tab="Right heart", group="Diastole"));
          parameter Physiolibrary.Types.Pressure RV_NormalSystolicPressure=
            1666.5298426875
        "Typical value of systolic pressure relative to pericardium pressure"
          annotation (Dialog(tab="Right heart",group="Systole"));
          parameter Physiolibrary.Types.Volume RV_NormalEndSystolicVolume=5.122e-05
        "Typical value of blood volume in ventricle after ejection"
          annotation (Dialog(tab="Right heart",group="Systole"));                //(RV_NormalSystolicPressure/(17.39*101325/760))^(RV_n_Systole)
          parameter Physiolibrary.Types.Pressure RV_additionalPressure_Systolic=
            1199.901486735
        "Pressure difference between mean and systolic pressure"
          annotation (Dialog(tab="Right heart",group="Systole"));     //= 24
          parameter Physiolibrary.Types.Fraction RV_contractilityBasic=1
        "Relative contractility (1 if normal)"
           annotation (Dialog(tab="Right heart",group="Systole"));       //= 1
          parameter Physiolibrary.Types.Fraction RV_n_Systole(displayUnit="1")=
          0.5
        "Exponent of P-V characteristic of ESV curve on systolic pressure"
          annotation (Dialog(tab="Right heart",group="Systole"));
          parameter Physiolibrary.Types.Frequency RV_K=1
          "time adaptation coeficient of average ventricle blood volume"
          annotation (Dialog(tab="Right heart", group="Ventricle"));

            parameter Physiolibrary.Types.Volume LV_NormalEndDiastolicVolume=0.000125
        "Typical value of blood volume in ventricle after filling"
          annotation (Dialog(tab="Left heart", group="Diastole"));
          parameter Physiolibrary.Types.Pressure LV_NormalFillingPressure=
            615.9494298573
        "Typical value of filling pressure relative to pericardium pressure"
          annotation (Dialog(tab="Left heart", group="Diastole"));                   //(0.00051*101325/760)*(LV_NormalEndDiastolicVolume^(1/LV_n_Diastole))
          parameter Physiolibrary.Types.Fraction LV_stiffnes=1
        "Relative stiffnes (1 if normal)"
          annotation (Dialog(tab="Left heart", group="Diastole"));
          parameter Physiolibrary.Types.Fraction LV_n_Diastole(displayUnit="1")=2
        "Exponent of P-V characteristic of EDV curve on filling pressure"
          annotation (Dialog(tab="Left heart", group="Diastole"));
          parameter Physiolibrary.Types.Pressure LV_NormalSystolicPressure=
            12665.626804425
        "Typical value of systolic pressure relative to pericardium pressure"
          annotation (Dialog(tab="Left heart",group="Systole"));
          parameter Physiolibrary.Types.Volume LV_NormalEndSystolicVolume=5.087e-05
        "Typical value of blood volume in ventricle after ejection"
          annotation (Dialog(tab="Left heart",group="Systole"));                //(LV_NormalSystolicPressure/(17.39*101325/760))^(LV_n_Systole)
          parameter Physiolibrary.Types.Pressure LV_additionalPressure_Systolic=
            3199.73729796
        "Pressure difference between mean and systolic pressure"
          annotation (Dialog(tab="Left heart",group="Systole"));     //= 24
          parameter Physiolibrary.Types.Fraction LV_contractilityBasic=1
        "Relative contractility (1 if normal)"
           annotation (Dialog(tab="Left heart",group="Systole"));       //= 1
          parameter Physiolibrary.Types.Fraction LV_n_Systole(displayUnit="1")=
          0.5
        "Exponent of P-V characteristic of ESV curve on systolic pressure"
          annotation (Dialog(tab="Left heart",group="Systole"));
          parameter Physiolibrary.Types.Frequency LV_K=0.016666666666667
          "time adaptation coeficient of average ventricle blood volume"
          annotation (Dialog(tab="Left heart", group="Ventricle"));

       //
      //
      //    Abasic_Diastole=0.00026,
      //    Abasic_Systole=3.53,
      //    MaxContractionCompliance(displayUnit="ml/mmHg") = 1.5001231516913e-08,
      //    Cond1=60000000,
      //    Cond2=60000000,
       //
       //
       //   MaxContractionCompliance(displayUnit="ml/mmHg") = 3.0002463033826e-09,
         // Abasic_Diastole=0.00051,
      //    Cond1(displayUnit="ml/(mmHg.min)") = 0.0075006157584566,
      //    Cond2(displayUnit="ml/(mmHg.min)") = 0.0075006157584566,
      Physiolibrary.Fluid.Interfaces.FluidPort_a rightAtrium(redeclare package Medium =
              Blood)
        "blood inflow to right atrium" annotation (Placement(transformation(
              extent={{-102,58},{-82,78}}),  iconTransformation(extent={{-90,50},
                  {-70,70}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b rightVentricle(redeclare
            package
            Medium = Blood) "blood outflow to pulmonary circulation" annotation (
            Placement(transformation(extent={{-26,72},{-6,92}}),
              iconTransformation(extent={{-90,-70},{-70,-50}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b leftVentricle(redeclare
            package
            Medium = Blood) "blood outflow to aorta" annotation (Placement(
              transformation(extent={{8,72},{28,92}}), iconTransformation(extent=
                  {{70,-70},{90,-50}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_a leftAtrium(redeclare package Medium =
              Blood)
        "blood inflow to left atrium" annotation (Placement(transformation(
              extent={{84,60},{104,80}}), iconTransformation(extent={{68,48},{88,
                  68}})));
        Components.SA_Node SA_node(
          BaseHeartRate=BaseHeartRate,
          SympatheticEffect=SA_SympatheticRateIncrease,
          ParasympatheticEffect=SA_ParasympatheticRateIncrease)
          annotation (Placement(transformation(extent={{62,-62},{42,-42}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package
            Medium = Blood)
        annotation (Placement(transformation(extent={{-92,-74},{-72,-54}})));
        Components.BaroReceptors lowPressureReceptors(
          PressureChangeOnNA=AdaptationOnNA,
          AdaptivePressure(displayUnit="mmHg") = AdaptivePressure,
          Tau(displayUnit="d") = AdaptationTau) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}}, origin={-38,-74})));
        inner Modelica.Fluid.System system(T_ambient=310.15)            "Human body system setting" annotation (
          Placement(transformation(extent={{70,-92},{90,-72}})));
        Fluid.Components.ElasticVessel RightAtrium(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
          stateName="RightAtrium.Vol",
          useExternalPressureInput=true,
          useV0Input=false,
          useComplianceInput=false,
          volume_start=RightAtriumBlood_initial,
          Compliance=RightAtriumCompliance,
          nPorts=3) "Heart atrium"
          annotation (Placement(transformation(extent={{-79,57},{-59,77}})));
        Components.Ventricle RightVentricle(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
          NormalExternalPressure=NormalPericardiumPressure,
          stateName="RightVentricle.Vol",
          n_Diastole=RV_n_Diastole,
          n_Systole=RV_n_Systole,
          BasicCompliance(displayUnit="ml/mmHg") = RightVentricleBasicCompliance,
          additionalPressure_Systolic(displayUnit="mmHg")=
            RV_additionalPressure_Systolic,
          initialVol=RightVentricle_initial,
          NormalEndDiastolicVolume=RV_NormalEndDiastolicVolume,
          NormalFillingPressure=RV_NormalFillingPressure,
          stiffnes=RV_stiffnes,
          NormalSystolicPressure=RV_NormalSystolicPressure,
          NormalEndSystolicVolume=RV_NormalEndSystolicVolume,
          contractilityBasic=RV_contractilityBasic,
          K=RV_K,
          AmbientPressure=system.p_ambient)
          annotation (Placement(transformation(extent={{-14,34},{-54,74}})));

        Components.Tissue rightTissue(
          redeclare package Blood = Blood,
          BasicLargeVeselsConductance=RightCoronaryLarge,
          BasicSmallVeselsConductance=RightCoronarySmall)
          annotation (Placement(transformation(extent={{-72,-2},{-52,18}})));
      Fluid.Sensors.PressureMeasure leftAtriumTMP(redeclare package Medium =
              Blood)
          annotation (Placement(transformation(extent={{-80,-88},{-60,-68}})));
        Components.Ventricle LeftVentricle(
          redeclare package Medium = Blood,
          massFractions_start=Blood.ArterialDefault,
          NormalExternalPressure=NormalPericardiumPressure,
          stateName="LeftVentricle.Vol",
          n_Diastole=LV_n_Diastole,
          n_Systole=LV_n_Systole,
          BasicCompliance(displayUnit="ml/mmHg") = LeftVentricleBasicCompliance,
          additionalPressure_Systolic(displayUnit="mmHg")=
            LV_additionalPressure_Systolic,
          initialVol=LeftVentricle_initial,
          NormalEndDiastolicVolume=LV_NormalEndDiastolicVolume,
          NormalFillingPressure=LV_NormalFillingPressure,
          stiffnes=LV_stiffnes,
          NormalSystolicPressure=LV_NormalSystolicPressure,
          NormalEndSystolicVolume=LV_NormalEndSystolicVolume,
          contractilityBasic=LV_contractilityBasic,
          K=LV_K,
          AmbientPressure=system.p_ambient)
          annotation (Placement(transformation(extent={{20,34},{60,74}})));
        Fluid.Components.ElasticVessel LeftAtrium(
          redeclare package Medium = Blood,
          massFractions_start=Blood.ArterialDefault,
          stateName="LeftAtrium.Vol",
          useExternalPressureInput=true,
          useV0Input=false,
          useComplianceInput=false,
          volume_start=LeftAtriumBlood_initial,
          Compliance=LeftAtriumCompliance,
          nPorts=3) "Heart atrium"
          annotation (Placement(transformation(extent={{59,63},{79,83}})));
        Components.Tissue leftTissue(
          redeclare package Blood = Blood,
          BasicLargeVeselsConductance=LeftCoronaryLarge,
          BasicSmallVeselsConductance=LeftCoronarySmall)
          annotation (Placement(transformation(extent={{70,-4},{50,16}})));
        Physiolibrary.Organs.Components.BetaReceptors betaReceptors(redeclare
            package
            Blood =         Blood,                                  useBase=false)
          annotation (Placement(transformation(extent={{86,-54},{66,-34}})));
        Types.RealIO.PressureInput Pericardium "pericardium pressure" annotation (
           Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={40,100}),iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={40,100})));
        Types.RealIO.FrequencyInput Sympathicus "Ganglia general neural activity"
          annotation (Placement(transformation(extent={{-18,10},{2,30}}),
              iconTransformation(extent={{-18,10},{2,30}})));
        Types.RealIO.FrequencyInput Parasympathicus "Vagus neural activity"
          annotation (Placement(transformation(extent={{2,-74},{22,-54}}),
              iconTransformation(extent={{-72,-30},{-52,-10}})));
        Types.RealIO.FractionOutput AtrialLowPressureReceptors annotation (
            Placement(transformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={11,-87}),iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={11,-87})));
      equation
      //  rightHeart.atriumBlood = sum3.u[1];
      //  leftHeart.atriumBlood = sum2.u[1];
        connect(leftVentricle, leftVentricle) annotation (Line(
            points={{18,82},{18,82}},
            color={127,0,0},
            thickness=0.5));
        connect(pressureMeasure.port, rightAtrium) annotation (Line(
            points={{-82,-74},{-92,-74},{-92,68}},
            color={127,0,0},
            thickness=0.5));
        connect(pressureMeasure.pressure, lowPressureReceptors.pericardiumPressure)
          annotation (Line(points={{-76,-68},{-47.8,-68}},
                                                         color={0,0,127}));
        connect(RightVentricle.port_a, RightAtrium.q_in[1]) annotation (Line(
            points={{-38,70},{-38,80},{-68,80},{-68,66.1333},{-69.1,66.1333}},
            color={127,0,0},
            thickness=0.5));
        connect(rightAtrium, RightAtrium.q_in[2]) annotation (Line(
            points={{-92,68},{-69.1,68},{-69.1,67}},
            color={127,0,0},
            thickness=0.5));
        connect(RightVentricle.port_b, rightVentricle) annotation (Line(
            points={{-30,74},{-30,82},{-16,82}},
            color={127,0,0},
            thickness=0.5));
        connect(RightVentricle.MotionPower, rightTissue.motionPower) annotation (
            Line(points={{-46,54},{-46,22},{-69,22},{-69,17}},       color={0,0,
                127}));
        connect(rightTissue.port_b, RightAtrium.q_in[3]) annotation (Line(
            points={{-77.8,8},{-76,8},{-76,52},{-80,52},{-80,80},{-69.1,80},{
                -69.1,67.8667}},
            color={127,0,0},
            thickness=0.5));

        connect(leftAtriumTMP.pressure, lowPressureReceptors.leftAtriumPressure)
          annotation (Line(points={{-64,-82},{-64,-80},{-48,-80}},
                                                                color={0,0,127}));
        connect(leftAtriumTMP.port, leftAtrium) annotation (Line(
            points={{-70,-88},{-70,-94},{94,-94},{94,70}},
            color={127,0,0},
            thickness=0.5));
        connect(leftVentricle, rightTissue.port_a) annotation (Line(
            points={{18,82},{18,6},{-42,6},{-42,8},{-46,8}},
            color={127,0,0},
            thickness=0.5));
        connect(leftAtrium, LeftAtrium.q_in[1]) annotation (Line(
            points={{94,70},{94,72.1333},{68.9,72.1333}},
            color={127,0,0},
            thickness=0.5));
        connect(LeftAtrium.q_in[2], LeftVentricle.port_a) annotation (Line(
            points={{68.9,73},{68.9,72},{44,72},{44,70}},
            color={127,0,0},
            thickness=0.5));
        connect(LeftVentricle.port_b, leftVentricle) annotation (Line(
            points={{36,74},{34,74},{34,82},{18,82}},
            color={127,0,0},
            thickness=0.5));
        connect(leftTissue.port_a, leftVentricle) annotation (Line(
            points={{44,6},{18,6},{18,82}},
            color={127,0,0},
            thickness=0.5));
        connect(leftTissue.port_b, rightAtrium) annotation (Line(
            points={{75.8,6},{84,6},{84,-12},{-92,-12},{-92,68}},
            color={127,0,0},
            thickness=0.5));
        connect(LeftVentricle.MotionPower, leftTissue.motionPower) annotation (
            Line(points={{52,54},{64,54},{64,15},{67,15}},       color={0,0,127}));
        connect(betaReceptors.port_a, LeftAtrium.q_in[3]) annotation (Line(
            points={{86,-46},{92,-46},{92,56},{82,56},{82,73.8667},{68.9,73.8667}},
            color={127,0,0},
            thickness=0.5));
        connect(betaReceptors.y, SA_node.BetaReceptorsEffect)
          annotation (Line(points={{76,-51},{76,-54},{62,-54}}, color={0,0,127}));
        connect(SA_node.Rate, RightVentricle.HeartRate) annotation (Line(points={{42.2,
                -52},{44,-52},{44,36},{-38.4,36},{-38.4,40}},   color={0,0,127}));
        connect(SA_node.Rate, LeftVentricle.HeartRate) annotation (Line(points={{42.2,
                -52},{44.4,-52},{44.4,40}},  color={0,0,127}));
        connect(Pericardium, RightAtrium.externalPressure)
          annotation (Line(points={{40,100},{-62,100},{-62,76}},
                                                               color={0,0,127}));
        connect(Pericardium, LeftAtrium.externalPressure)
          annotation (Line(points={{40,100},{76,100},{76,82}},
                                                             color={0,0,127}));
        connect(RightVentricle.Pericardium, Pericardium) annotation (Line(points={{-27,54},
                {2,54},{2,100},{40,100}},           color={0,0,127}));
        connect(LeftVentricle.Pericardium, Pericardium) annotation (Line(points={{33,54},
                {2,54},{2,100},{40,100}},         color={0,0,127}));
        connect(Sympathicus, LeftVentricle.GangliaGeneral) annotation (Line(
              points={{-8,20},{-8,46.2},{32.8,46.2}},    color={0,0,127}));
        connect(Sympathicus, RightVentricle.GangliaGeneral) annotation (Line(
              points={{-8,20},{-8,46.2},{-26.8,46.2}},    color={0,0,127}));
        connect(Sympathicus, betaReceptors.GangliaGeneral) annotation (Line(
              points={{-8,20},{90,20},{90,-50},{85.8,-50}},  color={0,0,127}));
        connect(Pericardium, lowPressureReceptors.rightAtriumPressure)
          annotation (Line(points={{40,100},{-100,100},{-100,-74},{-48,-74}},
                                                                            color=
               {0,0,127}));
        connect(Sympathicus, leftTissue.Ganglia)
          annotation (Line(points={{-8,20},{56,20},{56,11}},  color={0,0,127}));
        connect(Sympathicus, rightTissue.Ganglia) annotation (Line(points={{-8,20},
                {-58,20},{-58,13}},     color={0,0,127}));
        connect(Parasympathicus, SA_node.VagusNerve_NA_Hz) annotation (Line(
              points={{12,-64},{38,-64},{38,-66},{68,-66},{68,-58},{62,-58}},
              color={0,0,127}));
        connect(lowPressureReceptors.NA, AtrialLowPressureReceptors) annotation (
            Line(points={{-28,-74},{11,-74},{11,-87}},      color={0,0,127}));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={                Text(
                extent={{-154,-82},{166,-110}},
                lineColor={162,29,33},
                textString="%name")}),
          Documentation(info="<html>
<p>Calculates hearth pumping (left and right atria and ventricles, as wel as coronary circulation). By pressure-flow connectors communicate with pulmonary and systemic circulation.</p>
<p>Blood volume (and pressure) distributions between </p>
<ul>
<li>right/left atrium and</li>
<li>right/left ventricle.</li>
</ul>
<p>Generate average blood flow throught ventricles.</p>
<p>On the contrary of Tom Coleman models: coronary circulation outflows to right atrium, average blood volume in the hearth are calculated more simple (with the same results in steady state).</p>
<p><h4></p><p>New heart energy balance</h4></p>
<p><br>left: 1.41 W(const BasalCals), HR*P*V 1.4 W </p>
<p>right: 0.21 W (const BasalCals), HR*P*V 0.19 W </p>
<p><br>Effeciency by</p>
<p>https://www.ahajournals.org/doi/10.1161/CIRCULATIONAHA.106.660639</p>
<p>is 25&percnt; (basal metabolism included).</p>
<p><br>Optimal values:</p>
<p>Left heart:</p>
<p>90mmHg= 12000Pa</p>
<p>75ml = 0.000075m3</p>
<p>75bpm = 1.25Hz</p>
<p>= 1.125 W (mechanical work)</p>
<p>4.5 W (total energy for 25&percnt; effeciency with basal metabolism)</p>
<p>1.41 W (basal metabolism)</p>
<p>36&percnt; motion effeciency without basal metabolism (new parameter for heart)</p>
<p><br>Right heart:</p>
<p>12.4mmHg=1653Pa</p>
<p>75ml= 0.000075m3</p>
<p>75bpm=1.25Hz</p>
<p>= 0.155 W (mechanical work)</p>
<p>/0.25 = 0.62 W (total energy for 25&percnt; effeciency with basal metabolism)</p>
<p>0.21 W (basal metabolism)</p>
<p>38&percnt; motion effeciency without basal metabolism (new parameter for heart)</p>
<p><br><b>Old estimation of heart energy balance</b></p>
<p><br>left: 1.67 W (const MotionCals) , 6.07 W (const HeatCals), 1.41 W(const BasalCals) = 7.74 W + 1.41 W = 9.15 W</p>
<p>right: 0.35 W (const MotionCals) , 1.19 W (const HeatCals), 0.21 W (const BasalCals) = 1.54 W + 0.21 W</p>
</html>", revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>Design:</p></td>
<td><p>Zuzana Rubaninska</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>january 2009, August 2010</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td><p>Tom Coleman: QHP 2008 beta 3,, Physiomodel 2010, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
      end Heart;

      package Components

        model Ventricle
        // extends Physiolibrary.Organs.Heart.Interfaces.IVentricle(q_in(redeclare
        //        package Medium = Medium), q_out(redeclare package Medium = Medium));
         extends Physiolibrary.Fluid.Interfaces.CompositionSetup(redeclare
              package                                                              Medium =
                Physiolibrary.Media.Blood);

         parameter String stateName;

         parameter Physiolibrary.Types.Pressure AmbientPressure
          "Environment ambient pressure";

            extends Physiolibrary.Icons.HeartVentricle;
          parameter Physiolibrary.Types.Volume initialVol=9e-05
          "Initial blood volume in ventricle";
        //  parameter Physiolibrary.Types.Volume initialESV = 50e-6;

        parameter Physiolibrary.Types.Volume NormalEndDiastolicVolume=7e-05
          "Typical value of blood volume in ventricle after filling"
            annotation (Dialog(group="Diastole"));
        parameter Physiolibrary.Types.Pressure NormalFillingPressure = (0.00051*101325/760)*(NormalEndDiastolicVolume^(1/n_Diastole))
          "Typical value of filling pressure relative to pericardium pressure"
            annotation (Dialog(group="Diastole"));
        parameter Physiolibrary.Types.Fraction stiffnes=1
          "Relative stiffnes (1 if normal)"
            annotation (Dialog(group="Diastole"));
        parameter Physiolibrary.Types.Fraction n_Diastole(displayUnit="1")=2
          "Exponent of P-V characteristic of EDV curve on filling pressure"
            annotation (Dialog(group="Diastole"));
        //parameter Real Abasic_Diastole = 0.00051
        //    "parametrization of end diastolic volume curve"
        //    annotation (Dialog(group="Diastole"));

        parameter Physiolibrary.Types.Pressure NormalSystolicPressure=15998.684210526
          "Typical value of systolic pressure relative to pericardium pressure"
            annotation (Dialog(group="Systole"));
        parameter Physiolibrary.Types.Volume NormalEndSystolicVolume = (NormalSystolicPressure/(17.39*101325/760))^(n_Systole)
          "Typical value of blood volume in ventricle after ejection"
            annotation (Dialog(group="Systole"));
        //parameter Real Abasic_Systole = 17.39
        //    "parametrization of end systolic volume curve";
        parameter Physiolibrary.Types.Pressure additionalPressure_Systolic
          "Pressure difference between mean and systolic pressure"
            annotation (Dialog(group="Systole"));     //= 24
        parameter Physiolibrary.Types.Fraction contractilityBasic
          "Relative contractility (1 if normal)"
             annotation (Dialog(group="Systole"));       //= 1
        parameter Physiolibrary.Types.Fraction n_Systole(displayUnit="1")=0.5
          "Exponent of P-V characteristic of ESV curve on systolic pressure"
            annotation (Dialog(group="Systole"));

        parameter Physiolibrary.Types.Frequency K
          "time adaptation coeficient of average ventricle blood volume";
                                                      // = 1
        parameter Physiolibrary.Types.HydraulicCompliance BasicCompliance; //(final quantity="Compliance", final displayUnit="ml/mmHg") = 1;

        parameter Physiolibrary.Types.Pressure NormalExternalPressure=-446
          "Typical value of pericardium cavity pressure (relative to environment ambient pressure)";
                                                                                 //-446 Pa = -3.34522 mmHg

        //parameter Physiolibrary.Types.HydraulicCompliance MaxContractionCompliance; //=1;
        //parameter Physiolibrary.Types.HydraulicConductance Cond1;//=1;
        //parameter Physiolibrary.Types.HydraulicConductance Cond2;//=1;

        Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package
              Medium =                                                               Medium) annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                  rotation=0), iconTransformation(extent={{10,70},{30,90}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(extent={{90,-10},{110,10}},
                  rotation=0), iconTransformation(extent={{-30,90},{-10,110}})));

        Physiolibrary.Types.Constants.FractionConst
          basicContractility(k=contractilityBasic)
          annotation (Placement(transformation(extent={{60,6},{68,14}})));

          Physiolibrary.Organs.Components.BetaReceptors sympatheticReceptors(
              redeclare package Blood = Medium)
            annotation (Placement(transformation(extent={{62,-20},{82,0}})));

          Modelica.Blocks.Math.Add Vol_SteadyState(k1=0.5, k2=0.5)
                                                     annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={-34,18})));

          Physiolibrary.Organs.Heart.Components.Diastole diastole(
            redeclare package Medium = Medium,
            stiffnes=stiffnes,
            n_Diastole=n_Diastole,
            NormalFillingPressure=NormalFillingPressure,
            NormalEndDiastolicVolume=NormalEndDiastolicVolume,
            NormalExternalPressure(displayUnit="Pa") = NormalExternalPressure,
            AmbientPressure=AmbientPressure)
            annotation (Placement(transformation(extent={{-76,-44},{-56,-24}})));
        //    ,Abasic_Diastole=Abasic_Diastole

          Components.Systole systole(
            redeclare package Medium = Medium,
            n_Systole=n_Systole,
            additionalPressure_Systolic=additionalPressure_Systolic,
            NormalSystolicPressure=NormalSystolicPressure,
            NormalEndSystolicVolume=NormalEndSystolicVolume,
            NormalExternalPressure=NormalExternalPressure,
            AmbientPressure=AmbientPressure)
            annotation (Placement(transformation(extent={{52,-44},{72,-24}})));
         //   Abasic_Systole=Abasic_Systole,

          Modelica.Blocks.Math.Feedback StrokeVolume
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                origin={-8,-6})));

          VentricleVolumeAndPumping ventricle(
            massFractions_start=massFractions_start,
            extraConcentration_start=extraConcentration_start,
                                              stateName=stateName, K=K,
            redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-8,70},{12,90}})));
          //  BasicCompliance=BasicCompliance,
        //

          Modelica.Blocks.Math.Product BloodFlow     annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={16,30})));

          Modelica.Fluid.Sensors.RelativePressure StrokePressure(redeclare
              package Medium =
                       Medium) "Pressure difference between systole and diastole"
            annotation (Placement(transformation(extent={{2,-70},{-18,-50}})));
          Modelica.Blocks.Math.Product EW "External work - energy of heart cycle"
            annotation (Placement(transformation(extent={{26,-100},{44,-82}})));
          Modelica.Blocks.Math.Product power
            annotation (Placement(transformation(extent={{74,-86},{94,-66}})));
          Types.RealIO.PowerOutput MotionPower annotation (Placement(transformation(
                  extent={{92,-98},{98,-92}}),iconTransformation(extent={{40,-20},{80,20}},
                  rotation=0)));
          Types.RealIO.FrequencyInput HeartRate annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={22,-70}),iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={22,-70})));
          Types.RealIO.FrequencyInput GangliaGeneral
            "Sympathicus neural activity from general ganglia" annotation (
              Placement(transformation(extent={{22,-26},{42,-6}}),
                iconTransformation(extent={{-46,-49},{-26,-29}})));
          Types.RealIO.PressureInput Pericardium "pericardium pressure"
            annotation (Placement(transformation(extent={{-96,-92},{-76,-72}}),
                iconTransformation(extent={{-45,-10},{-25,10}})));
        equation
          connect(basicContractility.y, sympatheticReceptors.yBase) annotation (
              Line(
              points={{69,10},{72,10},{72,-3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sympatheticReceptors.y, systole.contractility) annotation (Line(
              points={{72,-17},{72,-24},{70,-24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(diastole.EDV,StrokeVolume. u1) annotation (Line(
              points={{-56,-26},{-40,-26},{-40,-6},{-16,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Vol_SteadyState.u2, diastole.EDV) annotation (Line(
              points={{-40,6},{-40,-26},{-56,-26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(systole.ESV, Vol_SteadyState.u1) annotation (Line(
              points={{52,-26},{-28,-26},{-28,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(systole.ESV,StrokeVolume. u2) annotation (Line(
              points={{52,-26},{-8,-26},{-8,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(StrokeVolume.y, BloodFlow.u1)     annotation (Line(
              points={{1,-6},{8,-6},{8,12},{4,12},{4,18},{10,18}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(diastole.port, port_a) annotation (Line(
              points={{-66,-44},{-66,-60},{-100,-60},{-100,0}},
              color={127,0,0},
              thickness=0.5));
          connect(systole.port, port_b) annotation (Line(
              points={{62,-44},{62,-60},{100,-60},{100,0}},
              color={127,0,0},
              thickness=0.5));
          connect(BloodFlow.y, ventricle.BloodFlow) annotation (Line(points={{16,
                  41},{16,64},{10,64},{10,70}}, color={0,0,127}));
          connect(Vol_SteadyState.y, ventricle.VentricleSteadyStateVolume)
            annotation (Line(points={{-34,29},{-34,70},{-6,70}}, color={0,0,127}));
          connect(port_a, ventricle.port_a) annotation (Line(
              points={{-100,0},{-100,80},{-8,80}},
              color={127,0,0},
              thickness=0.5));
          connect(ventricle.port_b, port_b) annotation (Line(
              points={{12,80},{100,80},{100,0}},
              color={127,0,0},
              thickness=0.5));
          connect(port_a, StrokePressure.port_b) annotation (Line(
              points={{-100,0},{-100,-60},{-18,-60}},
              color={127,0,0},
              thickness=0.5));
          connect(port_b, StrokePressure.port_a) annotation (Line(
              points={{100,0},{100,-60},{2,-60}},
              color={127,0,0},
              thickness=0.5));
          connect(StrokePressure.p_rel, EW.u1) annotation (Line(points={{-8,-69},{-8,-85.6},
                  {24.2,-85.6}}, color={0,0,127}));
          connect(StrokeVolume.y, EW.u2) annotation (Line(points={{1,-6},{8,-6},{8,-96.4},
                  {24.2,-96.4}},          color={0,0,127}));
          connect(EW.y, power.u2) annotation (Line(points={{44.9,-91},{60,-91},{60,-82},
                  {72,-82}},         color={0,0,127}));
          connect(power.y, MotionPower)
            annotation (Line(points={{95,-76},{95,-95}},         color={0,0,127}));
          connect(HeartRate, power.u1) annotation (Line(points={{22,-70},{72,-70}},
                                      color={0,0,127}));
          connect(HeartRate, BloodFlow.u2) annotation (Line(points={{22,-70},{22,18}},
                                                 color={0,0,127}));
          connect(GangliaGeneral, sympatheticReceptors.GangliaGeneral)
            annotation (Line(points={{32,-16},{62.2,-16}},
                color={0,0,127}));
          connect(Pericardium, systole.externalPressure) annotation (Line(points={{-86,-82},
                  {-50,-82},{-50,-46},{32,-46},{32,-40},{52,-40}},
                                                        color={0,0,127}));
          connect(diastole.externalPressure, Pericardium) annotation (Line(points={{-56,-40},
                  {-50,-40},{-50,-82},{-86,-82}},       color={0,0,127}));
          connect(sympatheticReceptors.port_a, ventricle.port_c) annotation (Line(
                points={{62,-12},{34,-12},{34,70},{12.2,70}}, color={0,127,255}));
         annotation (
            Documentation(info="<HTML>
<PRE>
Heart ventricle.

like
QHP 2008 / VascularCompartments/LeftVentricle/*



The pressure-volume characteristics of both ventricles in diastole
and systole will be described using a power function.

  P = A * (V ^ n)

P = Pressure
V = Volume
A = Scale Factor
n = curvature

The function is invertable.

  V = (P/A) ^ (1/n)

Some typical values

                                 Right                 Left
                           ---------------------- ------------------------
Nominal Vol                     87.5                  87.5
Nominal TMP                      3.0                   6.0
Compliance                      29.2                  14.6
Pericardial P                   -3.0                  -3.0

DIASTOLE
  EDP                            1.0                   5.0
  EDV                          125.0                 125.0
  TMP                            4.0                   8.0
  n                              2.0                   2.0
  V^n                        15625.0               15625.0
  A                              0.00026               0.00051

SYSTOLE
  ESP                           22.0                 120.0
  ESV                           50.0                  50.0
  TMP                           25.0                 123.0
  n                              0.5                   0.5
  V^n                            7.07                  7.07
  A                              3.53                 17.39
</PRE>
</HTML>
",       revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague. </p><br/>

</html>"),                                          Diagram(coordinateSystem(preserveAspectRatio=false,
                           extent={{-100,-100},{100,100}}), graphics={Text(
                  extent={{-42,62},{-18,60}},
                  lineColor={0,0,0},
                textString="Mass_SteadyState"),     Text(
                  extent={{8,62},{32,60}},
                  lineColor={0,0,0},
                  textString="Blood_Inflow")}),
            Icon(graphics={Text(
                  extent={{-98,-100},{100,-120}},
                  textColor={162,29,33},
                  textString="%name")}));
        end Ventricle;

        model SA_Node
          extends Physiolibrary.Icons.SinoatrialNode;
          parameter Types.Frequency BaseHeartRate(displayUnit="1/min") = 1.3666666666667;
          parameter Real SympatheticEffect[:,3]={{ 0.0,    0,  0}, { 1.0,   10,  10}, { 5.0,  120,  0}};
          parameter Real ParasympatheticEffect[:,3]={{ 0.0,    0,  0}, { 2.0,  -20,  -8}, { 8.0,  -40,  0}};

          Modelica.Blocks.Interfaces.RealInput BetaReceptorsEffect
            annotation (Placement(transformation(extent={{-120,-40},{-80,0}})));
        Physiolibrary.Blocks.Interpolation.Curve parasympatheticEffect(
          x=ParasympatheticEffect[:, 1],
          y=ParasympatheticEffect[:, 2],
          slope=ParasympatheticEffect[:, 3],
          Yscale=1/60)
          annotation (Placement(transformation(extent={{-50,-70},{-30,-50}})));
          Modelica.Blocks.Math.Sum rate(nin=3)
            annotation (Placement(transformation(extent={{64,-10},{84,10}})));
          Types.RealIO.FrequencyOutput          Rate
            annotation (Placement(transformation(extent={{78,-20},{118,20}})));
          Physiolibrary.Types.RealIO.FrequencyInput VagusNerve_NA_Hz
            annotation (Placement(transformation(extent={{-120,-80},{-80,-40}})));
        Physiolibrary.Types.Constants.FrequencyConst            Constant1(k(
              displayUnit="1/min") = BaseHeartRate)
          annotation (Placement(transformation(extent={{-6,-10},{14,10}})));
        Physiolibrary.Blocks.Interpolation.Curve sympatheticEffect(
          x=SympatheticEffect[:, 1],
          y=SympatheticEffect[:, 2],
          slope=SympatheticEffect[:, 3],
          Yscale=1/60)
          annotation (Placement(transformation(extent={{26,20},{46,40}})));
        equation
          connect(parasympatheticEffect.val, rate.u[2])      annotation (Line(
              points={{-30,-60},{54.1,-60},{54.1,1.11022e-016},{62,1.11022e-016}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(VagusNerve_NA_Hz, parasympatheticEffect.u)
                                                annotation (Line(
              points={{-100,-60},{-50,-60}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rate.y, Rate) annotation (Line(
              points={{85,0},{98,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Constant1.y, rate.u[1]) annotation (Line(
              points={{16.5,0},{14,0},{14,-0.666667},{62,-0.666667}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sympatheticEffect.val, rate.u[3]) annotation (Line(
              points={{46,30},{54,30},{54,0.666667},{62,0.666667}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BetaReceptorsEffect, sympatheticEffect.u) annotation (Line(
                points={{-100,-20},{-12,-20},{-12,30},{26,30}}, color={0,0,127}));
          annotation ( Icon(coordinateSystem(
                  preserveAspectRatio=true,  extent={{-100,-100},{100,100}}),
                graphics={
                Text(
                  extent={{-102,134},{100,102}},
                  lineColor={0,0,0},
                  fillColor={213,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end SA_Node;

        model ANP
          extends Physiolibrary.Icons.Heart;
        // outer parameter Real ECF_Vol(final displayUnit="ml");

        //  stateName="ANPPool.Mass",
        //  useNormalizedVolume=false,
        Physiolibrary.Blocks.Factors.Spline LAPEffect(data={{0.0,0.0,0},{8.0,1.0,
              0.4},{20.0,10.0,0}}, Xscale=101325/760)
          annotation (Placement(transformation(extent={{54,62},{34,82}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst hormoneFlowConstant(k=
              6.8333333333333e-13)
          annotation (Placement(transformation(extent={{6,82},{-2,90}})));
        Physiolibrary.Blocks.Factors.Spline RAPEffect(data={{0.0,0.0,0},{4.0,1.0,
              0.4},{20.0,10.0,0}}, Xscale=101325/760)
          annotation (Placement(transformation(extent={{-16,60},{4,80}})));
          Modelica.Blocks.Math.Gain DegradeK(k=0.223/60)
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                origin={7,-65})));
        Physiolibrary.Types.Constants.MolarFlowRateConst hormoneFlowConstant1(k=
              4.3333333333333e-13)
          annotation (Placement(transformation(extent={{56,82},{48,90}})));
          Modelica.Blocks.Math.Add SteadyState annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={38,42})));
        Physiolibrary.Blocks.Math.Integrator integrator(
          k=(1/20)/60,
          y_start=67e-12/60)
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={38,-12})));
         // stateName="ANPSecretion.NaturalRate",
          Modelica.Blocks.Math.Feedback feedback annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={38,18})));
        Physiolibrary.Types.BusConnector busConnector annotation (Placement(
              transformation(extent={{-104,84},{-84,104}}), iconTransformation(
                extent={{-90,-70},{-70,-50}})));
          Modelica.Blocks.Interfaces.RealOutput ANP(
                                             quantity="Concentration", final displayUnit=
                "pmol/l",
          nominal=1e-8)                                           annotation (
              Placement(transformation(extent={{-24,2},{-4,22}}),
                iconTransformation(extent={{80,-20},{120,20}})));
        Physiolibrary.Blocks.Math.Log10AsEffect log10_1
          annotation (Placement(transformation(extent={{-32,6},{-44,18}})));
        Physiolibrary.Blocks.Math.Log10AsEffect log10_2
          annotation (Placement(transformation(extent={{-52,-88},{-64,-76}})));
        Physiolibrary.Blocks.Math.Integrator integrator1(
          k=(1/20)/60,
          y_start=20e-9) "initial 20 pmol/l"
                       annotation (Placement(transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-35,-65})));
         // stateName="NephronANP.[ANPDelayed]",
          Modelica.Blocks.Math.Feedback feedback1
                                                 annotation (Placement(
                transformation(
                extent={{-7,-7},{7,7}},
                rotation=270,
                origin={-35,-47})));
          Modelica.Blocks.Interfaces.RealOutput NephronANP_Log10Conc
                            annotation (Placement(transformation(extent={{-78,-64},
                    {-58,-44}}), iconTransformation(extent={{80,-60},{120,-20}})));
        Physiolibrary.Blocks.Math.Integrator ANPPool(y_start=2.85895e-10)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={82,-72})));
        Modelica.Blocks.Math.Feedback feedback2
          annotation (Placement(transformation(extent={{50,-42},{70,-22}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{-68,30},{-48,50}})));
        equation
          connect(hormoneFlowConstant1.y, LAPEffect.yBase) annotation (Line(
              points={{47,86},{44,86},{44,74}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hormoneFlowConstant.y, RAPEffect.yBase) annotation (Line(
              points={{-3,86},{-6,86},{-6,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RAPEffect.y, SteadyState.u2) annotation (Line(
              points={{-6,66},{-6,60},{32,60},{32,54}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LAPEffect.y, SteadyState.u1) annotation (Line(
              points={{44,68},{44,54}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(feedback.y,integrator. u) annotation (Line(
              points={{38,9},{38,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator.y,feedback. u2) annotation (Line(
              points={{38,-23},{38,-34},{14,-34},{14,18},{30,18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(SteadyState.y, feedback.u1) annotation (Line(
              points={{38,31},{38,26}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(busConnector.NephronANP_Log10Conc, log10_2.y) annotation (Line(
              points={{-94,94},{-94,-82},{-64.6,-82}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(busConnector.ANPPool_Log10Conc, log10_1.y) annotation (Line(
              points={{-94,94},{-94,12},{-44.6,12}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(feedback1.y, integrator1.u)
                                            annotation (Line(
              points={{-35,-53.3},{-36,-54},{-35,-54},{-35,-59}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator1.y, feedback1.u2)
                                             annotation (Line(
              points={{-35,-70.5},{-35,-74},{-50,-74},{-50,-47},{-40.6,-47}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integrator1.y, log10_2.u) annotation (Line(
              points={{-35,-70.5},{-35,-82},{-50.8,-82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(log10_2.y, NephronANP_Log10Conc) annotation (Line(
              points={{-64.6,-82},{-68,-82},{-68,-54}},
              color={0,0,127},
              smooth=Smooth.None));
        connect(busConnector.rightAtrium_TMP, RAPEffect.u) annotation (Line(
            points={{-94,94},{-94,70},{-14,70},{-14,70}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(LAPEffect.u, busConnector.leftAtrium_TMP) annotation (Line(
            points={{52,72},{86,72},{86,94},{-94,94}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(feedback2.y, ANPPool.u)
          annotation (Line(points={{69,-32},{82,-32},{82,-60}}, color={0,0,127}));
        connect(integrator.y, feedback2.u1)
          annotation (Line(points={{38,-23},{38,-32},{52,-32}}, color={0,0,127}));
        connect(DegradeK.y, feedback2.u2) annotation (Line(points={{10.3,-65},{60,
                -65},{60,-40}}, color={0,0,127}));
        connect(ANPPool.y, DegradeK.u) annotation (Line(points={{82,-83},{82,-98},{
                -18,-98},{-18,-65},{3.4,-65}}, color={0,0,127}));
        connect(busConnector.ECFV_Vol, division.u2) annotation (Line(
            points={{-94,94},{-94,28},{-70,28},{-70,34}},
            color={0,0,255},
            thickness=0.5));
        connect(ANPPool.y, division.u1) annotation (Line(points={{82,-83},{82,-98},
                {-116,-98},{-116,46},{-70,46}}, color={0,0,127}));
        connect(division.y, ANP) annotation (Line(points={{-47,40},{-26,40},{-26,12},
                {-14,12}}, color={0,0,127}));
        connect(division.y, log10_1.u) annotation (Line(points={{-47,40},{-26,40},{
                -26,12},{-30.8,12}}, color={0,0,127}));
        connect(busConnector.ANP, division.y) annotation (Line(
            points={{-94,94},{-94,64},{-34,64},{-34,40},{-47,40}},
            color={0,0,255},
            thickness=0.5));
        connect(division.y, feedback1.u1) annotation (Line(points={{-47,40},{-28,40},
                {-28,-41.4},{-35,-41.4}}, color={0,0,127}));
          annotation ( Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={Text(
                  extent={{-120,94},{114,72}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end ANP;

        model BaroReceptors
          extends Physiolibrary.Icons.Barroreceptor;
          // TODO: Tau without default value
          Physiolibrary.Types.RealIO.PressureInput rightAtriumPressure
            annotation (Placement(transformation(extent={{-120,40},{-80,80}}),
                iconTransformation(extent={{-110,-10},{-90,10}})));
        Physiolibrary.Blocks.Math.Integrator adaptivePressure(
          y_start=AdaptivePressure,
            k=1/Tau)
          annotation (Placement(transformation(extent={{0,-10},{20,10}})));
         // stateName="Baroreflex.AdaptedPressure",
          Modelica.Blocks.Math.Feedback pressureChange
            annotation (Placement(transformation(extent={{-36,-10},{-16,10}})));
        Physiolibrary.Blocks.Interpolation.Curve pressureChangeOnNA(
          x=PressureChangeOnNA[:, 1],
          y=PressureChangeOnNA[:, 2],
          slope=PressureChangeOnNA[:, 3],
            Xscale=101325/760)
          annotation (Placement(transformation(extent={{38,-18},{74,18}})));
          Physiolibrary.Types.RealIO.FractionOutput NA
            annotation (Placement(transformation(extent={{80,-20},{120,20}})));
          parameter Physiolibrary.Types.Pressure AdaptivePressure(displayUnit="mmHg");
          parameter Physiolibrary.Types.Time Tau(displayUnit="h")=3600;
          parameter Real PressureChangeOnNA[3,:];

          Modelica.Blocks.Math.Feedback rightAtrium_TMP
            annotation (Placement(transformation(extent={{-78,52},{-62,68}})));
          Modelica.Blocks.Math.Feedback leftAtrium_TMP
          annotation (Placement(transformation(extent={{8,-8},{-8,8}},
                rotation=180,
                origin={-70,-60})));
          Modelica.Blocks.Math.Add avePressure(k1=0.5, k2=0.5)
            annotation (Placement(transformation(extent={{-56,-6},{-44,6}})));
          Types.RealIO.PressureInput leftAtriumPressure annotation (Placement(
                transformation(extent={{-120,-80},{-80,-40}}), iconTransformation(
                  extent={{-110,-70},{-90,-50}})));
          Types.RealIO.PressureInput pericardiumPressure annotation (Placement(
                transformation(extent={{-120,-20},{-80,20}}), iconTransformation(
                  extent={{-108,50},{-88,70}})));
        equation
          connect(pressureChange.u2, adaptivePressure.y) annotation (Line(
              points={{-26,-8},{-26,-20},{26,-20},{26,0},{21,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureChange.y, adaptivePressure.u) annotation (Line(
              points={{-17,0},{-2,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureChangeOnNA.val, NA) annotation (Line(
              points={{74,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pressureChange.y, pressureChangeOnNA.u) annotation (Line(
              points={{-17,0},{-8,0},{-8,16},{30,16},{30,0},{38,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightAtriumPressure, rightAtrium_TMP.u1)
            annotation (Line(points={{-100,60},{-76.4,60}}, color={0,0,127}));
          connect(pericardiumPressure, rightAtrium_TMP.u2) annotation (Line(
                points={{-100,0},{-70,0},{-70,53.6}}, color={0,0,127}));
          connect(rightAtrium_TMP.y, avePressure.u1) annotation (Line(points={{
                  -62.8,60},{-58,60},{-58,12},{-62,12},{-62,4},{-57.2,4},{-57.2,
                  3.6}}, color={0,0,127}));
          connect(leftAtriumPressure, leftAtrium_TMP.u1)
            annotation (Line(points={{-100,-60},{-76.4,-60}}, color={0,0,127}));
          connect(pericardiumPressure, leftAtrium_TMP.u2) annotation (Line(points=
                 {{-100,0},{-70,0},{-70,-53.6}}, color={0,0,127}));
          connect(leftAtrium_TMP.y, avePressure.u2) annotation (Line(points={{
                  -62.8,-60},{-58,-60},{-58,-10},{-62,-10},{-62,-3.6},{-57.2,-3.6}},
                color={0,0,127}));
          connect(avePressure.y, pressureChange.u1)
            annotation (Line(points={{-43.4,0},{-34,0}}, color={0,0,127}));
          annotation ( Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={
                Text(
                  extent={{-122,130},{118,102}},
                  lineColor={0,0,0},
                  fillColor={213,255,170},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end BaroReceptors;

        model Diastole
          extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor;
        /*  Real iconPoint[20,2](final displayUnit="mm");
  Real iconActualPoint[2,2](final displayUnit="mm");
  */
          /*
Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a inflow annotation (
    Placement(transformation(extent={{-122,-24},{-82,16}}),
      iconTransformation(extent={{-120,20},{-80,60}})));
*/
          Physiolibrary.Types.RealIO.PressureInput externalPressure
          "pericardium pressure around ventricle"
                                         annotation ( Placement(transformation(extent={{94,-58},
                    {114,-38}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={100,-60})));

        parameter Physiolibrary.Types.Fraction stiffnes
          "parametrization of end diastolic volume curve";
        parameter Physiolibrary.Types.Fraction n_Diastole(displayUnit="1")
          "parametrization of end systolic volume curve";
        //parameter Real Abasic_Diastole "parametrization of end diastolic volume curve";
        parameter Physiolibrary.Types.Pressure NormalFillingPressure
          "Typicall value of mean arterial filling pressure (relative to environment ambient pressure)";
        parameter Physiolibrary.Types.Pressure NormalExternalPressure = -446
          "Typical value of pericardium cavity pressure (relative to environment ambient pressure)";
        parameter Physiolibrary.Types.Volume NormalEndDiastolicVolume
          "= (NormalDiastolicPressure/Abasic_Diastole)^n_Diastole";
        //Abasic_Diastole "parametrization of end diastolic volume curve";
        parameter Physiolibrary.Types.Pressure AmbientPressure
          "Environment ambient pressure";

          Physiolibrary.Types.RealIO.VolumeOutput
                                              EDV   annotation (Placement(transformation(extent={{-74,-74},
                    {-34,-34}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                origin={100,80})));

        equation
        //  inflow.q = 0;
        //  P = inflow.pressure;
        //  EDV = ((inflow.pressure-externalPressure)/(stiffnes*Abasic_Diastole))^(1/n_Diastole);
          EDV = NormalEndDiastolicVolume*((port.p-externalPressure-AmbientPressure)/(stiffnes*(NormalFillingPressure-NormalExternalPressure)))^(1/n_Diastole);

          //  Stiffness = stiffnes;

        // drawing icon
        /*  for i in 1:size(iconPoint,1) loop
    iconPoint[i,1]=((i-1)/(size(iconPoint,1)))*180 - 90;
    (iconPoint[i,1]+90)*200/180 = ( ( ( (iconPoint[i,2]+40)*200/130)-externalPressure)/(stiffnes*Abasic_Diastole))^(1/n_Diastole);
  end for;
  iconActualPoint[1,1]=EDV*180/200-90 -2;
  iconActualPoint[1,2]=inflow.pressure*130/200-40 -2;
  iconActualPoint[2,1]=iconActualPoint[1,1]+4;
  iconActualPoint[2,2]=iconActualPoint[1,2]+4;*/
                                     /*,
        Line(
          points=DynamicSelect({{-100,0},{100,0}}, iconPoint),
          color={0,0,255},
          smooth=Smooth.None),
        Ellipse(
          extent=DynamicSelect({{0,0},{0,0}}, iconActualPoint),
          lineColor={0,0,0},
          fillColor={255,0,0},
          fillPattern=FillPattern.Solid)*/
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={
                Rectangle(
                  extent={{-100,100},{100,-60}},
                  lineColor={255,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={255,255,255}),
                Text(
                  extent={{-100,-60},{100,-100}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end Diastole;

        model Systole
          extends Physiolibrary.Fluid.Interfaces.PartialAbsoluteSensor;

        //  Real iconPoint[20,2](each final displayUnit="mm");
        //  Real iconActualPoint[2,2](each final displayUnit="mm");
        /*
Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b outflow annotation (
    Placement(transformation(extent={{80,20},{120,60}}),
      iconTransformation(extent={{80,20},{120,60}})));
*/
          Physiolibrary.Types.RealIO.FractionInput contractility
          "heart muscle contractility"   annotation (
          Placement(transformation(
              origin={80,100},
              extent={{-10,-10},{10,10}},
              rotation=270)));

        parameter Physiolibrary.Types.Fraction n_Systole(displayUnit="1")
          "parametrization of end diastolic volume curve";
        //parameter Real Abasic_Systole "parametrization of end systolic volume curve";
        parameter Physiolibrary.Types.Pressure NormalSystolicPressure
          "Typical value of mean arterial pressure (relative to environment ambient pressure)";
            parameter Physiolibrary.Types.Pressure NormalExternalPressure = -446
          "Typical value of pericardium cavity pressure (relative to environment ambient pressure)";
                                                                                 //-446 Pa = -3.34522 mmHg
        parameter Physiolibrary.Types.Volume NormalEndSystolicVolume
          "= 2.64 ml for left ventricle, parametrization of end systolic volume curve";
        parameter Physiolibrary.Types.Pressure additionalPressure_Systolic
          "parametrization of end systolic volume curve";

        parameter Physiolibrary.Types.Pressure AmbientPressure
          "Environment ambient pressure";

          Physiolibrary.Types.RealIO.VolumeOutput
                                              ESV   annotation (Placement(transformation(extent={{-74,-74},
                    {-34,-34}}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-100,80})));

          Physiolibrary.Types.RealIO.PressureInput externalPressure
          "pressure around ventricle"                                             annotation (
        Placement(transformation(extent={{-110,-70},{-90,-50}}), iconTransformation(
                  extent={{-110,-70},{-90,-50}})));
                  Physiolibrary.Types.Pressure systolicPressure;
                  Real coef;
        equation
        //  outflow.q = 0;
        //  P=outflow.pressure;
        //  ESV = ((outflow.pressure+additionalPressure_Systolic-externalPressure)/(contractility*Abasic_Systole))^(1/n_Systole);
          systolicPressure= (port.p-AmbientPressure);
          coef=(port.p+additionalPressure_Systolic-externalPressure-AmbientPressure)/(contractility*(NormalSystolicPressure+additionalPressure_Systolic-NormalExternalPressure));
          ESV = NormalEndSystolicVolume*((port.p+additionalPressure_Systolic-externalPressure-AmbientPressure)/(contractility*(NormalSystolicPressure+additionalPressure_Systolic-NormalExternalPressure)))^(1/n_Systole);

        // drawing icon
        /*  for i in 1:size(iconPoint,1) loop
    iconPoint[i,1]=((i-1)/(size(iconPoint,1)))*180 - 90;
    (iconPoint[i,1]+90)*200/180= ((((iconPoint[i,2]+40)*200/130)+additionalPressure_Systolic-externalPressure)/(contractility*Abasic_Systole))^(1/n_Systole);
  end for;
  iconActualPoint[1,1]=ESV*180/200-90 -2;
  iconActualPoint[1,2]=outflow.pressure*130/200-40 -2;
  iconActualPoint[2,1]=iconActualPoint[1,1]+4;
  iconActualPoint[2,2]=iconActualPoint[1,2]+4;*/
                                     /*,
        Line(
          points=DynamicSelect({{-100,0},{100,0}}, iconPoint),
          color={0,0,255},
          smooth=Smooth.None),
        Ellipse(
          extent=DynamicSelect({{0,0},{0,0}}, iconActualPoint),
          lineColor={0,0,0},
          fillColor={255,0,0},
          fillPattern=FillPattern.Solid)*/
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                    -100},{100,100}}), graphics={
                Rectangle(
                  extent={{-100,100},{100,-60}},
                  lineColor={255,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={255,255,255}),
                Text(
                  extent={{-100,-60},{100,-100}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end Systole;

          model VentricleVolumeAndPumping
          "Multiple PressureFlow connector with pressures from multiple inputs"
                    extends Physiolibrary.Icons.Pump;
                    extends Physiolibrary.Fluid.Interfaces.CompositionSetup;

                       Physiolibrary.Types.RealIO.VolumeFlowRateInput BloodFlow( displayUnit=
                           "l/min") "heart cardiac output"
                        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
                  rotation=90,
                  origin={60,-100}),                                                         iconTransformation(extent={{-20,-20},{20,20}},
                          rotation=90,
                          origin={80,-100})));

                       Physiolibrary.Types.RealIO.VolumeInput VentricleSteadyStateVolume(
                                                                               displayUnit="ml")
          "heart ventricle steady state volume"
                        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
                  rotation=90,
                  origin={-20,-100}),                                                        iconTransformation(extent={{-20,-20},{20,20}},
                          rotation=90,
                          origin={-80,-100})));

                      parameter Physiolibrary.Types.Frequency K( displayUnit="1/min") = 0.01666666666666666666666666666667;
                      Physiolibrary.Types.RealIO.VolumeOutput Volume( displayUnit="ml") annotation (Placement(transformation(
                              extent={{84,-70},{124,-30}}), iconTransformation(extent={{84,-70},{
                                124,-30}})));

                    parameter String stateName="";
                    replaceable package Medium = Media.Water constrainedby Media.Interfaces.PartialMedium "Medium model" annotation (choicesAllMatching=true);
            outer Modelica.Fluid.System system "System wide properties";
            Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package
              Medium =
                  Medium) "Inflow"
              annotation (Placement(transformation(extent={{-114,-14},{-86,14}})));
            Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package
              Medium =
                  Medium) "Outflow"
              annotation (Placement(transformation(extent={{86,-14},{114,14}})));
            Fluid.Components.VolumePump volumePump(redeclare package Medium =
                Medium,                            useSolutionFlowInput=true)
              annotation (Placement(transformation(extent={{-28,-8},{-8,12}})));
            Fluid.Components.VolumePump volumePump1(redeclare package Medium =
                Medium,                             useSolutionFlowInput=true)
              annotation (Placement(transformation(extent={{54,-10},{74,10}})));
          Modelica.Blocks.Math.Feedback feedback
            annotation (Placement(transformation(extent={{-16,-52},{4,-32}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={4,82})));
          Modelica.Blocks.Math.Gain gain(k=K) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={54,76})));
          Fluid.Components.ElasticVessel elasticVessel(
            redeclare package Medium = Medium,
              massFractions_start=massFractions_start,
              extraConcentration_start=extraConcentration_start,
              volume_start=8.8e-05,                    nPorts=3)
            annotation (Placement(transformation(extent={{4,-6},{24,14}})));
            Fluid.Interfaces.FluidPort_b port_c(redeclare package Medium = Medium)
            "Measurement port"
            annotation (Placement(transformation(extent={{88,-114},{116,-86}})));
          equation

            connect(port_a, volumePump.q_in) annotation (Line(
                points={{-100,0},{-98,0},{-98,2},{-28,2}},
                color={127,0,0},
                thickness=0.5));
            connect(volumePump1.q_out, port_b) annotation (Line(
                points={{74,0},{100,0}},
                color={127,0,0},
                thickness=0.5));
          connect(VentricleSteadyStateVolume, feedback.u1) annotation (Line(
                points={{-20,-100},{-20,-42},{-14,-42}}, color={0,0,127}));
          connect(BloodFlow, add.u2) annotation (Line(points={{60,-100},{60,-12},
                  {80,-12},{80,16},{38,16},{38,88},{16,88}}, color={0,0,127}));
          connect(add.u1, gain.y)
            annotation (Line(points={{16,76},{43,76}}, color={0,0,127}));
          connect(gain.u, feedback.y) annotation (Line(points={{66,76},{72,76},{
                  72,14},{36,14},{36,-28},{3,-28},{3,-42}}, color={0,0,127}));
          connect(volumePump.q_out, elasticVessel.q_in[1]) annotation (Line(
              points={{-8,2},{0,2},{0,3.13333},{13.9,3.13333}},
              color={127,0,0},
              thickness=0.5));
          connect(volumePump1.q_in, elasticVessel.q_in[2]) annotation (Line(
              points={{54,0},{26,0},{26,4},{13.9,4}},
              color={127,0,0},
              thickness=0.5));
          connect(elasticVessel.fluidVolume, Volume) annotation (Line(points={{24,-4},{50,
                    -4},{50,-14},{78,-14},{78,-50},{104,-50}},       color={0,0,
                  127}));
          connect(elasticVessel.fluidVolume, feedback.u2) annotation (Line(points={{24,-4},
                    {36,-4},{36,-64},{-6,-64},{-6,-50}},                color={0,
                  0,127}));
          connect(BloodFlow, volumePump1.solutionFlow)
            annotation (Line(points={{60,-100},{60,7},{64,7}}, color={0,0,127}));
          connect(add.y, volumePump.solutionFlow) annotation (Line(points={{-7,82},
                  {-18,82},{-18,9}}, color={0,0,127}));
          connect(elasticVessel.q_in[3], port_c) annotation (Line(
              points={{13.9,4.86667},{16,4.86667},{16,-100},{102,-100}},
              color={127,0,0},
              thickness=0.5));
                     annotation (Documentation(info="<HTML>
<p>
Model has a vector of continuous Real input signals as pressures for
vector of pressure-flow connectors.
</p>
</HTML>
"));
          end VentricleVolumeAndPumping;

        model Metabolism
          import Physiolibrary;
          extends Icons.Heart;
          extends Icons.MetabolismPart;

          Physiolibrary.Fluid.Sensors.MassConcentration
                                                 thyroxine(redeclare function
              GetMassConcentration = Physiolibrary.Media.Blood.thyroxine,
                                                           redeclare package
              Medium =
                Blood)
            annotation (Placement(transformation(extent={{-46,56},{-26,76}})));
          Blocks.Factors.Spline Thyroid(data={{0,0.7,0},{8,1.0,0.4},{40,1.5,0}}, Xscale
              =1e-5)
                  "8 ug/dl = 8e-9/1e-4 kg/m3"
            annotation (Placement(transformation(extent={{60,18},{80,38}})));
          Blocks.Factors.Spline HeatMetabolism_Skin(data={{10 + 273.15,0.0,0},{37 + 273.15,
                1.0,0.12},{40 + 273.15,1.5,0},{46 + 273.15,0.0,0}})
            annotation (Placement(transformation(extent={{60,12},{80,32}})));
          Blocks.Factors.Normalization StructureEffect__
            annotation (Placement(transformation(extent={{60,0},{80,20}})));
          Types.Constants.PowerConst BasalPower(k=BasalPowerPerKg*TissueSize)
            "Rate of energy during basal metabolism (BasalCalsUsed*TissueSize)"
            annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={69,37})));
          Modelica.Blocks.Math.Sum TotalCaloriesUse(nin=3) annotation (Placement(
                transformation(
                extent={{-4.5,-4.5},{3.5,3.5}},
                rotation=270,
                origin={71.5,-20.5})));
          Modelica.Blocks.Sources.Constant structureEffect(k=StructureEffect)
            annotation (Placement(transformation(extent={{36,12},{48,24}})));
            replaceable package Blood = Physiolibrary.Media.Blood  constrainedby
            Media.Interfaces.PartialMedium                                                                                                     "Blood medium model" annotation ( choicesAllMatching = true);
            parameter Types.Fraction StructureEffect=1 "Structure effect on metabolism (1..OK, 0..zero basal functions)";
            parameter Types.PowerPerMass BasalPowerPerKg=5.5398342
                                                         "Rate of energy consumption by basal metabolism in 1 kg of tissue";
            parameter Types.Mass TissueSize=0.0385
                                            "Tissue mass";
         /*   parameter Types.Power MotionCals(displayUnit="cal/min")=0.3489
                                     "Rate of energy consumption caused by motion";
    parameter Types.Power HeatCals(displayUnit="cal/min")=1.18626
    "Rate of energy consumption caused by heat prosuction"; */

            parameter Types.Fraction MotionEffeciency = 0.37 "Motion effeciency without basal metabolism";
          Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                  rotation=0, extent={{96,70},{116,90}})));
          Physiolibrary.Fluid.Interfaces.FluidPort_a a_port(redeclare package
              Medium =                                                                 Blood) annotation (
            Placement(transformation(extent={{90,-10},{110,10}}),         iconTransformation(extent={{90,-10},
                    {110,10}})));
          Physiolibrary.Fluid.Interfaces.FluidPort_b b_port(redeclare package
              Medium =                                                                 Blood) annotation (
            Placement(transformation(extent={{-110,-10},{-90,10}}),     iconTransformation(extent={{-110,
                    -10},{-90,10}})));

          Types.RealIO.PowerInput motionPower "Power needed for motion"
            annotation (Placement(transformation(extent={{-122,60},{-82,100}})));
          Modelica.Blocks.Math.Gain motionHeat(k=1 - MotionEffeciency)
            annotation (Placement(transformation(extent={{-20,-26},{0,-6}})));
          Physiolibrary.Fluid.Sensors.Temperature temperature1(redeclare
              package
              Medium = Blood)
            annotation (Placement(transformation(extent={{-16,38},{4,58}})));
        equation
          connect(Thyroid.y,HeatMetabolism_Skin. yBase)       annotation (Line(
              points={{70,24},{70,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(HeatMetabolism_Skin.y,StructureEffect__. yBase) annotation (Line(
              points={{70,18},{72,18},{72,12},{70,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(BasalPower.y,Thyroid. yBase) annotation (Line(
              points={{69,32},{70,32},{70,30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(StructureEffect__.y,TotalCaloriesUse. u[1]) annotation (Line(points={{70,6},{
                  70,-10},{70.7333,-10},{70.7333,-15.2}},        color={0,0,127}));
          connect(structureEffect.y,StructureEffect__. u) annotation (Line(points={{48.6,18},
                  {54,18},{54,10},{62,10}},   color={0,0,127}));
          connect(y, TotalCaloriesUse.y) annotation (Line(points={{106,80},{90,80},
                  {90,14},{114,14},{114,-30},{71,-30},{71,-24.4}},
                                    color={0,0,127}));
          connect(motionPower, TotalCaloriesUse.u[2]) annotation (Line(points={{-102,80},
                  {84,80},{84,-10},{71,-10},{71,-15.2}},
                                                 color={0,0,127}));
          connect(motionHeat.y, TotalCaloriesUse.u[3]) annotation (Line(points={{1,-16},
                  {62,-16},{62,-8},{71.2667,-8},{71.2667,-15.2}},
                                                        color={0,0,127}));
          connect(motionPower, motionHeat.u) annotation (Line(points={{-102,80},{
                  -60,80},{-60,-16},{-22,-16}},
                                       color={0,0,127}));
          connect(thyroxine.R, Thyroid.u) annotation (Line(points={{-25,66},{56,
                  66},{56,36},{54,36},{54,28},{62,28}},
                                    color={0,0,127}));
          connect(a_port, thyroxine.port) annotation (Line(
              points={{100,0},{-36,0},{-36,56}},
              color={127,0,0},
              thickness=0.5));
          connect(a_port, b_port) annotation (Line(
              points={{100,0},{-100,0}},
              color={127,0,0},
              thickness=0.5));
          connect(a_port, temperature1.port) annotation (Line(
              points={{100,0},{-6,0},{-6,38}},
              color={127,0,0},
              thickness=0.5));
          connect(HeatMetabolism_Skin.u, temperature1.T) annotation (Line(points=
                  {{62,22},{52,22},{52,48},{5,48}}, color={0,0,127}));
        end Metabolism;

        model Tissue "Heart tissue"

           extends Physiolibrary.Icons.PerfusionDO;
           extends Physiolibrary.Icons.LeftHeart;
           extends Icons.MetabolismPart;

          replaceable package Blood = Physiolibrary.Media.Blood   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
            //Physiolibrary.Media.BloodBySiggaardAndersen

          parameter Physiolibrary.Types.HydraulicConductance BasicLargeVeselsConductance( displayUnit="ml/(min.mmHg)") = 5.0004105056377e-09;
          parameter Physiolibrary.Types.HydraulicConductance BasicSmallVeselsConductance( displayUnit="ml/(min.mmHg)") = 3.1252565660236e-10;

          parameter Boolean FunctionFailed=false "true if function failed";

            parameter Types.Fraction StructureEffect=1 "Structure effect on metabolism (1..OK, 0..zero basal functions)";
            parameter Types.PowerPerMass BasalPowerPerKg=5.5398342
                                                         "Rate of energy consumption by basal metabolism in 1 kg of tissue";
            parameter Types.Mass TissueSize=0.0385
                                            "Tissue mass";
         /*   parameter Types.Power MotionCals(displayUnit="cal/min")=0.3489
                                     "Rate of energy consumption caused by motion";
    parameter Types.Power HeatCals(displayUnit="cal/min")=1.18626
    "Rate of energy consumption caused by heat prosuction"; */

            parameter Types.Fraction MotionEffeciency = 0.37 "Motion effeciency without basal metabolism";

          Fluid.Sensors.PartialPressure pO2(
            redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
            substanceData=Chemical.Substances.Oxygen_gas(),
            redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-8,28},{-28,48}})));
          Fluid.Sensors.Concentration            vasopressin(redeclare function
              GetConcentration = Physiolibrary.Media.Blood.vasopressin,
                                                             redeclare package
              Medium =
                Blood)
            annotation (Placement(transformation(extent={{-38,58},{-18,78}})));
          Fluid.Sensors.Fraction                 anesthesiaVascularConductance(
              redeclare function GetFraction =
                Physiolibrary.Media.Blood.anesthesiaVascularConductance,
              redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-54,78},{-34,98}})));
          Types.RealIO.PowerInput motionPower(displayUnit="cal/min")
            "Total rate of motion energy (external work per time)" annotation (
              Placement(transformation(
                rotation=0,
                extent={{-10,-10},{10,10}},
                origin={14,24}),   iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-70,90})));

           Modelica.Blocks.Math.Gain CalToO2(k=0.2093/(4.1864*22710.95322615))
          "0.2093 ml/cal,  4.1864 J/cal, 22710.95322615 ml/mol"
            annotation (Placement(transformation(extent={{4,-4},{-4,4}},
                rotation=180,
                origin={52,20})));
        Blocks.Factors.Spline               PO2Effect(data={{12,2.0,0},{17,1.0,-0.04},{30,
                0.8,0}}, Xscale=101325/760)
          annotation (Placement(transformation(extent={{60,20},{80,40}})));
        Blocks.Factors.Spline               ADHEffect2(data={{0.8,1.0,0},{3.0,0.1,0}},
            Xscale=1e-9,
              UsePositiveLog10=true)
          annotation (Placement(transformation(extent={{60,58},{80,78}})));
        Blocks.Factors.Spline               MetabolismEffect(data={{30,1.0,0},{100,3.0,0}},
              Xscale=1/1362657.193569)
          "O2Need 1 ml_STP/min = 1/1362657.193569 mol/s"
          annotation (Placement(transformation(extent={{60,10},{80,30}})));
        Blocks.Factors.Normalization               Anesthesia
          annotation (Placement(transformation(extent={{60,66},{80,86}})));
        Types.Constants.HydraulicConductanceConst
          LargeVesselBasicConductance(k=BasicLargeVeselsConductance)
          annotation (Placement(transformation(extent={{-54,18},{-66,30}})));
        Types.Constants.HydraulicConductanceConst
          SmallVesselBasicConductance(k=BasicSmallVeselsConductance)
          annotation (Placement(transformation(extent={{90,86},{78,98}})));
        Blocks.Factors.DamagedFraction               Infraction
          annotation (Placement(transformation(extent={{60,2},{80,22}})));
          Blocks.Factors.SplineLagOrZero                            Vasculature(
            FunctionFailed=FunctionFailed,
            data={{41,1.2,0},{51,1.0,-0.03},{61,0.8,0}},
            HalfTime=30*86400*Modelica.Math.log(2),
            integrator(y_start=1.2),
            Xscale=101325/760)
            annotation (Placement(transformation(extent={{60,30},{80,50}})));
        Physiolibrary.Organs.Components.ViscosityConductance
                                                   Viscosity(redeclare package
              Blood = Blood)
          annotation (Placement(transformation(extent={{60,74},{80,94}})));
        Fluid.Components.Conductor               resistor2_1(redeclare package
              Medium =
                Blood, useConductanceInput=true)
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        Fluid.Components.Conductor               resistor2_2(redeclare package
              Medium =
                Blood, useConductanceInput=true)
          annotation (Placement(transformation(extent={{-78,-10},{-58,10}})));
          Fluid.Components.ElasticVessel capillarries(
            redeclare package Medium = Blood,
            useSubstances=true,
            volume_start=1e-06,
            Compliance=7.5006157584566e-10,
            nPorts=7)
            annotation (Placement(transformation(extent={{-28,-10},{-8,10}})));

          Physiolibrary.Organs.Components.AlphaReceptors
            aplhaReceptorsActivityFactor2_1(redeclare package Blood = Blood)
            annotation (Placement(transformation(extent={{60,46},{80,66}})));
        Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Blood)
            "Blood inflow" annotation (Placement(transformation(extent={{100,-10},
                    {120,10}}, rotation=0), iconTransformation(extent={{150,-10},
                    {170,10}})));
        Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Blood)
            "Blood outflow" annotation (Placement(transformation(extent={{-110,-10},
                    {-90,10}}, rotation=0), iconTransformation(extent={{-168,-10},
                    {-148,10}})));
          Metabolism metabolism(
            redeclare package Blood = Blood,
            StructureEffect=StructureEffect,
            BasalPowerPerKg=BasalPowerPerKg,
            TissueSize=TissueSize,
            MotionEffeciency=MotionEffeciency)
                                   annotation (Placement(transformation(rotation=0,
                  extent={{18,-10},{38,10}})));
          Types.RealIO.FrequencyInput Ganglia
            "Sympathetic ganglia general neural activity" annotation (Placement(
                transformation(extent={{30,40},{50,60}}),iconTransformation(
                  extent={{30,40},{50,60}})));
          Physiolibrary.Organs.Components.ViscosityConductance viscosity(
              redeclare package Blood = Blood) annotation (Placement(
                transformation(rotation=0, extent={{-58,6},{-78,26}})));
        equation
          connect(CalToO2.y, MetabolismEffect.u) annotation (Line(points={{56.4,20},{62,
                  20}},                                   color={0,0,127}));
          connect(pO2.port, capillarries.q_in[2]) annotation (Line(
              points={{-18,28},{-18,26},{-18.1,26},{-18.1,-0.742857}},
              color={127,0,0},
              thickness=0.5));
          connect(pO2.partialPressure, PO2Effect.u) annotation (Line(points={{-8,38},
                  {54,38},{54,30},{62,30}},             color={0,0,127}));
          connect(pO2.partialPressure, Vasculature.u)
            annotation (Line(points={{-8,38},{60,38}},         color={0,0,127}));
          connect(capillarries.substances.O2, pO2.port_a) annotation (
              Line(points={{-28,0},{-28,26},{-34,26},{-34,38},{-28,38}},
                                                                    color={158,66,
                  200}));
          connect(anesthesiaVascularConductance.port, capillarries.q_in[2])
            annotation (Line(points={{-44,78},{-44,16},{-18.1,16},{-18.1,0}},
                                                                           color=
                  {0,127,255}));
          connect(LargeVesselBasicConductance.y, viscosity.yBase) annotation (
              Line(
              points={{-67.5,24},{-67.5,21},{-68,21},{-68,18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Viscosity.y,Anesthesia. yBase) annotation (Line(
              points={{70,80},{70,78}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Viscosity.yBase,SmallVesselBasicConductance. y) annotation (
              Line(
              points={{70,86},{70,92},{76.5,92}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Anesthesia.y,ADHEffect2. yBase) annotation (Line(
              points={{70,72},{70,70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Vasculature.y,PO2Effect. yBase) annotation (Line(
              points={{70,34},{70,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PO2Effect.y,MetabolismEffect. yBase) annotation (Line(
              points={{70,26},{70,22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(MetabolismEffect.y,Infraction. yBase) annotation (Line(
              points={{70,16},{70,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(port_b, resistor2_2.q_in) annotation (Line(
              points={{-100,0},{-78,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistor2_1.cond,Infraction. y) annotation (Line(
              points={{70,6},{70,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(resistor2_2.cond, viscosity.y) annotation (Line(
              points={{-68,6},{-68,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(resistor2_2.q_out, capillarries.q_in[1]) annotation (Line(
              points={{-58,0},{-58,-1.11429},{-18.1,-1.11429}},
              color={127,0,0},
              thickness=0.5));
          connect(ADHEffect2.y,aplhaReceptorsActivityFactor2_1. yBase) annotation (Line(
                points={{70,64},{70,63}},                      color={0,0,127}));
          connect(Vasculature.yBase, aplhaReceptorsActivityFactor2_1.y)
            annotation (Line(points={{70,46},{70,49}}, color={0,0,127}));
          connect(CalToO2.u, metabolism.y) annotation (Line(points={{47.2,20},{44,
                  20},{44,8},{38.6,8}},
                                  color={0,0,127}));
          connect(motionPower, metabolism.motionPower)
            annotation (Line(points={{14,24},{17.8,24},{17.8,8}},
                                                          color={0,0,127}));
          connect(Ganglia, aplhaReceptorsActivityFactor2_1.GangliaGeneral)
            annotation (Line(points={{40,50},{60.2,50}}, color={0,0,127}));
          connect(Viscosity.port, capillarries.q_in[3]) annotation (Line(points={{60,84},
                  {4,84},{4,18},{-18,18},{-18,0},{-18.1,0},{-18.1,-0.371429}},
                                                              color={0,127,255}));
          connect(viscosity.port, capillarries.q_in[4]) annotation (Line(points={{-58,16},
                  {-18,16},{-18,-5.55112e-17},{-18.1,-5.55112e-17}},
                                                               color={0,127,255}));
          connect(aplhaReceptorsActivityFactor2_1.port_a, capillarries.q_in[5])
            annotation (Line(points={{60,54},{4,54},{4,18},{-18.1,18},{-18.1,
                  0.371429}},
                color={0,127,255}));
          connect(vasopressin.port, capillarries.q_in[6]) annotation (Line(points={{-28,58},
                  {-44,58},{-44,16},{-18.1,16},{-18.1,0.742857}},
                                                    color={0,127,255}));
          connect(resistor2_1.q_out, port_a) annotation (Line(
              points={{80,0},{110,0}},
              color={127,0,0},
              thickness=0.5));
          connect(anesthesiaVascularConductance.F, Anesthesia.u) annotation (Line(
                points={{-33,88},{6,88},{6,76},{62,76}},  color={0,0,127}));
          connect(vasopressin.C, ADHEffect2.u)
            annotation (Line(points={{-17,68},{62,68}},color={0,0,127}));
          connect(metabolism.a_port, resistor2_1.q_in) annotation (Line(
              points={{38,0},{60,0}},
              color={127,0,0},
              thickness=0.5));
          connect(metabolism.b_port, capillarries.q_in[7]) annotation (Line(
              points={{18,0},{-18,0},{-18,1.11429},{-18.1,1.11429}},
              color={127,0,0},
              thickness=0.5));
          annotation (Icon(graphics={Text(
                  extent={{-160,-100},{160,-140}},
                  textColor={127,0,0},
                  textString="%name")}));
        end Tissue;
      end Components;

      package Examples
        model VentricleTest

          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
          Components.Ventricle                            rightVentricle(
            redeclare package Medium = Blood,
            stateName="RightVentricle.Vol",
            n_Diastole=2.0,
            n_Systole=0.5,
            BasicCompliance(displayUnit="ml/mmHg") = 2.1901798014693e-07,
            additionalPressure_Systolic(displayUnit="mmHg") = 1199.901486735,
            initialVol=8.75e-05,
            NormalEndDiastolicVolume=0.000125,
            NormalFillingPressure=95.9921189388,
            stiffnes=1,
            NormalSystolicPressure=1666.5298426875,
            NormalEndSystolicVolume=5.122e-05,
            contractilityBasic=1,
            K=1,
            AmbientPressure=101325.0144354)
                 annotation (Placement(transformation(extent={{46,-56},{2,-12}})));
          Fluid.Sources.PressureSource rightAtrium(pressure_start(displayUnit=
                  "mmHg") = 101422.97689116, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-62,-8},{-42,-28}})));
          Fluid.Sources.PressureSource pulmonaryArtery(pressure_start(displayUnit=
                 "mmHg") = 102991.54427809, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-58,22},{-38,2}})));
          Components.SA_Node SA_node
            annotation (Placement(transformation(extent={{-54,30},{-34,50}})));
          Types.Constants.PressureConst pericardium(k=-445.2967739661)
            annotation (Placement(transformation(extent={{-90,68},{-82,76}})));
          Types.Constants.FrequencyConst Sympathicus(k(displayUnit="Hz") = 1.5)
            annotation (Placement(transformation(extent={{-90,60},{-82,52}})));
          Types.Constants.FrequencyConst Parasymphaticus(k(displayUnit="Hz") = 2)
            annotation (Placement(transformation(extent={{-90,30},{-82,38}})));
        equation
          connect(rightAtrium.y, rightVentricle.port_a) annotation (Line(
              points={{-42,-18},{-16,-18},{-16,-18},{19.6,-18},{19.6,-16.4}},
              color={127,0,0},
              thickness=0.5));
          connect(rightVentricle.port_b, pulmonaryArtery.y) annotation (Line(
              points={{28.4,-12},{28.4,12},{-38,12}},
              color={127,0,0},
              thickness=0.5));
          connect(SA_node.Rate, rightVentricle.HeartRate) annotation (Line(points=
                 {{-34.2,40},{-10,40},{-10,-52},{19.16,-52},{19.16,-49.4}}, color=
                 {0,0,127}));
          connect(pericardium.y, rightVentricle.Pericardium) annotation (Line(
                points={{-81,72},{56,72},{56,-34},{31.7,-34}}, color={0,0,127}));
          connect(Sympathicus.y, SA_node.BetaReceptorsEffect) annotation (Line(
                points={{-81,56},{-66,56},{-66,38},{-54,38}}, color={0,0,127}));
          connect(Sympathicus.y, rightVentricle.GangliaGeneral) annotation (Line(
                points={{-81,56},{66,56},{66,-42},{31.92,-42},{31.92,-42.58}},
                color={0,0,127}));
          connect(Parasymphaticus.y, SA_node.VagusNerve_NA_Hz)
            annotation (Line(points={{-81,34},{-54,34}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                Documentation(revisions = "<html>
        <p><i>2022</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
            experiment(StopTime = 5));
        end VentricleTest;

        model DiastoleTest
          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
          Fluid.Sources.PressureSource rightAtrium(pressure_start(displayUnit=
                  "mmHg") = 101422.97689116, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-82,-20},{-62,0}})));
        Types.BusConnector busConnector "signals of organ bood flow resistence"
            annotation (Placement(transformation(extent={{2,32},{22,52}}),
                iconTransformation(extent={{-108,-38},{-92,-22}})));
          Components.Diastole                            diastole(
            redeclare package Medium = Blood,
            stiffnes=1,
            n_Diastole=2,
            NormalFillingPressure=95.9921189388,
            NormalEndDiastolicVolume=0.000125,
            NormalExternalPressure(displayUnit="mmHg") = -445.2967739661,
            AmbientPressure=101325.0144354)
            annotation (Placement(transformation(extent={{-28,14},{-8,34}})));
          Fluid.Sensors.PressureMeasure pressureMeasure(redeclare package Medium =
                Blood)
            annotation (Placement(transformation(extent={{52,-12},{72,8}})));
        equation
          connect(diastole.externalPressure, busConnector.Pericardium_Pressure)
            annotation (Line(
              points={{-8,18},{12,18},{12,42}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          connect(rightAtrium.y, diastole.port) annotation (Line(
              points={{-62,-10},{-18,-10},{-18,14}},
              color={127,0,0},
              thickness=0.5));
          connect(rightAtrium.y,pressureMeasure.port)  annotation (Line(
              points={{-62,-10},{48,-10},{48,-16},{62,-16},{62,-12}},
              color={127,0,0},
              thickness=0.5));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                Documentation(revisions = "<html>
        <p><i>2022</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
            experiment(StopTime = 5));
        end DiastoleTest;

        model RightHeartTest
          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
          Components.Ventricle                            rightVentricle(
            redeclare package Medium = Blood,
            stateName="RightVentricle.Vol",
            n_Diastole=2.0,
            n_Systole=0.5,
            BasicCompliance(displayUnit="ml/mmHg") = 2.1901798014693e-07,
            additionalPressure_Systolic(displayUnit="mmHg") = 1199.901486735,
            initialVol=8.75e-05,
            NormalEndDiastolicVolume=0.000125,
            NormalFillingPressure=95.9921189388,
            stiffnes=1,
            NormalSystolicPressure=1666.5298426875,
            NormalEndSystolicVolume=5.122e-05,
            contractilityBasic=1,
            K=1,
            AmbientPressure=101325.0144354)
                 annotation (Placement(transformation(extent={{32,-56},{-12,-12}})));
          Fluid.Sources.PressureSource pulmonaryArtery(pressure_start(displayUnit=
                 "mmHg") = 102991.54427809, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-58,-10},{-38,10}})));
          Components.SA_Node SA_node
            annotation (Placement(transformation(extent={{-48,30},{-28,50}})));
        Types.Constants.VolumeConst               RightAtriumV0(k=0)
          annotation (Placement(transformation(extent={{-60,-32},{-52,-24}})));
           Fluid.Components.ElasticVessel               RightAtrium(
            redeclare package Medium = Blood,
            stateName="RightAtrium.Vol",
            useExternalPressureInput=true,
            useV0Input=true,
            useComplianceInput=false,
            volume_start=5.1e-05,
            Compliance=9.3757696980707e-08,
            nPorts=2)                     "right atrium"
          annotation (Placement(transformation(extent={{-45,-55},{-25,-35}})));
          Fluid.Sources.PressureSource systemicArtery(pressure_start(displayUnit=
                  "mmHg") = 113990.64123983, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-100,-96},{-80,-76}})));
          Fluid.Components.Conductor systemic(redeclare package Medium = Blood,
              Conductance=1.250102626409427e-07*(5/90))
                     annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-54,-86})));
          Types.Constants.PressureConst pericardium(k=-445.2967739661)
            annotation (Placement(transformation(extent={{32,-26},{40,-18}})));
          Types.Constants.FrequencyConst Sympathicus(k(displayUnit="Hz") = 1.5)
            annotation (Placement(transformation(extent={{-92,52},{-84,60}})));
          Types.Constants.FrequencyConst Parasymphaticus(k(displayUnit="Hz") = 2)
            annotation (Placement(transformation(extent={{-92,30},{-84,38}})));
        equation
          connect(rightVentricle.port_b, pulmonaryArtery.y) annotation (Line(
              points={{14.4,-12},{14.4,0},{-38,0}},
              color={127,0,0},
              thickness=0.5));
        connect(RightAtrium.zeroPressureVolume,RightAtriumV0. y) annotation (Line(
            points={{-42,-36},{-42,-28},{-51,-28}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(RightAtrium.q_in[1], rightVentricle.port_a) annotation (Line(
              points={{-35.1,-45.65},{-32,-45.65},{-32,-46},{-18,-46},{-18,-16},{
                  5.6,-16},{5.6,-16.4}},
              color={127,0,0},
              thickness=0.5));
          connect(systemicArtery.y, systemic.q_out) annotation (Line(
              points={{-80,-86},{-64,-86}},
              color={127,0,0},
              thickness=0.5));
          connect(systemic.q_in, RightAtrium.q_in[2]) annotation (Line(
              points={{-44,-86},{-35.1,-86},{-35.1,-44.35}},
              color={127,0,0},
              thickness=0.5));
          connect(SA_node.Rate, rightVentricle.HeartRate) annotation (Line(points=
                 {{-28.2,40},{-14,40},{-14,-54},{5.16,-54},{5.16,-49.4}}, color={
                  0,0,127}));
          connect(Sympathicus.y, SA_node.BetaReceptorsEffect) annotation (Line(
                points={{-83,56},{-56,56},{-56,38},{-48,38}}, color={0,0,127}));
          connect(Sympathicus.y, rightVentricle.GangliaGeneral) annotation (Line(
                points={{-83,56},{64,56},{64,-42},{17.92,-42},{17.92,-42.58}},
                color={0,0,127}));
          connect(Parasymphaticus.y, SA_node.VagusNerve_NA_Hz)
            annotation (Line(points={{-83,34},{-48,34}}, color={0,0,127}));
          connect(pericardium.y, rightVentricle.Pericardium) annotation (Line(
                points={{41,-22},{46,-22},{46,-34},{17.7,-34}}, color={0,0,127}));
          connect(pericardium.y, RightAtrium.externalPressure) annotation (Line(
                points={{41,-22},{46,-22},{46,-8},{-28,-8},{-28,-36}}, color={0,0,
                  127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                Documentation(revisions = "<html>
        <p><i>2022</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
            experiment(StopTime = 5));
        end RightHeartTest;

        model RightAtriumTest
          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        Types.Constants.VolumeConst               RightAtriumV0(k=0)
          annotation (Placement(transformation(extent={{-60,-46},{-52,-38}})));
           Fluid.Components.ElasticVessel               RightAtrium(
            redeclare package Medium = Blood,
            stateName="RightAtrium.Vol",
            useExternalPressureInput=true,
            useV0Input=true,
            useComplianceInput=false,
            volume_start=5.16454e-05,
            Compliance=9.3757696980707e-08,
            nPorts=2)                     "right atrium"
          annotation (Placement(transformation(extent={{-45,-65},{-25,-45}})));
          Fluid.Components.Conductor systemic(redeclare package Medium = Blood,
              Conductance=1.250102626409427e-07*(5/90))
                     annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-54,-86})));
          Types.Constants.PressureConst pericardium(k=-445.2967739661)
            annotation (Placement(transformation(extent={{-42,-6},{-34,2}})));
          Fluid.Sources.VolumeOutflowSource bloodFlow(SolutionFlow(displayUnit=
                  "l/min") = 9.1666666666667e-05,
                                     redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{14,-64},{34,-44}})));
          Fluid.Sources.PressureSource systemicArtery(pressure_start(displayUnit=
                  "mmHg") = 113990.64123983, redeclare package Medium = Blood)
            annotation (Placement(transformation(extent={{-96,-96},{-76,-76}})));
        equation
        connect(RightAtrium.zeroPressureVolume,RightAtriumV0. y) annotation (Line(
            points={{-42,-46},{-46,-46},{-46,-42},{-51,-42}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(systemic.q_in, RightAtrium.q_in[1]) annotation (Line(
              points={{-44,-86},{-35.1,-86},{-35.1,-55.65}},
              color={127,0,0},
              thickness=0.5));
          connect(pericardium.y, RightAtrium.externalPressure) annotation (Line(
                points={{-33,-2},{-28,-2},{-28,-46}}, color={0,0,127}));
          connect(RightAtrium.q_in[2], bloodFlow.q_in) annotation (Line(
              points={{-35.1,-54.35},{16,-54.35},{16,-54},{14,-54}},
              color={127,0,0},
              thickness=0.5));
          connect(systemicArtery.y, systemic.q_out) annotation (Line(
              points={{-76,-86},{-64,-86}},
              color={127,0,0},
              thickness=0.5));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
                Documentation(revisions = "<html>
        <p><i>2022</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
            experiment(StopTime = 5));
        end RightAtriumTest;

        model RightHearTissue
          Components.Tissue rightHeartTissue(redeclare package Blood =
                Physiolibrary.Media.Blood)
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Fluid.Sources.PressureSource rightAtrium(pressure_start(displayUnit=
                  "mmHg") = 101422.97689116, redeclare package Medium =
                Physiolibrary.Media.Blood)
            annotation (Placement(transformation(extent={{-78,18},{-58,-2}})));
          Fluid.Sources.PressureSource systemicArtery(pressure_start(displayUnit=
                  "mmHg") = 114657.2531769, redeclare package Medium =
                Physiolibrary.Media.Blood)
            annotation (Placement(transformation(extent={{36,72},{56,52}})));
          Types.Constants.FrequencyConst Sympathicus(k(displayUnit="Hz") = 1.5)
            annotation (Placement(transformation(extent={{-22,62},{-14,54}})));
          Types.Constants.PowerConst power(k(displayUnit="W") = 0.15)
            annotation (Placement(transformation(extent={{-64,38},{-56,46}})));
          inner Modelica.Fluid.System system(T_ambient=310.15)
            annotation (Placement(transformation(extent={{66,-74},{86,-54}})));
        equation
          connect(rightAtrium.y, rightHeartTissue.port_b) annotation (Line(
              points={{-58,8},{-40,8},{-40,10},{-25.8,10}},
              color={127,0,0},
              thickness=0.5));
          connect(systemicArtery.y, rightHeartTissue.port_a) annotation (Line(
              points={{56,62},{68,62},{68,10},{6,10}},
              color={127,0,0},
              thickness=0.5));
          connect(Sympathicus.y, rightHeartTissue.Ganglia) annotation (Line(
                points={{-13,58},{-6,58},{-6,15}}, color={0,0,127}));
          connect(power.y, rightHeartTissue.motionPower) annotation (Line(points=
                  {{-55,42},{-17,42},{-17,19}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end RightHearTissue;
      end Examples;

      class References "References"
        extends Modelica.Icons.References;

        annotation (Documentation(info="<html>
<table>

	<tr>
		<td>[Bazett1997]</td>
		<td>H. C. Bazett, \"AN ANALYSIS OF THE TIME-RELATIONS OF ELECTROCARDIOGRAMS,\" Annals of Noninvasive Electrocardiology, vol. 2, pp. 177-194, 1997. </td>
	</tr>
	<tr>
		<td>[Bootsma1994]</td>
		<td>M. Bootsma, C. A. Swenne, H. H. Van Bolhuis, P. C. Chang, V. M. Cats, and A. Bruschke, \"Heart rate and heart rate variability as indexes of sympathovagal balance,\" American Journal of Physiology, vol. 266, pp. H1565-H1565, 1994. </td>
	</tr>
	<tr>
		<td>[Braunwald1976]</td>
		<td>E. Braunwald, J. Ross, and E. H. Sonnenblick, Mechanisms of contraction of the normal and failing heart: Little, Brown Boston, 1976. </td>
	</tr>
	<tr>
		<td>[Carter1998]</td>
		<td>Y. M. Carter, C. X. Jia, P. F. Soto, J. P. Starr, D. G. Rabkin, D. T. Hsu, et al., \"Diastolic properties, myocardial water content, and histologic condition of the rat left ventricle: effect of varied osmolarity of a coronary perfusate,\" The Journal of heart and lung transplantation : the official publication of the International Society for Heart Transplantation, vol. 17, pp. 140-149, 1998/02// 1998. </td>
	</tr>
	<tr>
		<td>[Collins-Nakai1994]</td>
		<td>R. L. Collins-Nakai, D. Noseworthy, and G. D. Lopaschuk, \"Epinephrine increases ATP production in hearts by preferentially increasing glucose metabolism,\" Am J Physiol, vol. 267, pp. H1862-71, Nov 1994. </td>
	</tr>
	<tr>
		<td>[Fatema2002]</td>
		<td>K. Fatema, O. Hirono, Y. Takeishi, J. Nitobe, K. Kaneko, M. Ito, et al., \"Hemodialysis improves myocardial interstitial edema and left ventricular diastolic function in patients with end-stage renal disease: noninvasive assessment by ultrasonic tissue characterization,\" Heart and vessels, vol. 16, pp. 227-231, 2002. </td>
	</tr>
	<tr>
		<td>[Ferguson1985]</td>
		<td>D. W. Ferguson, F. M. Abboud, and A. L. Mark, \"Relative contribution of aortic and carotid baroreflexes to heart rate control in man during steady state and dynamic increases in arterial pressure,\" The Journal of Clinical Investigation, vol. 76, pp. 2265-2274, 1985. </td>
	</tr>
	<tr>
		<td>[Gaasch1975]</td>
		<td>W. H. Gaasch, J. S. Cole, M. A. Quinones, and J. Alexander, \"Dynamic determinants of letf ventricular diastolic pressure-volume relations in man,\" Circulation, vol. 51, pp. 317-323, 1975. </td>
	</tr>
	<tr>
		<td>[Guyton1961]</td>
		<td>A. C. Guyton and K. Sagawa, \"Compensations of cardiac output and other circulatory functions in areflex dogs with large AV fistulas,\" The American journal of physiology, vol. 200, p. 1157, 1961. </td>
	</tr>
	<tr>
		<td>[Kumagai1994]</td>
		<td>K. Kumagai and I. A. Reid, \"Angiotensin II exerts differential actions on renal nerve activity and heart rate,\" Hypertension, vol. 24, pp. 451-456, 1994. </td>
	</tr>
	<tr>
		<td>[Langer1997]</td>
		<td>G. A. Langer, The myocardium: Academic Press, 1997. </td>
	</tr>
	<tr>
		<td>[Little1993]</td>
		<td>W. C. Little and C. P. Cheng, \"Effect of exercise on left ventricular-arterial coupling assessed in the pressure-volume plane,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 264, pp. H1629-H1629, 1993. </td>
	</tr>
	<tr>
		<td>[McKeever1958]</td>
		<td>W. McKeever, D. Gregg, and P. Canney, \"Oxygen uptake of the nonworking left ventricle,\" Circulation research, vol. 6, pp. 612-623, 1958. </td>
	</tr>
	<tr>
		<td>[MCKEEVER1958]</td>
		<td>W. P. MCKEEVER, D. E. GREGG, and P. C. CANNEY, \"Oxygen Uptake of the Nonworking Left Ventricle,\" Circulation Research, vol. 6, pp. 612-623, September 1, 1958 1958. </td>
	</tr>
	<tr>
		<td>[MONROE1960]</td>
		<td>R. G. MONROE and G. FRENCH, \"Ventricular Pressure-Volume Relationships and Oxygen Consumption in Fibrillation and Arrest,\" Circulation Research, vol. 8, pp. 260-266, January 1, 1960 1960. </td>
	</tr>
	<tr>
		<td>[MONROE1961]</td>
		<td>R. G. MONROE and G. N. FRENCH, \"Left ventricular pressure-volume relationships and myocardial oxygen consumption in the isolated heart,\" Circulation research, vol. 9, pp. 362-373, 1961. </td>
	</tr>
	<tr>
		<td>[Murphy2008]</td>
		<td>E. Murphy and C. Steenbergen, \"Ion transport and energetics during cell death and protection,\" Physiology (Bethesda), vol. 23, pp. 115-23, Apr 2008. </td>
	</tr>
	<tr>
		<td>[NODA1993]</td>
		<td>T. NODA, C.-P. CHENG, P. P. DE TOMBE, and W. C. LITTLE, \"Curvilinearity of LV end-systolic pressure-volume and dP/dt,-end-diastolic volume relations,\" 1993. </td>
	</tr>
	<tr>
		<td>[Pogátsa1982]</td>
		<td>G. Pogátsa, M. Z. Koltai, and G. Grósz, \"The role of the myocardial water content in heart function,\" Acta physiologica Academiae Scientiarum Hungaricae, vol. 59, pp. 305-309, 1982 1982. </td>
	</tr>
	<tr>
		<td>[Prabhu1993]</td>
		<td>S. D. Prabhu and G. L. Freeman, \"Left ventricular energetics in closed-chest dogs,\" Am J Physiol, vol. 265, pp. H1048-55, Oct 1993. </td>
	</tr>
	<tr>
		<td>[Raeder1995]</td>
		<td>E. A. Raeder, P. Albrecht, M. Perrott, and R. J. Cohen, \"Kinetics of Cycle Length Dependence of Ventricular Repolarization,\" Journal of Cardiovascular Electrophysiology, vol. 6, pp. 163-169, 1995. </td>
	</tr>
	<tr>
		<td>[ROSS1965]</td>
		<td>J. ROSS, J. W. LINHART, and E. BRAUNWALD, \"Effects of Changing Heart Rate in Man by Electrical Stimulation of the Right Atrium: Studies at Rest, during Exercise, and with Isoproterenol,\" Circulation, vol. 32, pp. 549-558, October 1, 1965 1965. </td>
	</tr>
	<tr>
		<td>[Sagawa1988]</td>
		<td>K. Sagawa, L. Maughan, H. Suga, and K. Sunagawa, Cardiac contraction and the pressure-volume relationship vol. 480: Oxford University Press New York, 1988. </td>
	</tr>
	<tr>
		<td>[Suga1979]</td>
		<td>H. Suga, Total mechanical energy of a ventricle model and cardiac oxygen consumption vol. 236, 1979. </td>
	</tr>
	<tr>
		<td>[SUGA1974]</td>
		<td>H. SUGA and K. SAGAWA, \"Instantaneous Pressure-Volume Relationships and Their Ratio in the Excised, Supported Canine Left Ventricle,\" Circulation Research, vol. 35, pp. 117-126, July 1, 1974 1974. </td>
	</tr>
	<tr>
		<td>[SUGA1976]</td>
		<td>H. SUGA, K. SAGAWA, and D. P. KOSTIUK, \"Controls of ventricular contractility assessed by pressure-volume ratio, Emax,\" Cardiovascular Research, vol. 10, pp. 582-592, September 1, 1976 1976. </td>
	</tr>
	<tr>
		<td>[Sugimoto1966]</td>
		<td>T. Sugimoto, K. Sagawa, and A. Guyton, Effect of tachycardia on cardiac output during normal and increased venous return vol. 211, 1966. </td>
	</tr>
	<tr>
		<td>[Takeshita1979]</td>
		<td>A. Takeshita, A. L. Mark, D. L. Eckberg, and F. M. Abboud, Effect of central venous pressure on arterial baroreflex control of heart rate vol. 236, 1979. </td>
	</tr>
	<tr>
		<td>[Warner1962]</td>
		<td>H. R. Warner and A. Cox, A mathematical model of heart rate control by sympathetic and vagus efferent information vol. 17, 1962. </td>
	</tr>
	<tr>
		<td>[Weber1977]</td>
		<td>K. T. Weber and J. S. Janicki, Myocardial oxygen consumption: the role of wall force and shortening vol. 233, 1977. </td>
	</tr>
	<tr>
		<td>[Woo1972]</td>
		<td>S. L. Y. Woo, A. S. Kobayashi, C. Lawrence, and W. A. Schlegel, \"Mathematical model of the corneo-scleral shell as applied to intraocular pressure-volume relations and applanation tonometry,\" Annals of Biomedical Engineering, vol. 1, pp. 87-98, 1972/09/01 1972. </td>
	</tr>
	<tr>
		<td>[Xenopoulos1994]</td>
		<td>N. P. Xenopoulos and R. J. Applegate, \"The effect of vagal stimulation on left ventricular systolic and diastolic performance,\" American Journal of Physiology-Heart and Circulatory Physiology, vol. 35, p. H2167, 1994.  </td>
	</tr>

</table>
</html>"));
      end References;

    end Heart;

    package Lungs

      model Lungs
         extends Icons.Lungs;
        import Physiolibrary.Types.*;

        replaceable package Air = Media.Air constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                 annotation (
           choicesAllMatching = true, Dialog( group = "Ventilation"));
        replaceable package PleuralFluid = Physiolibrary.Media.Water constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                          annotation (
           choicesAllMatching = true, Dialog( group = "Thorax"));
        replaceable package Blood = Physiolibrary.Media.Blood  constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation (
           choicesAllMatching = true, Dialog( group = "Perfusion"));

        parameter Integer NRU=1 "Number of respiratory units";

        parameter Integer nPorts=0   "Number of airways ports" annotation (
          Evaluate = true,
          Dialog(connectorSizing = true, group = "Ports"));

        parameter Types.Volume LungsAirVolume_initial=0.00302   "Initial volume of alveolar space" annotation (Dialog( group = "Ventilation"));
        parameter Real Air_initial[Air.nS] = {100,40,47,760 - 187} "Initial composition of air inside alveoli"
           annotation (Dialog( group = "Ventilation"));
        parameter Types.Volume FunctionalResidualCapacity=0.00231   "Functional residual capacity" annotation (Dialog( group = "Ventilation"));
        parameter Types.HydraulicCompliance TotalCompliance=1.0197162129779e-06   "Pulmonary compliance" annotation (Dialog( group = "Ventilation"));

        parameter Types.Volume ResidualVolume=0.0013   "Residual volume"
          annotation (Dialog( group = "Ventilation"));
        parameter Types.Volume TotalLungCapacity=0.00623   "Total Capacity" annotation (Dialog( group = "Ventilation"));
        parameter Types.Volume BaseTidalVolume=0.0005   "Base Tidal Volume" annotation (Dialog( group = "Ventilation"));

        parameter Types.HydraulicResistance AirwaysResistances[NRU]=fill(NRU*147099.75,NRU)   "Airways resistances per respiratory unit" annotation (Dialog( group = "Ventilation"));

        parameter Real ArterialBloodComposition[Blood.nS]  = Blood.ArterialDefault
        "Initial composition of arterial blood" annotation (Dialog( group = "Perfusion"));

        parameter Real VenousBloodComposition[Blood.nS]  = Blood.VenousDefault
        "Initial composition of venous blood" annotation (Dialog( group = "Perfusion"));

        parameter Types.Volume ArteriesVolume_initial=0.000200488  "Initial volume of blood in arteries"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.Volume ArteriesZeroPressureVolume=0.00011 "Blood arteries zero pressure volume"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicCompliance ArteriesCompliance=3.975326351982e-08 "Blood arteries compliance"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicConductance ArteriesConductance=1.6876385456527e-07   "Blood arteries conductance"
         annotation (Dialog( group = "Perfusion"));

        parameter Types.Volume CapillariesVolume_initial=0.000200141 "Initial volume of blood in capillaries"
        annotation (Dialog( group = "Perfusion"));
        parameter Types.Volume CapillariesZeroPressureVolume=0.00014 "Maximal volume of blood capillaries zero at zero blood pressure inside"
        annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicCompliance CapillariesCompliance=3.45028324889e-08   "Blood capillaries compliance"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicConductance CapillariesConductance=2.250184727537e-07   "Blood capillaries conductance"
        annotation (Dialog( group = "Perfusion"));

        parameter Types.Volume VeinsVolume_initial=0.000210463  "Initial volume of blood in veins"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.Volume VeinsZeroPressureVolume=0.00015 "Blood venous zero pressure volume"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicCompliance VeinsCompliance=4.5003694550739e-08 "Blood venous compliance"
         annotation (Dialog( group = "Perfusion"));
        parameter Types.HydraulicConductance VeinsConductance=6.7505541826109e-07   "Blood venous conductance"
         annotation (Dialog( group = "Perfusion"));

        parameter Real Diffusions[NRU](unit="mol2.s-1.J-1")=fill(1e-4,NRU)         "Gasses diffussions per respiratory unit" annotation (Dialog( group = "Diffusion"));

        parameter Volume PleuralFluidVolume_initial=0.0001   "Initial volume of pleural fluid volume" annotation(Dialog( group = "Thorax"));
        parameter Volume PleuralCavityVolume = PleuralFluidVolume_initial + LungsAirVolume_initial "Volume of relaxed pleural cavity" annotation(Dialog( group = "Thorax"));

       // parameter MolarFlowRate O2_consumption=1.666666666666667e-05*(2*7.71)       "Tissue consumption of O2 by metabolism";
       // parameter MolarFlowRate CO2_production=1.666666666666667e-05*(2*6.17)       "Tissue production of CO2 by metabolism";
       // parameter Pressure IntrathoraxPressure=-700   "Intrathorax pressure relative to ambient pressure";
        //parameter Volume ResidualVolume = 0.0013 "Lungs residual volume" annotation(Dialog( group = "Ventilation"));
        //parameter Volume TotalLungCapacity = 0.00623 "Total Lung Capacity" annotation(Dialog( group = "Ventilation"));
        //parameter Volume BaseTidalVolume = 0.0005 "Base Tidal Volume" annotation(Dialog( group = "Ventilation"));
        //parameter Volume LungsAirVolume_initial = 0.00302 "Initial volume of alveolar space" annotation(Dialog( group = "Ventilation"));
        //parameter Volume FunctionalResidualCapacity = 0.00231 "Functional residual capacity" annotation(Dialog( group = "Ventilation"));
        //parameter HydraulicResistance TotalResistance=147099.75   "Total lungs pathways resistance" annotation(Dialog( group = "Ventilation"));
        /*
  parameter Real BronchiResistanceFraction = 0.3 annotation(Dialog( group = "Ventilation"));
  parameter Real AlveoliDuctResistanceFraction = 0.2 annotation(Dialog( group = "Ventilation"));
  parameter Real TracheaResistanceFraction = 1 - (BronchiResistanceFraction + AlveoliDuctResistanceFraction) / 2 annotation(Dialog( group = "Ventilation"));
  parameter HydraulicResistance TracheaResistance = TotalResistance * TracheaResistanceFraction "Left Bronchi Resistance" annotation(Dialog( group = "Ventilation"));
  parameter HydraulicResistance LeftBronchiResistance = TotalResistance * BronchiResistanceFraction "Left Bronchi Resistance" annotation(Dialog( group = "Ventilation"));
  parameter HydraulicResistance LeftAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Left Alveoli Resistance" annotation(Dialog( group = "Ventilation"));
  parameter HydraulicResistance RightBronchiResistance = TotalResistance * BronchiResistanceFraction "Right Bronchi Resistance" annotation(Dialog( group = "Ventilation"));
  parameter HydraulicResistance RightAlveoliResistance = TotalResistance * AlveoliDuctResistanceFraction "Right Alveoli Resistance" annotation(Dialog( group = "Ventilation"));
  */
        //parameter HydraulicCompliance TotalCompliance=1.0197162129779e-06   "Total lungs compliance" annotation(Dialog( group = "Ventilation"));

      public
      Physiolibrary.Fluid.Components.ElasticVessel pulmArty(
          redeclare package Medium = Blood,
          massFractions_start=VenousBloodComposition,
          stateName="PulmArty.Vol",
          Compliance=ArteriesCompliance,
          ZeroPressureVolume=ArteriesZeroPressureVolume,
          useComplianceInput=false,
          useExternalPressureInput=true,
          useV0Input=false,
          volume_start=ArteriesVolume_initial,
          nPorts=1+NRU)
        annotation (Placement(transformation(extent={{-90,-28},{-70,-8}})));

      Physiolibrary.Fluid.Components.ElasticVessel pulmVeins(
          redeclare package Medium = Blood,
          massFractions_start=ArterialBloodComposition,
          stateName="PulmVeins.Vol",
          Compliance=VeinsCompliance,
          ZeroPressureVolume=VeinsZeroPressureVolume,
          useComplianceInput=false,
          useExternalPressureInput=true,
          useV0Input=false,
          volume_start=VeinsVolume_initial,
          nPorts=1+NRU)               "pulmonary veins"
        annotation (Placement(transformation(extent={{30,-26},{50,-6}})));

      Physiolibrary.Fluid.Components.Conductor pulmVeinsConductance(redeclare
            package Medium =                                                                   Blood,
            Conductance=VeinsConductance)
        annotation (Placement(transformation(extent={{68,-27},{90,-5}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{84,-68},{104,-48}}),
                                                      iconTransformation(extent={{-120,20},
                  {-80,60}})));
        Types.Constants.VolumeConst
                                 volume(k=1e-06*(110 + 140 + 150))
          annotation (Placement(transformation(extent={{-26,-96},{-18,-88}})));
        Modelica.Blocks.Math.Sum sum2(nin=1+NRU)
          annotation (Placement(transformation(extent={{-26,-84},{-18,-76}})));
        Modelica.Blocks.Math.Gain PulmonaryCirculation_DeoxygenatedBloodVolume(k=1)
          annotation (Placement(transformation(extent={{-26,-70},{-18,-62}})));
        inner Modelica.Fluid.System system                              "Human body system setting" annotation (
          Placement(transformation(extent={{76,64},{96,84}})));
        Fluid.Components.ElasticVessel pleuralSpace(
          redeclare package Medium = PleuralFluid,
          volume_start=PleuralFluidVolume_initial,
          useThermalPort=false,
          ZeroPressureVolume=PleuralCavityVolume,
          Compliance=TotalCompliance,
          useExternalPressureInput=true,
          useSigmoidCompliance=false,
          useSubstances=false,
          useInternalSpaceInput=true,
          InternalSpace(displayUnit="l") = PleuralCavityVolume,
          nPorts=1) "Pleural space"
          annotation (Placement(transformation(extent={{-32,20},{-52,40}})));
        Fluid.Sensors.PressureMeasure pleauralPressure(redeclare package Medium =
              PleuralFluid, GetAbsolutePressure=false) "Pleaural pressure"
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-64,40})));
        Fluid.Interfaces.FluidPort_a blood_in(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-110,-26},{-90,-6}}),
              iconTransformation(extent={{-110,-50},{-90,-30}})));
        Fluid.Interfaces.FluidPort_b blood_out(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{90,-26},{110,-6}}),
              iconTransformation(extent={{90,-50},{110,-30}})));
        Types.RealIO.PressureInput respiratotyMusclePressure annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-50,86}),iconTransformation(
              extent={{20,-20},{-20,20}},
              rotation=0,
              origin={80,40})));
        Components.RespiratoryUnit respiratoryUnit[NRU](
          redeclare package Air = Air,
          redeclare package Blood = Blood,
          AirVolume_initial=fill(LungsAirVolume_initial/NRU, NRU),
          Air_initial=fill(Air_initial, NRU),
          TotalCapacity=fill(TotalLungCapacity/NRU, NRU),
          TotalResistance=AirwaysResistances,
          CapillariesVolume_initial=fill(CapillariesVolume_initial/NRU, NRU),
          Blood_initial=fill(ArterialBloodComposition, NRU),
          ResidualVolume=fill(ResidualVolume/NRU, NRU),
          BaseTidalVolume=fill(BaseTidalVolume/NRU, NRU),
          FunctionalResidualCapacity=fill(FunctionalResidualCapacity/NRU, NRU),
          TotalCompliance=fill(TotalCompliance/NRU, NRU),
          CapillariesZeroPressureVolume=fill(CapillariesZeroPressureVolume/NRU, NRU),
          CapillariesCompliance=fill(CapillariesCompliance/NRU, NRU),
          CapillariesConductance=fill(CapillariesConductance/NRU, NRU),
          ArteriesConductance=fill(ArteriesConductance/NRU, NRU),
          Diffusion=Diffusions,
          each nPorts=nPorts) annotation (Placement(transformation(rotation=0, extent={{-10,-24},
                  {10,-4}})));

        Fluid.Interfaces.FluidPorts_a airways[nPorts](redeclare package Medium = Air)
          annotation (Placement(transformation(rotation=0, extent={{-6,60},{6,94}}),
              iconTransformation(extent={{-6,82},{6,116}})));
        Modelica.Blocks.Math.Sum lungsVolume(nin=NRU) annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-36,-2})));
        Modelica.Blocks.Math.Gain pericardium(k=0.84)
          annotation (Placement(transformation(extent={{-26,-56},{-18,-48}})));
      equation

        sum2.u[1]=pulmVeins.volume;
        PulmonaryCirculation_DeoxygenatedBloodVolume.u = pulmArty.volume;

        for i in 1:NRU loop
          sum2.u[1+i]=respiratoryUnit[i].pulmCapysVentilated.volume;

          connect(respiratoryUnit[i].blood_in, pulmArty.q_in[1+i]) annotation (Line(
            points={{-10,-18.4},{-70,-18.4},{-70,-18},{-80.1,-18}},
            color={127,0,0},
            thickness=0.5));
          connect(respiratoryUnit[i].blood_out, pulmVeins.q_in[1+i]) annotation (Line(
            points={{10.2,-18},{26,-18},{26,-16},{39.9,-16}},
            color={127,0,0},
            thickness=0.5));

          connect(pleauralPressure.pressure, respiratoryUnit[i].thoraxPressure)
          annotation (Line(points={{-70,36},{-74,36},{-74,6},{-4.1,6},{-4.1,-6.3}},
              color={0,0,127}));

          connect(airways, respiratoryUnit[i].airways) annotation (Line(
            points={{0,77},{0,-4.1}},
            color={127,0,0},
            thickness=0.5));
        end for;

        connect(volume.y, busConnector.PulmonaryCirculation_V0) annotation (Line(
            points={{-17,-92},{80,-92},{80,-58},{94,-58}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));

        connect(pulmVeinsConductance.q_in, pulmVeins.q_in[1]) annotation (Line(
            points={{68,-16},{54,-16},{54,-16},{39.9,-16}},
            color={127,0,0},
            thickness=0.5));

        connect(pleuralSpace.q_in[1],pleauralPressure.port)  annotation (Line(
            points={{-41.9,30},{-42,30},{-42,30},{-64,30}},
            color={127,0,0},
            thickness=0.5));
        connect(pleuralSpace.externalPressure,respiratotyMusclePressure)  annotation (
           Line(points={{-49,39},{-49,46},{-50,46},{-50,86}},
                                                         color={0,0,127}));
        connect(blood_in, pulmArty.q_in[1]) annotation (Line(
            points={{-100,-16},{-98,-16},{-98,-18},{-80.1,-18}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmVeinsConductance.q_out, blood_out) annotation (Line(
            points={{90,-16},{100,-16}},
            color={127,0,0},
            thickness=0.5));
        connect(pleauralPressure.pressure, pulmVeins.externalPressure) annotation (
            Line(points={{-70,36},{-74,36},{-74,6},{47,6},{47,-7}},  color={0,0,127}));
        connect(pleauralPressure.pressure, pulmArty.externalPressure) annotation (
            Line(points={{-70,36},{-74,36},{-74,-4},{-73,-4},{-73,-9}},    color={0,0,
                127}));
        connect(sum2.y, busConnector.PulmonaryCirculation_OxygenatedBloodVolume)
          annotation (Line(points={{-17.6,-80},{78,-80},{78,-58},{94,-58}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(PulmonaryCirculation_DeoxygenatedBloodVolume.y, busConnector.PulmonaryCirculation_DeoxygenatedBloodVolume)
          annotation (Line(points={{-17.6,-66},{76,-66},{76,-58},{94,-58}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));

        connect(lungsVolume.y, pleuralSpace.internalSpace) annotation (Line(points={{-40.4,
                -2},{-62,-2},{-62,36},{-51,36}}, color={0,0,127}));
        connect(respiratoryUnit.volume, lungsVolume.u) annotation (Line(points={{4.8,
                -6.6},{4.8,-2},{-31.2,-2}},
                                      color={0,0,127}));
        connect(pleauralPressure.pressure, pericardium.u) annotation (Line(points=
               {{-70,36},{-74,36},{-74,-52},{-26.8,-52}}, color={0,0,127}));
        connect(pericardium.y, busConnector.Pericardium_Pressure) annotation (
            Line(points={{-17.6,-52},{78,-52},{78,-58},{94,-58}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-108,-48},{106,-70}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>

<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>", info="<html>
<p>Blood volume (and pressures) distribution between </p>
<p><ul>
<li>pulmonary arteries, </li>
<li>pulmonary veins and </li>
<li>pulmonary capilaries.</li>
</ul></p>
<p>Blood flow through ventilated alveoli.</p>
</html>"));
      end Lungs;

      package Components
        model RespiratoryUnit "Lungs respiratory unit"
          extends Physiolibrary.Icons.PulmonaryCirculation;

          parameter Integer nPorts=0   "Number of airways ports" annotation (
            Evaluate = true,
            Dialog(connectorSizing = true, group = "Ports"));

          replaceable package Air = Media.Air
              constrainedby Media.Interfaces.PartialMedium  "Air medium model"
                 annotation ( choicesAllMatching = true, Dialog( group = "Ventilation"));
          replaceable package Blood = Media.Blood
              constrainedby Media.Interfaces.PartialMedium "Blood medium model"
                 annotation ( choicesAllMatching = true, Dialog( group = "Perfusion"));

          parameter Types.Volume AirVolume_initial=0.00302   "Initial volume of alveolar space" annotation (Dialog( group = "Ventilation"));
          parameter Types.MassFraction Air_initial[Air.nS] = Air.X(100,40,47,760 - 187) "Initial composition of air inside alveoli"
             annotation (Dialog( group = "Ventilation"));
          parameter Types.Volume FunctionalResidualCapacity=0.00231   "Functional residual capacity" annotation (Dialog( group = "Ventilation"));
          parameter Types.HydraulicCompliance TotalCompliance=1.0197162129779e-06   "Pulmonary compliance" annotation (Dialog( group = "Ventilation"));

          parameter Types.Volume ResidualVolume=0.0013   "Residual volume"
            annotation (Dialog( group = "Ventilation"));
          parameter Types.Volume TotalCapacity=0.00623   "Total Capacity" annotation (Dialog( group = "Ventilation"));
          parameter Types.Volume BaseTidalVolume=0.0005   "Base Tidal Volume" annotation (Dialog( group = "Ventilation"));

          parameter Types.HydraulicResistance TotalResistance=147099.75   "Total airways resistance" annotation (Dialog( group = "Ventilation"));

          parameter Types.Volume CapillariesVolume_initial=0.000200141 "Initial volume of blood in capillaries"
          annotation (Dialog( group = "Perfusion"));
          parameter Types.MassFraction Blood_initial[Blood.nS] = Blood.ArterialDefault "Initial composition of blood" annotation (Dialog( group = "Perfusion"));
          parameter Types.Volume CapillariesZeroPressureVolume=0.00014 "Maximal volume of blood capillaries zero at zero blood pressure inside"
          annotation (Dialog( group = "Perfusion"));
          parameter Types.HydraulicCompliance CapillariesCompliance=3.45028324889e-08   "Blood capillaries compliance"
           annotation (Dialog( group = "Perfusion"));

          parameter Types.HydraulicConductance CapillariesConductance=2.250184727537e-07   "Blood capillaries conductance"
          annotation (Dialog( group = "Perfusion"));
          parameter Types.HydraulicConductance ArteriesConductance=1.6876385456527e-07   "Blood arteries conductance"
           annotation (Dialog( group = "Perfusion"));

          parameter Real Diffusion(unit="mol2.s-1.J-1")=1e-4         "Gasses diffussion" annotation (Dialog( group = "Diffusion"));

         Fluid.Components.ElasticVessel pulmCapysVentilated(
            redeclare package Medium = Blood,
            massFractions_start=Blood_initial,
            useSubstances=true,
            stateName="PulmCapys.Vol",
            Compliance=CapillariesCompliance,
            ZeroPressureVolume=CapillariesZeroPressureVolume,
            useComplianceInput=false,
            useExternalPressureInput=true,
            useV0Input=false,
            volume_start=CapillariesVolume_initial,
            nPorts=2) "pulmonary capilaries"
            annotation (Placement(transformation(extent={{0,-48},{20,-28}})));

          Fluid.Components.Conductor pulmArty(redeclare package Medium = Blood,
              Conductance=ArteriesConductance)
            annotation (Placement(transformation(extent={{-73,-55},{-51,-33}})));
          Fluid.Components.Conductor pulmCapys(redeclare package Medium = Blood,
              Conductance=CapillariesConductance)
            annotation (Placement(transformation(extent={{64,-51},{86,-29}})));
          Fluid.Components.ElasticVessel alveoli(
            redeclare package Medium = Air,
            volume_start=AirVolume_initial,
            massFractions_start=Air_initial,
            useThermalPort=false,
            ZeroPressureVolume=FunctionalResidualCapacity,
            ResidualVolume=ResidualVolume,
            Compliance=TotalCompliance,
            useExternalPressureInput=true,
            useSigmoidCompliance=true,
            VitalCapacity=TotalCapacity - ResidualVolume,
            BaseTidalVolume=BaseTidalVolume,
            useSubstances=true,
            nPorts=nPorts)
                      "Alveolar space" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,24})));
          Chemical.Components.GasSolubility O2_diffusion(KC=Diffusion)
            annotation (Placement(transformation(extent={{-54,-16},{-34,4}})));
          Chemical.Components.GasSolubility CO2_diffusion(KC=Diffusion)
            annotation (Placement(transformation(extent={{-22,-16},{-2,4}})));
          Fluid.Sensors.BloodGasesMeasurement alveolar(redeclare package Medium =
                Blood)
            annotation (Placement(transformation(extent={{32,-26},{52,-6}})));

        public
          Types.RealIO.PressureInput thoraxPressure(start=alveoli.ExternalPressure)
            annotation (Placement(transformation(
                rotation=270,
                extent={{-9,-9},{9,9}},
                origin={-41,77}), iconTransformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-41,77})));
          Types.RealIO.VolumeOutput volume annotation (Placement(transformation(
                rotation=90,
                extent={{-10,-10},{10,10}},
                origin={48,74}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={48,74})));
          Fluid.Interfaces.FluidPorts_a airways[nPorts](redeclare package Medium = Air)
            annotation (Placement(transformation(rotation=0, extent={{-6,82},{6,116}}),
                iconTransformation(extent={{-6,82},{6,116}})));
          Fluid.Interfaces.FluidPort_a blood_in(redeclare package Medium = Blood)
            annotation (Placement(transformation(rotation=0, extent={{-110,-54},{-90,-34}}),
                iconTransformation(extent={{-110,-54},{-90,-34}})));
          Fluid.Interfaces.FluidPort_b blood_out(redeclare package Medium = Blood)
            annotation (Placement(transformation(rotation=0, extent={{92,-50},{112,-30}}),
                iconTransformation(extent={{92,-50},{112,-30}})));
          Fluid.Components.Resistor airway[nPorts](redeclare package Medium = Air,
              each Resistance=TotalResistance) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={0,70})));
        equation
          if nPorts>0 then
            connect(airways, airway.q_in) annotation (Line(
                points={{0,99},{0,89.5},{1.77636e-15,89.5},{1.77636e-15,80}},
                color={127,0,0},
                thickness=0.5));
            connect(airway.q_out, alveoli.q_in) annotation (Line(
                points={{-1.77636e-15,60},{-1.77636e-15,40},{0,40},{0,23.9}},
                color={127,0,0},
                thickness=0.5));
          end if;
          connect(pulmArty.q_out, pulmCapysVentilated.q_in[1]) annotation (Line(
              points={{-51,-44},{10,-44},{10,-38.65},{9.9,-38.65}},
              color={127,0,0},
              thickness=0.5));
          connect(O2_diffusion.gas_port,alveoli. substances.O2) annotation (Line(
                points={{-44,4},{-44,12},{-12,12},{-12,14},{-8.88178e-16,14}},
                                                                             color={158,
                  66,200}));
          connect(CO2_diffusion.gas_port,alveoli. substances.CO2) annotation (
              Line(points={{-12,4},{-12,14},{-8.88178e-16,14}},
                                                          color={158,66,200}));
          connect(alveolar.b_port, pulmCapys.q_in) annotation (Line(
              points={{48.2,-26.2},{48.2,-40},{64,-40}},
              color={127,0,0},
              thickness=0.5));
          connect(pulmCapysVentilated.substances.O2,O2_diffusion. liquid_port)
            annotation (Line(points={{0,-38},{-44,-38},{-44,-16}},         color={
                  158,66,200}));
          connect(pulmCapysVentilated.substances.CO2,CO2_diffusion. liquid_port)
            annotation (Line(points={{0,-38},{-12,-38},{-12,-16}},
                color={158,66,200}));
          connect(pulmCapysVentilated.q_in[2],alveolar. a_port) annotation (Line(
              points={{9.9,-37.35},{36,-37.35},{36,-26.2}},
              color={127,0,0},
              thickness=0.5));
          connect(thoraxPressure, alveoli.externalPressure)
            annotation (Line(points={{-41,77},{-41,31},{-9,31}}, color={0,0,127}));
          connect(volume, alveoli.fluidVolume)
            annotation (Line(points={{48,74},{48,40},{8,40},{8,34}}, color={0,0,127}));
          connect(blood_in, pulmArty.q_in)
            annotation (Line(points={{-100,-44},{-73,-44}}, color={127,0,0}));
          connect(blood_out, pulmCapys.q_out)
            annotation (Line(points={{102,-40},{86,-40}}, color={127,0,0}));
          connect(thoraxPressure, pulmCapysVentilated.externalPressure) annotation (
              Line(points={{-41,77},{-41,50},{18,50},{18,-29},{17,-29}}, color={0,0,127}));

          connect(alveolar.substances, pulmCapysVentilated.substances)
            annotation (Line(
              points={{32,-16},{0,-16},{0,-38},{0,-38}},
              color={158,66,200},
              thickness=0.5));
             annotation (Dialog( group = "Perfusion"));
        end RespiratoryUnit;

        model LungBloodFlow
            extends Physiolibrary.Icons.LungShunt;
          Physiolibrary.Types.RealIO.VolumeFlowRateInput   CardiacOutput
            annotation (Placement(transformation(extent={{-120,40},{-80,80}})));

          parameter Physiolibrary.Types.Fraction BasicRLShuntFraction(displayUnit="%") =  0.02
          "basic percentage of total blood flow not exposed to lung air";                                                            //
        //  parameter Real BasicRLShunt(final displayUnit="ml/min") =  110; // 220.0;
          parameter Physiolibrary.Types.Pressure RightHemithorax_Pressure( displayUnit="mmHg") =   -533.28954966;
          parameter Physiolibrary.Types.Pressure LeftHemithorax_Pressure( displayUnit="mmHg") =   -533.28954966;

          Physiolibrary.Types.Pressure PressureGradientRightLeft(displayUnit="mmHg")
          "difference between right and left hemithorax pressure";
          Physiolibrary.Types.Fraction Thorax_RightLungFlowFract(displayUnit="1")
          "fraction of blood flow to right lung";
          Physiolibrary.Types.Fraction Thorax_LeftLungFlowFract(displayUnit="1")
          "fraction of blood flow to left lung";
          Physiolibrary.Types.Fraction RightHemithorax_LungInflation(displayUnit="1")
          "dammage effect of right hemithorax inflation";
          Physiolibrary.Types.Fraction LeftHemithorax_LungInflation(displayUnit="1")
          "dammage effect of left hemithorax inflation";
          Physiolibrary.Types.VolumeFlowRate Total(displayUnit="ml/min")
          "cardiac output";

          Physiolibrary.Types.VolumeFlowRate RightLeftShunt(displayUnit="ml/min")
          "blood flow not exposed to lung air without dammage effect";
          Physiolibrary.Types.VolumeFlowRate Alveolar(displayUnit="ml/min")
          "blood flow exposed to lung air without dammage effect";

        //  Real RightLungTotal(final displayUnit="ml/min") "right lung blood flow exposed to lung air without dammage effect";
        //  Real RightLungVentilated(final displayUnit="ml/min") "right lung blood flow exposed to lung air";
        //  Real RightLungShunt(final displayUnit="ml/min");
        //  Real LeftLungTotal(final displayUnit="ml/min");
        //  Real LeftLungVentilated(final displayUnit="ml/min");
        //  Real LeftLungShunt(final displayUnit="ml/min");
        //  Real AlveolarShunt(final displayUnit="ml/min");
        //  Real TotalShunt(final displayUnit="ml/min");

          parameter Real[:,3] PressureOnInflation =   {{ -4.0,  1.0,  0}, {  4.0,  0.0,  0}};
          parameter Real[:,3] PressureGradientOnFlowDist =   {{ -25,  0.0,  0}, {   0,  0.5,  0.03}, {  25,  1.0,  0}};

          Physiolibrary.Types.RealIO.VolumeFlowRateOutput AlveolarVentilated(
                                                            final displayUnit="ml/min") annotation (Placement(transformation(extent={{80,40},{120,80}}),
                iconTransformation(extent={{80,40},{120,80}})));
        Physiolibrary.Blocks.Interpolation.Curve
          Thorax_PressureGradientOnFlowDist(
          x=PressureGradientOnFlowDist[:, 1],
          y=PressureGradientOnFlowDist[:, 2],
          slope=PressureGradientOnFlowDist[:, 3],
            Xscale=101325/760)
          annotation (Placement(transformation(extent={{-40,52},{-20,72}})));
        Physiolibrary.Blocks.Interpolation.Curve Thorax_PressureOnInflationR(
          x=PressureOnInflation[:, 1],
          y=PressureOnInflation[:, 2],
          slope=PressureOnInflation[:, 3],
            Xscale=101325/760)
          annotation (Placement(transformation(extent={{52,46},{72,66}})));
        Physiolibrary.Blocks.Interpolation.Curve Thorax_PressureOnInflationL(
          x=PressureOnInflation[:, 1],
          y=PressureOnInflation[:, 2],
          slope=PressureOnInflation[:, 3],
            Xscale=101325/760)
          annotation (Placement(transformation(extent={{-2,-24},{18,-4}})));
        equation
               PressureGradientRightLeft  =  RightHemithorax_Pressure - LeftHemithorax_Pressure;

        //division between left and rigth lung blood flow by hemithorax pressure
               Thorax_PressureGradientOnFlowDist.u = PressureGradientRightLeft;
               Thorax_LeftLungFlowFract  =  Thorax_PressureGradientOnFlowDist.val;
               Thorax_RightLungFlowFract  =  1.0 - Thorax_LeftLungFlowFract;

        //damage effect of hemithorax pressure
               Thorax_PressureOnInflationR.u = RightHemithorax_Pressure;
               RightHemithorax_LungInflation = Thorax_PressureOnInflationR.val;
               Thorax_PressureOnInflationL.u = LeftHemithorax_Pressure;
               LeftHemithorax_LungInflation = Thorax_PressureOnInflationL.val;

               Total  =  CardiacOutput;
               RightLeftShunt  = BasicRLShuntFraction*Total; //min(BasicRLShunt,Total);
               Alveolar  =  Total - RightLeftShunt;
        //       RightLungTotal  =  Alveolar * Thorax_RightLungFlowFract;
        //       RightLungVentilated  =  RightLungTotal * RightHemithorax_LungInflation;
        //       RightLungShunt  =  RightLungTotal - RightLungVentilated;
        //       LeftLungTotal  =  Alveolar * Thorax_LeftLungFlowFract;
        //       LeftLungVentilated  =  LeftLungTotal * LeftHemithorax_LungInflation;
        //       LeftLungShunt  =  LeftLungTotal - LeftLungVentilated;
        //       AlveolarVentilated  =  RightLungVentilated + LeftLungVentilated;
        //       AlveolarShunt  =  RightLungShunt + LeftLungShunt;
        //       TotalShunt  =  RightLeftShunt + AlveolarShunt;
               AlveolarVentilated  = Alveolar * ( Thorax_RightLungFlowFract * RightHemithorax_LungInflation + Thorax_LeftLungFlowFract * LeftHemithorax_LungInflation);
          annotation ( Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>",   info="<html>
<p>Calculation of blood flow fraction through ventilated alveoli.</p>
</html>"),  Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={                             Text(
                  extent={{-102,-92},{112,-114}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end LungBloodFlow;

        model Angiotensine2
        //  extends Library.Interfaces.Tissues.Liver;
        //  extends Library.Interfaces.Tissues.Kidney;
          extends Physiolibrary.Icons.Lungs;

        // outer parameter Real ECF_Vol(final displayUnit="ml");

        Physiolibrary.Blocks.Factors.Normalization A2 annotation (Placement(transformation(extent={{-2,-2},{18,18}})));
        Physiolibrary.Types.Constants.ConcentrationConst A2CONC(k=0.3333e-9/
              1.046) "0.3333 pg/ml = 0.3333*1e-15/1e-6 kg/m3"
          annotation (Placement(transformation(extent={{-24,52},{-4,72}})));
        Physiolibrary.Types.BusConnector busConnector annotation (Placement(
              transformation(extent={{-88,78},{-68,98}}), iconTransformation(extent=
                 {{-90,-70},{-70,-50}})));
          Modelica.Blocks.Interfaces.RealInput Renin annotation (Placement(transformation(extent={{-74,8},{-54,28}}),
                iconTransformation(extent={{-100,20},{-60,60}})));
          Modelica.Blocks.Interfaces.RealOutput Angiotensine2(
                                                       final displayUnit="pg/ml", quantity="Concentration")
                                                                  annotation (
              Placement(transformation(extent={{18,-66},{38,-46}}),
                iconTransformation(extent={{80,-20},{120,20}})));
        Modelica.Blocks.Sources.Constant
            CEBase_ReninConc(k=1e6/30) "1 Gu/ml = 1e6 Gu/m3"
            annotation (Placement(transformation(extent={{-66,-12},{-46,8}})));
          Modelica.Blocks.Math.Division EndogenousRate
            annotation (Placement(transformation(extent={{-30,-2},{-10,18}})));
        equation
          connect(A2CONC.y, A2.yBase)
            annotation (Line(
              points={{-1.5,62},{8,62},{8,10}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(CEBase_ReninConc.y, EndogenousRate.u2) annotation (Line(
              points={{-45,-2},{-40,-2},{-40,2},{-32,2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Renin, EndogenousRate.u1) annotation (Line(
              points={{-64,18},{-40,18},{-40,14},{-32,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(A2.u, EndogenousRate.y)
            annotation (Line(
              points={{0,8},{-9,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(A2.y, Angiotensine2)
            annotation (Line(
              points={{8,4},{8,-56},{28,-56}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(A2.y, busConnector.Angiotensin2) annotation (Line(
              points={{8,4},{8,-10},{28,-10},{28,88},{-78,88}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
        connect(A2.y, busConnector.AngiotensinII) annotation (Line(
            points={{8,4},{10,4},{10,-2},{72,-2},{72,88},{-78,88}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
          annotation ( Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={Text(
                  extent={{-128,102},{106,80}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end Angiotensine2;

        model PulmonaryCirculation

           extends Physiolibrary.Icons.PulmonaryCirculation;

           replaceable package Blood =
              Physiolibrary.Media.Blood                                            constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                      annotation ( choicesAllMatching = true);

          //Can not be one port, because for example whole periferal resistance is taken as ResistorBases, but blood can accumulate inside

        Physiolibrary.Fluid.Interfaces.FluidPort_a q_in(redeclare package Medium =
                Blood)                                  "Blood inflow"
          annotation ( Placement(transformation(extent={{-110,
                  -10},{-90,10}},  rotation=0),
                                          iconTransformation(extent={{-110,-10},{
                  -90,10}})));
        Physiolibrary.Fluid.Interfaces.FluidPort_b q_out(redeclare package Medium =
                Blood)                                   "Blood outflow"
          annotation ( Placement(transformation(extent={{94,-10},
                  {114,10}},       rotation=0),
                                        iconTransformation(extent={{90,-10},{110,
                  10}})));

        Physiolibrary.Fluid.Components.ElasticVessel pulmCapys(
            redeclare package Medium = Blood,
          stateName="PulmCapys.Vol",
          useComplianceInput=true,
          useExternalPressureInput=true,
          useV0Input=true,
            volume_start=0.000200141,
          nPorts=3)                 "pulmonary capilaries"
          annotation (Placement(transformation(extent={{-22,-10},{-2,10}})));

        Physiolibrary.Fluid.Components.ElasticVessel pulmArty(
            redeclare package Medium = Blood,
          stateName="PulmArty.Vol",
          useComplianceInput=true,
          useExternalPressureInput=true,
          useV0Input=true,
            volume_start=0.000200488,
          nPorts=2)
          annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));

        Physiolibrary.Fluid.Components.ElasticVessel pulmVeins(
            redeclare package Medium = Blood,
          stateName="PulmVeins.Vol",
          useComplianceInput=true,
          useExternalPressureInput=true,
          useV0Input=true,
            volume_start=0.000210463,
            nPorts=2)               "pulmonary veins"
          annotation (Placement(transformation(extent={{38,-10},{58,10}})));

        Physiolibrary.Fluid.Components.Conductor pulmArtyConductance(redeclare
              package Medium = Blood, Conductance=1.6876385456527e-07)
          annotation (Placement(transformation(extent={{-67,-11},{-45,11}})));
        Physiolibrary.Types.Constants.VolumeConst ArtysV0(k=0.00011)
          annotation (Placement(transformation(extent={{-94,16},{-86,24}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst ArtysCompliance(k=
              3.975326351982e-08)
          annotation (Placement(transformation(extent={{-54,16},{-62,24}})));
        Physiolibrary.Types.Constants.VolumeConst               CapysV0(k=0.00014)
          annotation (Placement(transformation(extent={{-28,16},{-20,24}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst CapysCompliance(k=
              3.450283248890036e-008)
          annotation (Placement(transformation(extent={{4,16},{-4,24}})));
        Physiolibrary.Fluid.Components.Conductor pulmCapysConductance(redeclare
              package Medium = Blood, Conductance=2.250184727537e-07)
          annotation (Placement(transformation(extent={{4,-11},{26,11}})));
        Physiolibrary.Types.Constants.VolumeConst               VeinsV0(k=0.00015)
          annotation (Placement(transformation(extent={{30,16},{38,24}})));
        Physiolibrary.Types.Constants.HydraulicComplianceConst VeinsCompliance(k=
              4.50036945507396e-008)
          annotation (Placement(transformation(extent={{66,14},{58,22}})));
        Physiolibrary.Fluid.Components.Conductor pulmVeinsConductance(redeclare
              package Medium = Blood, Conductance=6.7505541826109e-07)
          annotation (Placement(transformation(extent={{62,-11},{84,11}})));
        Physiolibrary.Types.BusConnector busConnector
          "signals of organ bood flow resistence" annotation (Placement(
              transformation(extent={{18,66},{38,86}}), iconTransformation(extent=
                 {{-108,42},{-92,58}})));
          Components.LungBloodFlow lungBloodFlow
            annotation (Placement(transformation(extent={{-26,74},{-6,94}})));
        Fluid.Sensors.VolumeFlowMeasure         volumeFlowMeasure(
                                                            redeclare package
              Medium = Blood)
          annotation (Placement(transformation(extent={{-42,-10},{-22,10}})));
          Modelica.Blocks.Math.Sum sum1(nin=3)
            annotation (Placement(transformation(extent={{-28,28},{-20,36}})));
          Modelica.Blocks.Math.Sum sum2(nin=2)
            annotation (Placement(transformation(extent={{50,-38},{42,-30}})));
        Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
              package Medium = Blood)
          annotation (Placement(transformation(extent={{-8,-26},{12,-6}})));
          Modelica.Blocks.Math.Gain PulmonaryCirculation_DeoxygenatedBloodVolume(k=1)
            annotation (Placement(transformation(extent={{-6,-68},{14,-48}})));
        equation
          connect(pulmArty.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
              points={{-69,9},{-69,14},{28,14},{28,76}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmCapys.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
              points={{-5,9},{-5,14},{28,14},{28,76}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pulmVeins.externalPressure,busConnector. Thorax_AvePressure) annotation (Line(
              points={{55,9},{55,14},{28,14},{28,76}},
              color={0,0,127},
              smooth=Smooth.None));
        connect(pulmArty.zeroPressureVolume, ArtysV0.y) annotation (Line(
            points={{-83,9},{-83,20},{-85,20}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(pulmArty.compliance, ArtysCompliance.y)
                                                  annotation (Line(
              points={{-76,9},{-76,20},{-63,20}},
              color={0,0,127},
              smooth=Smooth.None));
        connect(CapysV0.y, pulmCapys.zeroPressureVolume) annotation (Line(
            points={{-19,20},{-19,20},{-19,9}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(CapysCompliance.y,pulmCapys.compliance)
                                                   annotation (Line(
              points={{-5,20},{-12,20},{-12,9}},
              color={0,0,127},
              smooth=Smooth.None));
        connect(pulmVeins.zeroPressureVolume, VeinsV0.y) annotation (Line(
            points={{41,9},{41,20},{39,20}},
            color={0,0,127},
            smooth=Smooth.None));
          connect(VeinsCompliance.y,pulmVeins.compliance)
                                                   annotation (Line(
              points={{57,18},{48,18},{48,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(lungBloodFlow.AlveolarVentilated, busConnector.AlveolarVentilated_BloodFlow)
            annotation (Line(
              points={{-6,90},{28,90},{28,76}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));

          connect(pulmArtyConductance.q_out, volumeFlowMeasure.q_in) annotation (
              Line(
              points={{-45,0},{-42,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(ArtysV0.y, sum1.u[1]) annotation (Line(
              points={{-85,20},{-82,20},{-82,32},{-28,32},{-28,31.7333},{-28.8,
                  31.7333}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(CapysV0.y, sum1.u[2]) annotation (Line(
              points={{-19,20},{-18,20},{-18,26},{-80,26},{-80,32},{-28.8,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(VeinsV0.y, sum1.u[3]) annotation (Line(
              points={{39,20},{42,20},{42,26},{-78,26},{-78,32.2667},{-28.8,
                  32.2667}},
              color={0,0,127},
              smooth=Smooth.None));
          sum2.u[1]=pulmCapys.volume;
          sum2.u[2]=pulmVeins.volume;

          connect(sum1.y, busConnector.PulmonaryCirculation_V0) annotation (Line(
              points={{-19.6,32},{28,32},{28,76}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
              PulmonaryCirculation_DeoxygenatedBloodVolume.u = pulmArty.volume;

          connect(busConnector.PulmonaryCirculation_OxygenatedBloodVolume, sum2.y)
            annotation (Line(
              points={{28,76},{28,-34},{41.6,-34}},
              color={0,0,255},
              thickness=0.5,
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
        connect(pressureMeasure.pressure, busConnector.PulmCapys_Pressure)
          annotation (Line(
            points={{8,-20},{28,-20},{28,76}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(q_in, pulmArty.q_in[1]) annotation (Line(
            points={{-100,0},{-88,0},{-88,-0.65},{-76.1,-0.65}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmArtyConductance.q_in, pulmArty.q_in[2]) annotation (Line(
            points={{-67,0},{-68,0},{-68,0.65},{-76.1,0.65}},
            color={127,0,0},
            thickness=0.5));
          connect(volumeFlowMeasure.q_out, pulmCapys.q_in[1]) annotation (Line(
              points={{-22,0},{-18,0},{-18,-0.866667},{-12.1,-0.866667}},
              color={127,0,0},
              thickness=0.5));
        connect(pulmCapys.q_in[2], pulmCapysConductance.q_in) annotation (Line(
            points={{-12.1,-2.22045e-16},{-6,-2.22045e-16},{-6,0},{4,0}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmVeinsConductance.q_out, q_out) annotation (Line(
            points={{84,0},{104,0}},
            color={127,0,0},
            thickness=0.5));
          connect(pulmVeinsConductance.q_in, pulmVeins.q_in[1]) annotation (Line(
              points={{62,0},{54,0},{54,-0.65},{47.9,-0.65}},
              color={127,0,0},
              thickness=0.5));
          connect(PulmonaryCirculation_DeoxygenatedBloodVolume.y, busConnector.PulmonaryCirculation_DeoxygenatedBloodVolume)
            annotation (Line(points={{15,-58},{94,-58},{94,76},{28,76}}, color={0,0,127}));
        connect(pressureMeasure.port, pulmCapys.q_in[3]) annotation (Line(
            points={{2,-26},{-12,-26},{-12,0.866667},{-12.1,0.866667}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmCapysConductance.q_out, pulmVeins.q_in[2]) annotation (Line(
            points={{26,2.22045e-16},{38,2.22045e-16},{38,0.65},{47.9,0.65}},
            color={127,0,0},
            thickness=0.5));
          connect(q_in, q_in) annotation (Line(
              points={{-100,0},{-100,0}},
              color={127,0,0},
              thickness=0.5));
          connect(volumeFlowMeasure.volumeFlow, lungBloodFlow.CardiacOutput)
            annotation (Line(points={{-32,12},{-46,12},{-46,90},{-26,90}}, color=
                  {0,0,127}));
          annotation ( Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={
                Text(
                  extent={{-108,-48},{106,-70}},
                  lineColor={0,0,255},
                  textString="%name")}),
          Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>

<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>",   info="<html>
<p>Blood volume (and pressures) distribution between </p>
<p><ul>
<li>pulmonary arteries, </li>
<li>pulmonary veins and </li>
<li>pulmonary capilaries.</li>
</ul></p>
<p>Blood flow through ventilated alveoli.</p>
</html>"));
        end PulmonaryCirculation;
      end Components;

      package Examples
        model LungsTest

          replaceable package Air = Media.Air;
          //Chemical.Media.SimpleAir_C; //Kitware.Air_IdealGas; //Chemical.Media.SimpleAir_C; //Chemical.Media.Air_MixtureGasNasa;
          replaceable package PleuralFluid = Physiolibrary.Media.Water;
          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

          parameter Real ArterialBloodComposition[Blood.nS] = Blood.ArterialDefault
          "Initial composition of arterial blood" annotation (Dialog( group = "Perfusion"));

          parameter Real VenousBloodComposition[Blood.nS] = Blood.VenousDefault
          "Initial composition of venous blood" annotation (Dialog( group = "Perfusion"));

          parameter Types.Frequency RespirationRate(displayUnit="1/min")=0.2     "Respiration rate";
          parameter Types.Pressure Pmin(displayUnit="Pa")=-1000
                                         "Negative pressure gradient caused by respiratory muscles";
          parameter Types.Pressure Pmax(displayUnit="Pa")=0     "Positive presure gradient caused by respiratory muscles";
          parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {1, Pmax, 0}} "Absolute external lungs pressure during respiration cycle scaled to time period (0,1)";

          Fluid.Sources.PressureSource               environment(redeclare
              package Medium =
                       Air, y(m_flow(start=0.0050764996707716465)))                                "External environment" annotation (
            Placement(transformation(extent={{-94,70},{-74,90}})));
          Fluid.Sensors.FlowMeasure               flowMeasure(redeclare package
              Medium =
                Air)                                                                          annotation (
            Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={2,46})));
          Types.Constants.FrequencyConst               frequency(k=RespirationRate)   annotation (
            Placement(transformation(extent={{14,22},{22,30}})));
          Blocks.Source.PeriodicCurveSource               respiratoryMusclePressureCycle(data=
                RespiratoryMusclePressureCycle)                                                                                 "Relative position in respiratory cycle (0,1) to absolute external lungs pressure" annotation (
            Placement(transformation(extent={{34,16},{54,36}})));
          inner Modelica.Fluid.System system(T_ambient=310.15)            "Human body system setting" annotation (
            Placement(transformation(extent={{74,-32},{94,-12}})));
          Fluid.Sources.PressureSource
                                 pulmonaryVeinsOutput(redeclare package Medium = Blood)
                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={56,-82})));
          Lungs lungs(
            redeclare package Blood = Blood,
            redeclare package Air = Air,
            redeclare package PleuralFluid = PleuralFluid,
            NRU=1,
            ArterialBloodComposition=ArterialBloodComposition,
            VenousBloodComposition=VenousBloodComposition,
            nPorts=1)
            annotation (Placement(transformation(extent={{-8,-8},{12,12}})));
          Fluid.Sources.VolumeInflowSource pulmonaryAtrysInput(
            SolutionFlow(displayUnit="l/min") = 9.1666666666667e-05,
            redeclare package Medium = Blood,
            massFractions_start=VenousBloodComposition,
            pressure_start=system.p_ambient + 2199.8193923475)
            annotation (Placement(transformation(extent={{-78,-92},{-58,-72}})));
        equation
          connect(environment.y,flowMeasure. q_in) annotation (
            Line(points={{-74,80},{2,80},{2,56}},               color = {127, 0, 0}, thickness = 0.5));
          connect(frequency.y,respiratoryMusclePressureCycle. frequence) annotation (
            Line(points={{23,26},{34,26}},        color = {0, 0, 127}));
          connect(respiratoryMusclePressureCycle.val, lungs.respiratotyMusclePressure)
            annotation (Line(points={{54,26},{60,26},{60,6},{10,6}}, color={0,0,
                  127}));
          connect(pulmonaryVeinsOutput.y, lungs.blood_out) annotation (Line(
              points={{46,-82},{18,-82},{18,-2},{12,-2}},
              color={127,0,0},
              thickness=0.5));
          connect(pulmonaryAtrysInput.q_out, lungs.blood_in) annotation (Line(
              points={{-58,-82},{-14,-82},{-14,-2},{-8,-2}},
              color={127,0,0},
              thickness=0.5));
          connect(flowMeasure.q_out, lungs.airways[1]) annotation (Line(
              points={{2,36},{2,23.95},{2,23.95},{2,11.9}},
              color={127,0,0},
              thickness=0.5));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(revisions = "<html>
        <p><i>2014-2018</i></p>
        <p>Marek Matejak, marek@matfyz.cz </p>
        </html>"),
            experiment(StopTime=60));
        end LungsTest;

        model MeanLungsTest

          replaceable package Air = Media.Air;
          //Chemical.Media.SimpleAir_C; //Kitware.Air_IdealGas; //Chemical.Media.SimpleAir_C; //Chemical.Media.Air_MixtureGasNasa;
          replaceable package PleuralFluid = Physiolibrary.Media.Water;
          replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
            Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

          parameter Real ArterialBloodComposition[Blood.nS] = Blood.ArterialDefault "Initial composition of arterial blood";
          parameter Real VenousBloodComposition[Blood.nS] = Blood.VenousDefault "Initial composition of venous blood";

          parameter Types.Frequency RespirationRate(displayUnit="1/min")=0.2     "Respiration rate";
          parameter Types.Pressure Pmin(displayUnit="Pa")=-1000
                                         "Negative pressure gradient caused by respiratory muscles";
          parameter Types.Pressure Pmax(displayUnit="Pa")=0     "Positive presure gradient caused by respiratory muscles";
          parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {1, Pmax, 0}} "Absolute external lungs pressure during respiration cycle scaled to time period (0,1)";

          Fluid.Sources.PressureSource               environment(redeclare
              package Medium =
                       Air, y(m_flow(start=0.0050764996707716465)))                                "External environment" annotation (
            Placement(transformation(extent={{-94,70},{-74,90}})));
          inner Modelica.Fluid.System system(T_ambient=310.15)            "Human body system setting" annotation (
            Placement(transformation(extent={{74,-32},{94,-12}})));
          Fluid.Sources.PressureSource
                                 pulmonaryVeinsOutput(redeclare package Medium = Blood)
                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={56,-82})));
          Lungs lungs(
            redeclare package Blood = Blood,
            redeclare package Air = Air,
            redeclare package PleuralFluid = PleuralFluid,
            NRU=10,
            ArterialBloodComposition=ArterialBloodComposition,
            VenousBloodComposition=VenousBloodComposition,
            nPorts=2)
            annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
          Fluid.Sources.VolumeInflowSource pulmonaryAtrysInput(
            SolutionFlow(displayUnit="l/min") = 9.1666666666667e-05,
            redeclare package Medium = Blood,
            massFractions_start=VenousBloodComposition,
            pressure_start=system.p_ambient + 2199.8193923475)
            annotation (Placement(transformation(extent={{-78,-92},{-58,-72}})));
          Types.Constants.PressureConst pressure(k(displayUnit="Pa") = -300)
            annotation (Placement(transformation(extent={{34,12},{42,20}})));
          Fluid.Sources.VolumeOutflowSource volumeOutflowSource(SolutionFlow(
                displayUnit="l/min") = 0.000109, redeclare package Medium = Air)
            annotation (Placement(transformation(extent={{46,70},{66,90}})));
        equation
          connect(pulmonaryVeinsOutput.y, lungs.blood_out) annotation (Line(
              points={{46,-82},{18,-82},{18,-4},{12,-4}},
              color={127,0,0},
              thickness=0.5));
          connect(pulmonaryAtrysInput.q_out, lungs.blood_in) annotation (Line(
              points={{-58,-82},{-14,-82},{-14,-4},{-8,-4}},
              color={127,0,0},
              thickness=0.5));
          connect(pressure.y, lungs.respiratotyMusclePressure) annotation (Line(
                points={{43,16},{48,16},{48,4},{10,4}}, color={0,0,127}));
          connect(volumeOutflowSource.q_in, lungs.airways[1]) annotation (Line(
              points={{46,80},{2,80},{2,9.475}},
              color={127,0,0},
              thickness=0.5));
          connect(environment.y, lungs.airways[2]) annotation (Line(
              points={{-74,80},{2,80},{2,10.325}},
              color={127,0,0},
              thickness=0.5));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=60, __Dymola_Algorithm="Dassl"));
        end MeanLungsTest;
      end Examples;

    end Lungs;

    package Liver
      model Liver
        extends Physiolibrary.Organs.Interfaces.BaseTissue;
        extends Physiolibrary.Icons.Liver;

      Physiolibrary.Fluid.Interfaces.FluidPort_a portalVein(redeclare package
            Medium = Blood)                                 annotation (
          Placement(transformation(extent={{-10,-110},
                {10,-90}}, rotation=0),
                          iconTransformation(extent={{12,-58},{32,-38}})));
      Physiolibrary.Fluid.Components.Conductor liverPortalConductance(redeclare
            package Medium = Blood, Conductance=2.2251826750088e-08)
        "corrected to flow 1250ml/min in pressure gradient 1 mmHg"
        annotation (Placement(transformation(extent={{-52,-8},{-68,8}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure1(redeclare
            package Medium = Blood)                              annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-84,0})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure2(redeclare
            package Medium = Blood)                              annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-24,-16})));
      Physiolibrary.Fluid.Components.Conductor HepaticArtyConductance(redeclare
            package Medium = Blood, Conductance=3.5002873539464e-10)
        annotation (Placement(transformation(extent={{0,36},{-20,56}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure3(redeclare
            package Medium = Blood)                              annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={12,46})));
      equation
        connect(flowMeasure1.volumeFlow, busConnector.Liver_BloodFlow)
          annotation (Line(
            points={{-84,12},{-84,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(flowMeasure2.volumeFlow, busConnector.PortalVein_BloodFlow)
          annotation (Line(
            points={{-24,-4},{-24,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(flowMeasure3.volumeFlow, busConnector.HepaticArty_BloodFlow)
          annotation (Line(
            points={{12,58},{12,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(portalVein, flowMeasure2.q_in) annotation (Line(
            points={{0,-100},{0,-16},{-14,-16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(flowMeasure.q_out, flowMeasure3.q_in) annotation (Line(
            points={{78,0},{32,0},{32,46},{22,46}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(flowMeasure3.q_out, HepaticArtyConductance.q_in) annotation (
            Line(
            points={{2,46},{0,46}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(liverPortalConductance.q_out, flowMeasure1.q_in) annotation (Line(
          points={{-68,0},{-67,0},{-67,-7.34788e-016},{-74,-7.34788e-016}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(flowMeasure1.q_out, port_b) annotation (Line(
            points={{-94,7.34788e-16},{-94,0},{-100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(flowMeasure2.q_out, liverPortalConductance.q_in) annotation (Line(
          points={{-34,-16},{-50,-16},{-50,0},{-52,0}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(liverPortalConductance.q_in, HepaticArtyConductance.q_out)
        annotation (Line(
          points={{-52,2.22045e-016},{-50,2.22045e-016},{-50,46},{-20,46}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      end Liver;
    end Liver;

    package Kidney
      model Kidney
        extends Physiolibrary.Organs.Interfaces.BaseTissue;
        extends Physiolibrary.Icons.Kidney;

      Physiolibrary.Blocks.Factors.Normalization
        NephronCountEffect_AfferentArtery
        annotation (Placement(transformation(extent={{20,34},{40,54}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst
        Afferent_BasicConductance(k=4.2503489297921e-09)
        annotation (Placement(transformation(extent={{16,48},{28,60}})));
        Components.VariableResistorWithMyogenicResponse AfferentArtery(
          redeclare package Medium = Blood,
          PressureChangeOnMyogenicCondEffect={{-20.0,1.2,0.0},{0.0,1.0,-0.02},{
              20.0,0.8,0.0}},
          pressureChange(start=0),
          InitialPressureChange(displayUnit="mmHg") = 9.33256711905,
          K_PressureChange(displayUnit="Hz"))
          annotation (Placement(transformation(extent={{44,-12},{20,12}})));
      Physiolibrary.Blocks.Factors.Spline A2Effect2(
        data={{0.0,1.2,0.0},{1.3,1.0,-0.4},{3.0,0.6,0.0}},
        Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{-56,18},{-36,38}})));
       // Xscale=1e-9/1.046,
      Physiolibrary.Types.Constants.HydraulicConductanceConst
        Efferent_BasicConductance(k=3.1377575922877e-9)
        annotation (Placement(transformation(extent={{-60,48},{-48,60}})));
      Physiolibrary.Blocks.Factors.Normalization
        NephronCountEffect_KidneyEfferentArtery
        annotation (Placement(transformation(extent={{-56,34},{-36,54}})));
      Physiolibrary.Fluid.Components.Conductor EfferentArtery(redeclare package
            Medium = Blood,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{-34,-12},{-58,12}})));
      Physiolibrary.Fluid.Components.Conductor ArcuateArtery(redeclare package
            Medium = Blood, Conductance=7.5006157584566e-08)
        annotation (Placement(transformation(extent={{74,-8},{58,8}})));
        Components.AlphaReceptors AplhaReceptors_KidneyAfferentArtery(redeclare
            package Blood = Blood, data={{1.5,1.0,0.0},{7.0,0.9,0.0}})
          annotation (Placement(transformation(extent={{20,14},{40,34}})));
        Components.AlphaReceptors AplhaReceptors_KidneyEfferentArtery(redeclare
            package Blood = Blood, data={{1.5,1.0,0.0},{7.0,0.9,0.0}})
          annotation (Placement(transformation(extent={{-56,6},{-36,26}})));
      Physiolibrary.Blocks.Factors.Normalization
        Anesthesia_KidneyEfferentArtery
        annotation (Placement(transformation(extent={{-56,26},{-36,46}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={-22,12})));
        Modelica.Blocks.Math.Product KidneyPlasmaFlow annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=90,
              origin={83,67})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure1(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            origin={52,-10})));
        Modelica.Blocks.Math.Gain IFP(k=0.042)
          annotation (Placement(transformation(extent={{-36,-26},{-44,-18}})));
        Physiolibrary.Blocks.Factors.LagSpline     TGFEffect(
                                                   data={{0.0,1.2,0.0},{1.3,1.0,
              -0.4},{3.0,0.6,0.0}},
          initialValue=1.01309,
          HalfTime=60*Modelica.Math.log(2),integrator(stateName="TGF-Vascular.Signal"))
        "Macula Densa TGF vascular signal delay and effect to afferent arteriole"
          annotation (Placement(transformation(extent={{40,26},{20,46}})));
        //
      Physiolibrary.Blocks.Factors.Spline FurosemideEffect(data={{0.0,1.0,0.0},
            {1.3,0.2,0.0}}, Xscale=1e-3/0.33075)
        "furosemide outflow on Macula Densa Na sensibility"
        annotation (Placement(transformation(extent={{42,60},{62,80}})));
      Physiolibrary.Blocks.Factors.Spline NaEffect_MaculaDensa(data={{0,0.0,0.0},
            {48,1.0,0.03},{100,3.0,0.0}})
        annotation (Placement(transformation(extent={{42,64},{62,84}})));
      Physiolibrary.Blocks.Factors.Spline ANP_Effect(data={{0.0,1.2,0.0},{1.3,
            1.0,-0.3},{2.7,0.8,0.0}},
        UsePositiveLog10=true,
        Xscale=1e-9)
        annotation (Placement(transformation(extent={{42,56},{62,76}})));
      Physiolibrary.Blocks.Factors.Spline A2Effect3(
        data={{0.0,0.0,0.0},{0.2,0.6,0.05},{1.3,1.0,0.1},{3.0,8.0,0.0}},
         Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{42,52},{62,72}})));
        //Xscale=1e-9/1.046,
      Physiolibrary.Types.Constants.FractionConst
        MedulaDensa_BaseTGFSignal(k=1)
        annotation (Placement(transformation(extent={{42,78},{50,86}})));
      Physiolibrary.Fluid.Components.Conductor resistorWithCond(redeclare
            package
            Medium = Blood,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{-18,-90},{2,-70}})));
      Physiolibrary.Blocks.Factors.Spline OsmOnConductance(data={{600,1.4,0},{
            1100,1.0,-0.0006},{2000,0.8,0}})
        annotation (Placement(transformation(extent={{-18,-60},{2,-40}})));
      Physiolibrary.Blocks.Factors.Spline A2OnConductance(
        data={{0.0,1.3,0},{1.3,1.0,-0.6},{2.0,0.5,0}},
        Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{-18,-72},{2,-52}})));
      Physiolibrary.Blocks.Factors.Spline SympsOnConductance(data={{0.0,1.1,0},
            {1.0,1.0,-0.13},{1.4,0.6,0}})
        annotation (Placement(transformation(extent={{-18,-80},{2,-60}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst condConstant(k(
            displayUnit="ml/(mmHg.min)") = 2.5002052528189e-8)
        annotation (Placement(transformation(extent={{-24,-36},{-12,-24}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure1(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(extent={{54,-70},{74,-90}})));
        Modelica.Blocks.Math.Add Osm
          annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Physiolibrary.Blocks.Factors.LagSpline
                                          NephroneADHOnConductance(
        data={{0.0,1.4,0},{0.3,1.0,-0.4},{1.0,0.9,0}},
        Xscale=1e-9/1.084,
        HalfTime=Modelica.Math.log(2)*20*60,
        initialValue=2e-9/1.084)
        "initial 2pg/ml = 2e-9 kg/m3, NephronADH.Tau = 20 min"
        annotation (Placement(transformation(extent={{-18,-52},{2,-32}})));
      equation
        connect(Afferent_BasicConductance.y, NephronCountEffect_AfferentArtery.yBase)
                                                                   annotation (Line(
            points={{29.5,54},{30,54},{30,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Kidney_NephronCount_Total_xNormal,
          NephronCountEffect_AfferentArtery.u) annotation (Line(
            points={{-90,90},{-14,90},{-14,66},{-14,44},{22,44}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Kidney_NephronCount_Total_xNormal,
          NephronCountEffect_KidneyEfferentArtery.u) annotation (Line(
            points={{-90,90},{-92,90},{-92,44},{-54,44}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Anesthesia_VascularConductance,
          Anesthesia_KidneyEfferentArtery.u) annotation (Line(
            points={{-90,90},{-92,90},{-92,36},{-54,36}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(Efferent_BasicConductance.y,
          NephronCountEffect_KidneyEfferentArtery.yBase) annotation (Line(
            points={{-46.5,54},{-46,54},{-46,46}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(A2Effect2.y, AplhaReceptors_KidneyEfferentArtery.yBase)
          annotation (Line(
            points={{-46,24},{-46,23}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NephronCountEffect_KidneyEfferentArtery.y,
          Anesthesia_KidneyEfferentArtery.yBase) annotation (Line(
            points={{-46,40},{-46,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Anesthesia_KidneyEfferentArtery.y, A2Effect2.yBase) annotation (
           Line(
            points={{-46,32},{-46,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors_KidneyEfferentArtery.y, EfferentArtery.cond)
          annotation (Line(
            points={{-46,9},{-46,7.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors_KidneyAfferentArtery.y, AfferentArtery.cond)
          annotation (Line(
            points={{30,17},{30,4.8},{32,4.8}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.GlomerulusBloodPressure)
        annotation (Line(
          points={{-16,8},{-16,-12},{-90,-12},{-90,90}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-3},{6,-3}}));
        connect(busConnector.BloodVol_PVCrit, KidneyPlasmaFlow.u2)
          annotation (Line(
            points={{-90,90},{96,90},{96,56},{86,56},{86,61}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{6,-3},{6,-3}}));
        connect(KidneyPlasmaFlow.y, busConnector.KidneyPlasmaFlow)
          annotation (Line(
            points={{83,72.5},{83,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{3,3},{3,3}}));
        connect(ArcuateArtery.q_out, AfferentArtery.q_in) annotation (Line(
            points={{58,2.22045e-16},{42,2.22045e-16},{42,0},{44,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(AfferentArtery.q_in,pressureMeasure1.port)  annotation (Line(
            points={{44,0},{58,0},{58,-20},{52,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(IFP.u, pressureMeasure1.pressure) annotation (Line(
          points={{-35.2,-22},{6,-22},{6,-14},{46,-14}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(ANP_Effect.y,A2Effect3. yBase) annotation (Line(
            points={{52,62},{52,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FurosemideEffect.y,ANP_Effect. yBase) annotation (Line(
            points={{52,66},{52,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NaEffect_MaculaDensa.y,FurosemideEffect. yBase) annotation (
            Line(
            points={{52,70},{52,72}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(MedulaDensa_BaseTGFSignal.y,NaEffect_MaculaDensa. yBase)
          annotation (Line(
            points={{51,82},{52,82},{52,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A2Effect3.y,TGFEffect. u) annotation (Line(
            points={{52,58},{52,36},{38,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NephronCountEffect_AfferentArtery.y, TGFEffect.yBase) annotation (
            Line(
            points={{30,40},{30,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TGFEffect.y, AplhaReceptors_KidneyAfferentArtery.yBase) annotation (
            Line(
            points={{30,32},{30,31}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.FurosemidePool_Loss, FurosemideEffect.u)
          annotation (Line(
            points={{-90,90},{-90,70},{44,70}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(flowMeasure.volumeFlow, KidneyPlasmaFlow.u1) annotation (Line(
            points={{88,12},{88,50},{80,50},{80,61}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(flowMeasure.q_out,ArcuateArtery. q_in) annotation (Line(
            points={{78,0},{78,2.22045e-16},{74,2.22045e-16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(busConnector.NephronIFP_Pressure, IFP.y) annotation (
            Line(
            points={{-90,90},{-90,-22},{-44.4,-22}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(busConnector.Angiotensin2, A2Effect2.u) annotation (Line(
          points={{-90,90},{-92,90},{-92,28},{-54,28}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Angiotensin2, A2Effect3.u) annotation (Line(
          points={{-90,90},{-90,62},{44,62}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ANP, ANP_Effect.u) annotation (Line(
          points={{-90,90},{-90,66},{44,66}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
        connect(SympsOnConductance.y,resistorWithCond. cond) annotation (Line(
            points={{-8,-74},{-8,-74}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A2OnConductance.y,SympsOnConductance. yBase) annotation (Line(
            points={{-8,-66},{-8,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(OsmOnConductance.y,A2OnConductance. yBase) annotation (Line(
            points={{-8,-54},{-8,-62},{-10,-62},{-10,-60},{-8,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Kidney_Alpha_NA,SympsOnConductance. u) annotation (Line(
            points={{-90,90},{-80,90},{-80,-70},{-16,-70}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(resistorWithCond.q_out, flowMeasure1.q_in) annotation (Line(
          points={{2,-80},{54,-80}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(flowMeasure1.volumeFlow, busConnector.VasaRecta_Outflow)
        annotation (Line(
          points={{64,-92},{-94,-92},{-94,90},{-90,90}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-12},{6,-12}}));
        connect(Osm.y,OsmOnConductance. u) annotation (Line(
            points={{-25.6,-50},{-16,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.MedullaNa_Osmolarity,Osm. u1) annotation (Line(
            points={{-90,90},{-62,90},{-62,-47.6},{-34.8,-47.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.MedullaUrea_Osmolarity,Osm. u2) annotation (Line(
            points={{-90,90},{-62,90},{-62,-52.4},{-34.8,-52.4}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(NephroneADHOnConductance.y,OsmOnConductance. yBase) annotation (
           Line(
            points={{-8,-46},{-6,-46},{-6,-48},{-8,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condConstant.y,NephroneADHOnConductance. yBase) annotation (
            Line(
            points={{-10.5,-30},{-8,-30},{-8,-40}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.Angiotensin2,A2OnConductance. u) annotation (Line(
          points={{-90,90},{-80,90},{-80,-62},{-16,-62}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Vasopressin,NephroneADHOnConductance. u) annotation (
         Line(
          points={{-90,90},{-80,90},{-80,-42},{-16,-42}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(EfferentArtery.q_out, resistorWithCond.q_in) annotation (Line(
          points={{-58,0},{-92,0},{-92,-80},{-18,-80}},
          color={0,0,0},
          thickness=1));
        connect(flowMeasure1.q_out, port_b) annotation (Line(
            points={{74,-80},{84,-80},{84,-98},{-92,-98},{-92,0},{-100,0}},
            color={0,0,0},
            thickness=1));
      connect(EfferentArtery.q_in,pressureMeasure.port)  annotation (Line(
          points={{-34,0},{-30,0},{-30,2},{-22,2}},
          color={0,0,0},
          thickness=1));
      connect(busConnector.MD_Na, NaEffect_MaculaDensa.u) annotation (Line(
          points={{-90,90},{-24,90},{-24,74},{44,74}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(AfferentArtery.q_out, EfferentArtery.q_in) annotation (Line(
          points={{20,0},{-34,0}},
          color={0,0,0},
          thickness=1));
        connect(AplhaReceptors_KidneyEfferentArtery.GangliaGeneral, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{-55.8,10},{-90,10},{-90,90}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(AplhaReceptors_KidneyAfferentArtery.GangliaGeneral, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{20.2,18},{-6,18},{-6,90},{-90,90}}, color={0,
                0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(AplhaReceptors_KidneyAfferentArtery.port_a, port_a) annotation (
            Line(
            points={{20,22},{26,22},{26,14},{110,14},{110,0}},
            color={127,0,0},
            thickness=0.5));
        connect(AplhaReceptors_KidneyEfferentArtery.port_a, port_a) annotation (
            Line(
            points={{-56,14},{110,14},{110,0}},
            color={127,0,0},
            thickness=0.5));
        annotation (
          Documentation(info="<HTML>
<PRE>
Blood resistance in kidneys.

QHP 2008 / Kidney-Flow

</PRE>
</HTML>
",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                {100,100}}),   graphics={Rectangle(extent={{34,88},{70,50}},
                  lineColor={127,0,0}), Text(
                extent={{34,50},{70,56}},
                lineColor={0,0,255},
                textString="Macula Densa")}),         Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-100,-100},{100,-80}},
                lineColor={0,0,255},
                textString="%name")}));
      end Kidney;

      model EPO
        extends Physiolibrary.Icons.Kidney;
      // outer parameter Real ECF_Vol(final displayUnit="ml");

        //NominalSolute=Substances.Erythropoietin.molpIU

      Physiolibrary.Blocks.Factors.Normalization CountEffect
        annotation (Placement(transformation(extent={{56,24},{76,44}})));
      Physiolibrary.Types.Constants.FractionConst             hormoneFlowConstant(k=1)
               annotation (Placement(transformation(extent={{-4,32},{-12,40}})));
      Physiolibrary.Blocks.Factors.Spline PO2Effect(data={{0.0,4.0,0},{35.0,0.0,-0.14},
            {60.0,-1.0,0}}, Xscale=101325/760)
        "cortex pO2=50 mmHg; medulla pO2 = 10-20 mmHg [Brezis&Rosen1995]; erythropoietin-producing cells are in the interstitium of the cortex and outer medulla [Maxwell1993]"
        annotation (Placement(transformation(extent={{-24,14},{-4,34}})));    //(toAnotherUnitCoef=1000, unitsString="U/l")
        Modelica.Blocks.Math.Gain K(k(unit="1/s")=0.00555/60)
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              origin={-31,-77})));
      Modelica.Blocks.Sources.Constant hormoneFlowConstant1(k=(0.67)/
              60) annotation (Placement(transformation(extent={{82,42},{70,54}})));
        Modelica.Blocks.Math.Gain VODIST(k=0.4)
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},
              origin={-64,-40})));
      Physiolibrary.Blocks.Math.Power avg1
        annotation (Placement(transformation(extent={{-8,10},{0,18}})));
      Physiolibrary.Blocks.Factors.Normalization FunctionEffect
        annotation (Placement(transformation(extent={{56,14},{76,34}})));
      Physiolibrary.Blocks.Factors.Normalization PO2Effect_
        annotation (Placement(transformation(extent={{56,4},{76,24}})));
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-88,78},{-68,98}}), iconTransformation(extent=
               {{-90,-70},{-70,-50}})));
       Modelica.Blocks.Interfaces.RealOutput Erythropoetin
          annotation (Placement(transformation(extent={{-2,-38},{18,-18}}),
              iconTransformation(extent={{80,-20},{120,20}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{24,-78},{44,-58}})));
        Modelica.Blocks.Continuous.Integrator integrator
          annotation (Placement(transformation(extent={{64,-90},{84,-70}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));
      equation
        connect(busConnector.KidneyO2_TubulePO2, PO2Effect.u)
                                              annotation (Line(
            points={{-78,88},{-64.9,88},{-64.9,24},{-22,24}},
            color={0,0,127},
            smooth=Smooth.None), Text(
       string="%first",
       index=-1,
       extent={{-6,3},{-6,3}}));
        connect(busConnector.Kidney_NephronCount_Total_xNormal, CountEffect.u)
                                             annotation (Line(
            points={{-78,88},{5.1,88},{5.1,34},{58,34}},
            color={0,0,127},
            smooth=Smooth.None), Text(
       string="%first",
       index=-1,
       extent={{-6,3},{-6,3}}));
        connect(hormoneFlowConstant1.y, CountEffect.yBase)
                                                         annotation (Line(
            points={{69.4,48},{66,48},{66,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(hormoneFlowConstant.y,PO2Effect. yBase) annotation (Line(
            points={{-13,36},{-14,36},{-14,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.ECFV_Vol, VODIST.u) annotation (Line(
            points={{-78,88},{-90.6,88},{-90.6,-40},{-71.2,-40}},
            color={0,0,127},
            smooth=Smooth.None), Text(
       string="%first",
       index=-1,
       extent={{-6,3},{-6,3}}));

        connect(CountEffect.y, FunctionEffect.yBase) annotation (Line(
            points={{66,30},{66,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FunctionEffect.y, PO2Effect_.yBase) annotation (Line(
            points={{66,20},{66,16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(avg1.y, PO2Effect_.u) annotation (Line(
            points={{0.4,14},{58,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FunctionEffect.u, busConnector. KidneyFunctionEffect) annotation (Line(
            points={{58,24},{5.1,24},{5.1,88},{-78,88}},
            color={0,0,127},
            smooth=Smooth.None), Text(
       string="%second",
       index=1,
       extent={{6,3},{6,3}}));

        connect(PO2Effect.y, avg1.exponent)
          annotation (Line(
            points={{-14,20},{-14,11.6},{-8,11.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PO2Effect_.y, feedback.u1) annotation (Line(points={{66,10},{66,
                -30},{80,-30},{80,-60},{48,-60},{48,-54},{20,-54},{20,-68},{26,
                -68}}, color={0,0,127}));
        connect(K.y, feedback.u2) annotation (Line(points={{-27.7,-77},{-26,-77},
                {-26,-72},{18,-72},{18,-82},{34,-82},{34,-76}}, color={0,0,127}));
        connect(feedback.y, integrator.u) annotation (Line(points={{43,-68},{54,
                -68},{54,-80},{62,-80}}, color={0,0,127}));
        connect(integrator.y, K.u) annotation (Line(points={{85,-80},{92,-80},{92,
                -98},{-48,-98},{-48,-77},{-34.6,-77}}, color={0,0,127}));
        connect(VODIST.y, division.u2) annotation (Line(points={{-57.4,-40},{-52,
                -40},{-52,-56},{-12,-56}}, color={0,0,127}));
        connect(division.u1, K.u) annotation (Line(points={{-12,-44},{-24,-44},{
                -24,-70},{-34.6,-70},{-34.6,-77}}, color={0,0,127}));
        connect(division.y, Erythropoetin)
          annotation (Line(points={{11,-50},{8,-50},{8,-28}}, color={0,0,127}));
        connect(division.y, busConnector.Erythropoietin) annotation (Line(points=
                {{11,-50},{24,-50},{24,4},{-36,4},{-36,88},{-78,88}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-116,104},{118,82}},
                lineColor={0,0,255},
                textString="%name")}));
      end EPO;

      model Kidney2
        extends Physiolibrary.Organs.Interfaces.BaseTissue;
        extends Physiolibrary.Icons.Kidney;

      Physiolibrary.Blocks.Factors.Normalization
        NephronCountEffect_AfferentArtery
        annotation (Placement(transformation(extent={{20,34},{40,54}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst
        Afferent_BasicConductance(k=4.2503489297921e-09)
        annotation (Placement(transformation(extent={{16,48},{28,60}})));
        Components.VariableResistorWithMyogenicResponse AfferentArtery(
          redeclare package Medium = Blood,
          PressureChangeOnMyogenicCondEffect={{-20.0,1.2,0.0},{0.0,1.0,-0.02},{
              20.0,0.8,0.0}},
          pressureChange(start=0),
          InitialPressureChange(displayUnit="mmHg") = 9.33256711905,
          K_PressureChange(displayUnit="Hz"))
          annotation (Placement(transformation(extent={{44,-12},{20,12}})));
      Physiolibrary.Blocks.Factors.Spline A2Effect2(
        data={{0.0,1.2,0.0},{1.3,1.0,-0.4},{3.0,0.6,0.0}},
        Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{-56,18},{-36,38}})));
       // Xscale=1e-9/1.046,
      Physiolibrary.Types.Constants.HydraulicConductanceConst
        Efferent_BasicConductance(k=3.1377575922877e-9)
        annotation (Placement(transformation(extent={{-60,48},{-48,60}})));
      Physiolibrary.Blocks.Factors.Normalization
        NephronCountEffect_KidneyEfferentArtery
        annotation (Placement(transformation(extent={{-56,34},{-36,54}})));
      Physiolibrary.Fluid.Components.Conductor EfferentArtery(redeclare package
            Medium = Blood,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{-34,-12},{-58,12}})));
      Physiolibrary.Fluid.Components.Conductor ArcuateArtery(redeclare package
            Medium = Blood, Conductance=7.5006157584566e-08)
        annotation (Placement(transformation(extent={{74,-8},{58,8}})));
        Components.AlphaReceptors AplhaReceptors_KidneyAfferentArtery(redeclare
            package Blood = Blood, data={{1.5,1.0,0.0},{7.0,0.9,0.0}})
          annotation (Placement(transformation(extent={{20,14},{40,34}})));
        Components.AlphaReceptors AplhaReceptors_KidneyEfferentArtery(redeclare
            package Blood = Blood, data={{1.5,1.0,0.0},{7.0,0.9,0.0}})
          annotation (Placement(transformation(extent={{-56,6},{-36,26}})));
      Physiolibrary.Blocks.Factors.Normalization
        Anesthesia_KidneyEfferentArtery
        annotation (Placement(transformation(extent={{-56,26},{-36,46}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={-22,12})));
        Modelica.Blocks.Math.Product KidneyPlasmaFlow annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=90,
              origin={83,67})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure1(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            origin={52,-10})));
        Modelica.Blocks.Math.Gain IFP(k=0.042)
          annotation (Placement(transformation(extent={{-36,-26},{-44,-18}})));
        Physiolibrary.Blocks.Factors.LagSpline     TGFEffect(
                                                   data={{0.0,1.2,0.0},{1.3,1.0,
              -0.4},{3.0,0.6,0.0}},
          initialValue=1.01309,
          HalfTime=60*Modelica.Math.log(2),integrator(stateName="TGF-Vascular.Signal"))
        "Macula Densa TGF vascular signal delay and effect to afferent arteriole"
          annotation (Placement(transformation(extent={{40,26},{20,46}})));
        //
      Physiolibrary.Blocks.Factors.Spline FurosemideEffect(data={{0.0,1.0,0.0},
            {1.3,0.2,0.0}}, Xscale=1e-3/0.33075)
        "furosemide outflow on Macula Densa Na sensibility"
        annotation (Placement(transformation(extent={{42,60},{62,80}})));
      Physiolibrary.Blocks.Factors.Spline NaEffect_MaculaDensa(data={{0,0.0,0.0},
            {48,1.0,0.03},{100,3.0,0.0}})
        annotation (Placement(transformation(extent={{42,64},{62,84}})));
      Physiolibrary.Blocks.Factors.Spline ANP_Effect(data={{0.0,1.2,0.0},{1.3,
            1.0,-0.3},{2.7,0.8,0.0}},
        UsePositiveLog10=true,
        Xscale=1e-9)
        annotation (Placement(transformation(extent={{42,56},{62,76}})));
      Physiolibrary.Blocks.Factors.Spline A2Effect3(
        data={{0.0,0.0,0.0},{0.2,0.6,0.05},{1.3,1.0,0.1},{3.0,8.0,0.0}},
         Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{42,52},{62,72}})));
        //Xscale=1e-9/1.046,
      Physiolibrary.Types.Constants.FractionConst
        MedulaDensa_BaseTGFSignal(k=1)
        annotation (Placement(transformation(extent={{42,78},{50,86}})));
      Physiolibrary.Fluid.Components.Conductor resistorWithCond(redeclare
            package
            Medium = Blood,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{-18,-90},{2,-70}})));
      Physiolibrary.Blocks.Factors.Spline OsmOnConductance(data={{600,1.4,0},{
            1100,1.0,-0.0006},{2000,0.8,0}})
        annotation (Placement(transformation(extent={{-18,-60},{2,-40}})));
      Physiolibrary.Blocks.Factors.Spline A2OnConductance(
        data={{0.0,1.3,0},{1.3,1.0,-0.6},{2.0,0.5,0}},
        Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{-18,-72},{2,-52}})));
      Physiolibrary.Blocks.Factors.Spline SympsOnConductance(data={{0.0,1.1,0},
            {1.0,1.0,-0.13},{1.4,0.6,0}})
        annotation (Placement(transformation(extent={{-18,-80},{2,-60}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst condConstant(k(
            displayUnit="ml/(mmHg.min)") = 2.5002052528189e-8)
        annotation (Placement(transformation(extent={{-24,-36},{-12,-24}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure1(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(extent={{54,-70},{74,-90}})));
      Physiolibrary.Fluid.Sources.VolumeInflowSource
                                                inputPump(
          useSolutionFlowInput=true, redeclare package Medium = Blood)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={24,-98})));
        Modelica.Blocks.Math.Add Osm
          annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Physiolibrary.Blocks.Factors.LagSpline
                                          NephroneADHOnConductance(
        data={{0.0,1.4,0},{0.3,1.0,-0.4},{1.0,0.9,0}},
        Xscale=1e-9/1.084,
        HalfTime=Modelica.Math.log(2)*20*60,
        initialValue=2e-9/1.084)
        "initial 2pg/ml = 2e-9 kg/m3, NephronADH.Tau = 20 min"
        annotation (Placement(transformation(extent={{-18,-52},{2,-32}})));
      Physiolibrary.Fluid.Sources.VolumeOutflowSource  unlimitedOutflowPump(
          useSolutionFlowInput=true, redeclare package Medium = Blood)
        annotation (Placement(transformation(extent={{22,-46},{42,-26}})));
      equation
        connect(Afferent_BasicConductance.y, NephronCountEffect_AfferentArtery.yBase)
                                                                   annotation (Line(
            points={{29.5,54},{30,54},{30,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Kidney_NephronCount_Total_xNormal,
          NephronCountEffect_AfferentArtery.u) annotation (Line(
            points={{-90,90},{-14,90},{-14,66},{-14,44},{22,44}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Kidney_NephronCount_Total_xNormal,
          NephronCountEffect_KidneyEfferentArtery.u) annotation (Line(
            points={{-90,90},{-92,90},{-92,44},{-54,44}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Anesthesia_VascularConductance,
          Anesthesia_KidneyEfferentArtery.u) annotation (Line(
            points={{-90,90},{-92,90},{-92,36},{-54,36}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(Efferent_BasicConductance.y,
          NephronCountEffect_KidneyEfferentArtery.yBase) annotation (Line(
            points={{-46.5,54},{-46,54},{-46,46}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(A2Effect2.y, AplhaReceptors_KidneyEfferentArtery.yBase)
          annotation (Line(
            points={{-46,24},{-46,23}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NephronCountEffect_KidneyEfferentArtery.y,
          Anesthesia_KidneyEfferentArtery.yBase) annotation (Line(
            points={{-46,40},{-46,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Anesthesia_KidneyEfferentArtery.y, A2Effect2.yBase) annotation (
           Line(
            points={{-46,32},{-46,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors_KidneyEfferentArtery.y, EfferentArtery.cond)
          annotation (Line(
            points={{-46,9},{-46,7.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors_KidneyAfferentArtery.y, AfferentArtery.cond)
          annotation (Line(
            points={{30,17},{30,4.8},{32,4.8}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.GlomerulusBloodPressure)
        annotation (Line(
          points={{-16,8},{-16,-12},{-90,-12},{-90,90}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-3},{6,-3}}));
        connect(busConnector.BloodVol_PVCrit, KidneyPlasmaFlow.u2)
          annotation (Line(
            points={{-90,90},{96,90},{96,56},{86,56},{86,61}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{6,-3},{6,-3}}));
        connect(KidneyPlasmaFlow.y, busConnector.KidneyPlasmaFlow)
          annotation (Line(
            points={{83,72.5},{83,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{3,3},{3,3}}));
        connect(ArcuateArtery.q_out, AfferentArtery.q_in) annotation (Line(
            points={{58,2.22045e-16},{42,2.22045e-16},{42,0},{44,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(AfferentArtery.q_in,pressureMeasure1.port)  annotation (Line(
            points={{44,0},{58,0},{58,-20},{52,-20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(IFP.u, pressureMeasure1.pressure) annotation (Line(
          points={{-35.2,-22},{6,-22},{6,-14},{46,-14}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(ANP_Effect.y,A2Effect3. yBase) annotation (Line(
            points={{52,62},{52,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FurosemideEffect.y,ANP_Effect. yBase) annotation (Line(
            points={{52,66},{52,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NaEffect_MaculaDensa.y,FurosemideEffect. yBase) annotation (
            Line(
            points={{52,70},{52,72}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(MedulaDensa_BaseTGFSignal.y,NaEffect_MaculaDensa. yBase)
          annotation (Line(
            points={{51,82},{52,82},{52,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A2Effect3.y,TGFEffect. u) annotation (Line(
            points={{52,58},{52,36},{38,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(NephronCountEffect_AfferentArtery.y, TGFEffect.yBase) annotation (
            Line(
            points={{30,40},{30,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TGFEffect.y, AplhaReceptors_KidneyAfferentArtery.yBase) annotation (
            Line(
            points={{30,32},{30,31}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.FurosemidePool_Loss, FurosemideEffect.u)
          annotation (Line(
            points={{-90,90},{-90,70},{44,70}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(flowMeasure.volumeFlow, KidneyPlasmaFlow.u1) annotation (Line(
            points={{88,12},{88,50},{80,50},{80,61}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(flowMeasure.q_out,ArcuateArtery. q_in) annotation (Line(
            points={{78,0},{78,2.22045e-16},{74,2.22045e-16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(busConnector.NephronIFP_Pressure, IFP.y) annotation (
            Line(
            points={{-90,90},{-90,-22},{-44.4,-22}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(busConnector.Angiotensin2, A2Effect2.u) annotation (Line(
          points={{-90,90},{-92,90},{-92,28},{-54,28}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Angiotensin2, A2Effect3.u) annotation (Line(
          points={{-90,90},{-90,62},{44,62}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ANP, ANP_Effect.u) annotation (Line(
          points={{-90,90},{-90,66},{44,66}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
        connect(SympsOnConductance.y,resistorWithCond. cond) annotation (Line(
            points={{-8,-74},{-8,-74}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A2OnConductance.y,SympsOnConductance. yBase) annotation (Line(
            points={{-8,-66},{-8,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(OsmOnConductance.y,A2OnConductance. yBase) annotation (Line(
            points={{-8,-54},{-8,-62},{-10,-62},{-10,-60},{-8,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Kidney_Alpha_NA,SympsOnConductance. u) annotation (Line(
            points={{-90,90},{-80,90},{-80,-70},{-16,-70}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
      connect(resistorWithCond.q_out, flowMeasure1.q_in) annotation (Line(
          points={{2,-80},{54,-80}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(flowMeasure1.volumeFlow, busConnector.VasaRecta_Outflow)
        annotation (Line(
          points={{64,-92},{-94,-92},{-94,90},{-90,90}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-12},{6,-12}}));
      connect(inputPump.q_out, flowMeasure1.q_in) annotation (Line(
          points={{24,-88},{24,-80},{54,-80}},
          color={0,0,0},
          thickness=1,
          smooth=Smooth.None));
        connect(Osm.y,OsmOnConductance. u) annotation (Line(
            points={{-25.6,-50},{-16,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.MedullaNa_Osmolarity,Osm. u1) annotation (Line(
            points={{-90,90},{-62,90},{-62,-47.6},{-34.8,-47.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.MedullaUrea_Osmolarity,Osm. u2) annotation (Line(
            points={{-90,90},{-62,90},{-62,-52.4},{-34.8,-52.4}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(NephroneADHOnConductance.y,OsmOnConductance. yBase) annotation (
           Line(
            points={{-8,-46},{-6,-46},{-6,-48},{-8,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condConstant.y,NephroneADHOnConductance. yBase) annotation (
            Line(
            points={{-10.5,-30},{-8,-30},{-8,-40}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.Angiotensin2,A2OnConductance. u) annotation (Line(
          points={{-90,90},{-80,90},{-80,-62},{-16,-62}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Vasopressin,NephroneADHOnConductance. u) annotation (
         Line(
          points={{-90,90},{-80,90},{-80,-42},{-16,-42}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CD_H2O_Reab,inputPump. solutionFlow) annotation (
          Line(
          points={{-90,90},{-80,90},{-80,-98},{17,-98}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(EfferentArtery.q_out, resistorWithCond.q_in) annotation (Line(
          points={{-58,0},{-92,0},{-92,-80},{-18,-80}},
          color={0,0,0},
          thickness=1));
        connect(flowMeasure1.q_out, port_b) annotation (Line(
            points={{74,-80},{76,-80},{76,-102},{-92,-102},{-92,0},{-100,0}},
            color={0,0,0},
            thickness=1));
      connect(EfferentArtery.q_in,pressureMeasure.port)  annotation (Line(
          points={{-34,0},{-30,0},{-30,2},{-22,2}},
          color={0,0,0},
          thickness=1));
      connect(busConnector.MD_Na, NaEffect_MaculaDensa.u) annotation (Line(
          points={{-90,90},{-24,90},{-24,74},{44,74}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(AfferentArtery.q_out, EfferentArtery.q_in) annotation (Line(
          points={{20,0},{-34,0}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedOutflowPump.q_in, EfferentArtery.q_in) annotation (Line(
          points={{22,-36},{10,-36},{10,0},{-34,0}},
          color={0,0,0},
          thickness=1));
      connect(busConnector.Glomerulus_GFR, unlimitedOutflowPump.solutionFlow)
        annotation (Line(
          points={{-90,90},{-30,90},{-30,-29},{32,-29}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
        connect(AplhaReceptors_KidneyEfferentArtery.port_a, EfferentArtery.q_in)
          annotation (Line(
            points={{-56,14},{-34,14},{-34,0}},
            color={127,0,0},
            thickness=0.5));
        connect(AplhaReceptors_KidneyAfferentArtery.port_a, AfferentArtery.q_in)
          annotation (Line(
            points={{20,22},{42,22},{42,0},{44,0}},
            color={127,0,0},
            thickness=0.5));
        connect(AplhaReceptors_KidneyAfferentArtery.GangliaGeneral, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{20.2,18},{-6,18},{-6,90},{-90,90}}, color={0,
                0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(AplhaReceptors_KidneyEfferentArtery.GangliaGeneral, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{-55.8,10},{-86,10},{-86,26},{-90,26},{-90,90}},
              color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        annotation (
          Documentation(info="<HTML>
<PRE>
Blood resistance in kidneys.

QHP 2008 / Kidney-Flow

</PRE>
</HTML>
",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                {100,100}}),   graphics={Rectangle(extent={{34,88},{70,50}},
                  lineColor={127,0,0}), Text(
                extent={{34,50},{70,56}},
                lineColor={0,0,255},
                textString="Macula Densa")}),         Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-100,-100},{100,-80}},
                lineColor={0,0,255},
                textString="%name")}));
      end Kidney2;
    end Kidney;

    package Skin
      model Skin
        extends Physiolibrary.Organs.Interfaces.BaseTissue;
        extends Physiolibrary.Icons.Skin;

      Physiolibrary.Fluid.Components.Conductor skin(redeclare package Medium =
              Blood,                                useConductanceInput=
            true)
        annotation (Placement(transformation(extent={{80,-26},{56,-2}})));
      Physiolibrary.Blocks.Factors.Spline A2Effect_Skin(
        data={{0.0,1.05,0},{1.3,1.00,-0.08},{3.5,0.50,0}},
        Xscale=1e-9/1.046,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{58,30},{78,50}})));
      Physiolibrary.Blocks.Factors.Spline ADHEffect_Skin(
        data={{0.8,1.0,0},{3.0,0.1,0}},
        Xscale=1e-9/1.084,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{58,16},{78,36}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst BasicConductance(k=
            2.0001642022551e-10)
        annotation (Placement(transformation(extent={{54,72},{66,84}})));
      Components.ViscosityConductance            Viscosity_Skin(redeclare
            package
            Blood = Blood)
        annotation (Placement(transformation(extent={{78,58},{58,78}})));
      Physiolibrary.Blocks.Factors.Normalization Anesthesia_Skin
        annotation (Placement(transformation(extent={{58,50},{78,70}})));
        Physiolibrary.Blocks.Factors.SplineLagOrZero
          Vasculature_Skin(
          useFunctionFailedInput=true,
          HalfTime=30*86400*Modelica.Math.log(2),                  data={{41,1.2,0},{51,1.0,-0.03},{61,0.8,0}},
          stateName="Skin-Vasculature.Effect")
          annotation (Placement(transformation(extent={{58,40},{78,60}})));
      Physiolibrary.Blocks.Factors.Normalization TermoregulationEffect
        annotation (Placement(transformation(extent={{58,-2},{78,18}})));
      equation
        connect(Anesthesia_Skin.yBase,Viscosity_Skin. y) annotation (Line(
            points={{68,62},{68,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Anesthesia_Skin.y,Vasculature_Skin. yBase) annotation (Line(
            points={{68,56},{68,56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Vasculature_Skin.y,A2Effect_Skin. yBase) annotation (Line(
            points={{68,44},{68,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(BasicConductance.y, Viscosity_Skin.yBase)      annotation (Line(
            points={{67.5,78},{68,78},{68,70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Anesthesia_VascularConductance, Anesthesia_Skin.u)
          annotation (Line(
            points={{-90,90},{-12,90},{-12,60},{60,60}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Skin_Function_Failed, Vasculature_Skin.Failed)
          annotation (Line(
            points={{-90,90},{-12,90},{-12,54},{58,54}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Skin_PO2, Vasculature_Skin.u) annotation (Line(
            points={{-90,90},{-12,90},{-12,48},{58,48}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(skin.q_out, port_b) annotation (Line(
            points={{56,-14},{-24,-14},{-24,0},{-100,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(skin.q_in, flowMeasure.q_out) annotation (Line(
            points={{80,-14},{80,0},{78,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(ADHEffect_Skin.y, busConnector.skin_conductanceWithoutTermoregulationEffect)
          annotation (Line(
            points={{68,22},{-90,22},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(busConnector.skinFlow_termoregulationEffect,
          TermoregulationEffect.u) annotation (Line(
            points={{-90,90},{-88,90},{-88,8},{60,8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(ADHEffect_Skin.y, TermoregulationEffect.yBase) annotation (Line(
            points={{68,22},{68,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TermoregulationEffect.y, skin.cond) annotation (Line(
            points={{68,4},{68,-6.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(A2Effect_Skin.y, ADHEffect_Skin.yBase) annotation (Line(
            points={{68,36},{68,28}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.Angiotensin2, A2Effect_Skin.u) annotation (Line(
          points={{-90,90},{-12,90},{-12,40},{60,40}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Vasopressin, ADHEffect_Skin.u) annotation (Line(
          points={{-90,90},{-12,90},{-12,26},{60,26}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
        connect(Viscosity_Skin.port, port_a) annotation (Line(points={{78,68},{
                110,68},{110,0}}, color={0,127,255}));
         annotation (
          Documentation(info="<HTML>
<PRE>
Blood resistance in skin.

QHP 2008 / Skin-Flow

</PRE>
</HTML>
",     revisions="<html>
<ul>
<li><i>  </i>
       </li>
<li><i> january 2009 </i><br>
       by Marek Matejak in Modelica initially implemented (consulted with Jiri Kofranek), Charles University, Prague<br>
       orginaly described by Tom Coleman in QHP 2008 beta 3, University of Mississippi Medical Center
       </li>
</ul>
</html>"), Icon(graphics={Text(
                extent={{-100,-100},{100,-80}},
                lineColor={0,0,255},
                textString="%name")}));
      end Skin;
    end Skin;

    package Blood "Red Cells and Blood Properties"
      class References "References"
        extends Modelica.Icons.References;

        annotation (Documentation(info="<html>
<table>

	<tr>
		<td>[Begg1966]</td>
		<td>T. Begg and J. Hearns, \"Components in blood viscosity. The relative contribution of haematocrit, plasma fibrinogen and other proteins,\" Clinical science, vol. 31, pp. 87-93, 1966. </td>
	</tr>
	<tr>
		<td>[Brezis1995]</td>
		<td>M. Brezis and S. Rosen, \"Hypoxia of the Renal Medulla — Its Implications for Disease,\" New England Journal of Medicine, vol. 332, pp. 647-655, 1995. </td>
	</tr>
	<tr>
		<td>[Fan1980]</td>
		<td>F. C. Fan, R. Y. Chen, G. B. Schuessler, and S. Chien, Effects of hematocrit variations on regional hemodynamics and oxygen transport in the dog vol. 238, 1980. </td>
	</tr>
	<tr>
		<td>[Jan1977]</td>
		<td>K. M. Jan and S. Chien, Effect of hematocrit variations on coronary hemodynamics and oxygen utilization vol. 233, 1977. </td>
	</tr>
	<tr>
		<td>[Schrier1970]</td>
		<td>R. W. Schrier, K. M. McDonald, R. Wells, and D. P. Lauler, \"Influence of hematocrit and colloid on whole blood viscosity during volume expansion,\" Am. J. Physiol, vol. 218, p. 77, 1970. </td>
	</tr>
	<tr>
		<td>[Stone1968]</td>
		<td>H. Stone, Thompson HK, and K. Schmidt-Nielsen, Influence of erythrocytes on blood viscosity vol. 214, 1968. </td>
	</tr>
	<tr>
		<td>[Whittaker1933]</td>
		<td>S. R. F. Whittaker and F. R. Winton, \"The apparent viscosity of blood flowing in the isolated hindlimb of the dog, and its variation with corpuscular concentration,\" The Journal of Physiology, vol. 78, pp. 339-369, July 10, 1933 1933.  </td>
	</tr>


</table>
</html>"));
      end References;

      model BloodPropertiesBase
          extends Physiolibrary.Icons.Blood;

        Modelica.Blocks.Math.Add BloodVolume
          annotation (Placement(transformation(extent={{10,-70},{18,-62}})));
        Modelica.Blocks.Math.Min CollapsedEffect
          annotation (Placement(transformation(extent={{50,-84},{58,-76}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{38,-78},{46,-70}})));
      Physiolibrary.Types.Constants.OneConst one
        annotation (Placement(transformation(extent={{26,-94},{34,-86}})));
        Modelica.Blocks.Math.Division HtcFract
          annotation (Placement(transformation(extent={{32,-46},{40,-38}})));
      Physiolibrary.Types.Constants.OneConst one2
        annotation (Placement(transformation(extent={{28,-14},{36,-6}})));
        Modelica.Blocks.Math.Feedback PVCrit
          annotation (Placement(transformation(extent={{38,-14},{46,-6}})));
      Physiolibrary.Types.Constants.ConcentrationConst Hb(k=9.3)
        annotation (Placement(transformation(extent={{-20,8},{-28,16}})));
      Physiolibrary.Blocks.Factors.Normalization hematocritEffect(NormalValue=
            0.44)
        annotation (Placement(transformation(extent={{-44,-10},{-24,10}})));
      Physiolibrary.Types.Constants.ConcentrationConst DPG(k=5.4)
        annotation (Placement(transformation(extent={{26,90},{18,98}})));
      Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
        annotation (Placement(transformation(extent={{26,82},{18,90}})));
      Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
        annotation (Placement(transformation(extent={{26,74},{18,82}})));
      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{-104,58},{-84,78}})));
        Modelica.Blocks.Math.Division division3(y(displayUnit="mmol/l"))
          annotation (Placement(transformation(extent={{-4,-4},{4,4}},
              origin={-4,2})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-20,32},{-40,52}})));
        Modelica.Blocks.Math.Add BloodVolume1
          annotation (Placement(transformation(extent={{-46,24},{-38,32}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{66,2},{74,10}})));
        Modelica.Blocks.Math.Sum V0(nin=5)
          annotation (Placement(transformation(extent={{-30,-90},{-22,-82}})));
        Modelica.Blocks.Math.Sum VeinsVol(nin=5) "volume of deoxygenated blood"
          annotation (Placement(transformation(extent={{-26,-54},{-18,-46}})));
        Modelica.Blocks.Math.Sum ArtysVol(nin=4) "volume of oxygenated blood"
          annotation (Placement(transformation(extent={{-26,-34},{-18,-26}})));
        ViscosityConductanceEffect viscosityConductanceEffect annotation (
            Placement(transformation(rotation=0, extent={{58,-44},{78,-24}})));
      equation
        connect(busConnector.PlasmaVol_Vol, BloodVolume.u2)
                                                    annotation (Line(
            points={{-94,68},{-94,-68.4},{9.2,-68.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.RBCVol_Vol, BloodVolume.u1)
                                                  annotation (Line(
            points={{-94,68},{-94,-63.6},{9.2,-63.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, CollapsedEffect.u1)
                                    annotation (Line(
            points={{46.4,-74},{47.8,-74},{47.8,-77.6},{49.2,-77.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(BloodVolume.y, division.u1)
                                    annotation (Line(
            points={{18.4,-66},{28,-66},{28,-71.6},{37.2,-71.6}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(one.y, CollapsedEffect.u2) annotation (Line(
          points={{35,-90},{42,-90},{42,-82.4},{49.2,-82.4}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(CollapsedEffect.y, busConnector.BloodVol_CollapsedEffect)
                                                              annotation (Line(
            points={{58.4,-80},{90,-80},{90,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HtcFract.u2, BloodVolume.y)
                                    annotation (Line(
            points={{31.2,-44.4},{26,-44.4},{26,-66},{18.4,-66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HtcFract.u1,busConnector. RBCVol_Vol) annotation (Line(
            points={{31.2,-39.6},{-94,-39.6},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HtcFract.y, viscosityConductanceEffect.hematocrit) annotation (
            Line(
            points={{40.4,-42},{50,-42},{50,-38},{58,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(viscosityConductanceEffect.effect, busConnector.Viscosity_ConductanceEffect)
          annotation (Line(
            points={{78,-34},{90,-34},{90,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HtcFract.y,busConnector. BloodVol_Hct) annotation (Line(
            points={{40.4,-42},{42,-42},{42,-20},{-94,-20},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(one2.y, PVCrit.u1) annotation (Line(
          points={{37,-10},{38.8,-10}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(HtcFract.y,PVCrit. u2) annotation (Line(
            points={{40.4,-42},{42,-42},{42,-13.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PVCrit.y,busConnector. BloodVol_PVCrit) annotation (Line(
            points={{45.6,-10},{90,-10},{90,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(Hb.y, hematocritEffect.yBase) annotation (Line(
          points={{-29,12},{-34,12},{-34,2}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(hematocritEffect.y,busConnector. ctHb) annotation (Line(
            points={{-34,-4},{-34,-10},{-94,-10},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(busConnector.cDPG, DPG.y) annotation (Line(
          points={{-94,68},{-4,68},{-4,94},{17,94}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.FMetHb, FMetHb.y) annotation (Line(
          points={{-94,68},{-4,68},{-4,86},{17,86}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.FHbF, FHbF.y) annotation (Line(
          points={{-94,68},{-4,68},{-4,78},{17,78}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(Hb.y, division3.u1) annotation (Line(
          points={{-29,12},{-34,12},{-34,4},{-8.8,4},{-8.8,4.4}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(HtcFract.y, division3.u2) annotation (Line(
            points={{40.4,-42},{42,-42},{42,-20},{-18,-20},{-18,-0.4},{-8.8,
              -0.4}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(division3.y, busConnector.ctHb_ery) annotation (Line(
            points={{0.4,2},{20,2},{20,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(BloodVolume.y, feedback.u1) annotation (Line(
            points={{18.4,-66},{26,-66},{26,42},{-22,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.ArtysVol, BloodVolume1.u1) annotation (Line(
            points={{-94,68},{-94,30},{-46.8,30},{-46.8,30.4}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.VeinsVol, BloodVolume1.u2) annotation (Line(
            points={{-94,68},{-94,26},{-46.8,26},{-46.8,25.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(BloodVolume1.y, feedback.u2) annotation (Line(
            points={{-37.6,28},{-30,28},{-30,34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PVCrit.y, product.u2) annotation (Line(
            points={{45.6,-10},{54,-10},{54,3.6},{65.2,3.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.PortalVein_BloodFlow, product.u1) annotation (Line(
            points={{-94,68},{54,68},{54,8.4},{65.2,8.4}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(product.y, busConnector.PortalVein_PlasmaFlow) annotation (Line(
            points={{74.4,6},{90,6},{90,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(busConnector.PulmonaryCirculation_V0,V0. u[1])
          annotation (Line(
            points={{-94,68},{-94,-82},{-32,-82},{-32,-86.32},{-30.8,-86.32}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,6},{-6,6}}));
        connect(busConnector.Heart_V0,V0. u[2]) annotation (
            Line(
            points={{-94,68},{-94,-86.16},{-30.8,-86.16}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,2},{-6,2}}));
        connect(busConnector.SystemicArtys_V0,V0. u[3])
          annotation (Line(
            points={{-94,68},{-94,-90},{-32,-90},{-32,-86},{-30.8,-86}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-2},{-6,-2}}));
        connect(busConnector.PortalVein_V0,V0. u[4]) annotation (Line(
            points={{-94,68},{-94,-94},{-32,-94},{-32,-85.84},{-30.8,-85.84}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-6},{-6,-6}}));
        connect(busConnector.SystemicVeins_V0,V0. u[5]) annotation (Line(
            points={{-94,68},{-94,-98},{-32,-98},{-32,-85.68},{-30.8,-85.68}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-10},{-6,-10}}));
        connect(VeinsVol.y, busConnector.VeinsVol) annotation (Line(
            points={{-17.6,-50},{2,-50},{2,-42},{-94,-42},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(busConnector.PulmonaryCirculation_DeoxygenatedBloodVolume,VeinsVol. u[1])
          annotation (Line(
            points={{-94,68},{-94,-46},{-28,-46},{-28,-50.32},{-26.8,-50.32}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,6},{-6,6}}));
        connect(busConnector.Heart_DeoxygenatedBloodVolume,VeinsVol. u[2]) annotation (
            Line(
            points={{-94,68},{-94,-50.16},{-26.8,-50.16}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,2},{-6,2}}));
        connect(busConnector.SplanchnicCirculation_DeoxygenatedBloodVolume,VeinsVol. u[3])
          annotation (Line(
            points={{-94,68},{-94,-54},{-28,-54},{-28,-50},{-26.8,-50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-2},{-6,-2}}));
        connect(busConnector.SystemicVeins_DeoxygenatedBloodVolume,VeinsVol. u[4])
          annotation (Line(
            points={{-94,68},{-94,-58},{-28,-58},{-28,-49.84},{-26.8,-49.84}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-6},{-6,-6}}));
        connect(ArtysVol.y, busConnector.ArtysVol) annotation (Line(
            points={{-17.6,-30},{2,-30},{2,-22},{-94,-22},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(busConnector.PulmonaryCirculation_OxygenatedBloodVolume,ArtysVol. u[1])
          annotation (Line(
            points={{-94,68},{-94,-26},{-28,-26},{-28,-30.3},{-26.8,-30.3}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,6},{-6,6}}));
        connect(busConnector.Heart_OxygenatedBloodVolume,ArtysVol. u[2]) annotation (
            Line(
            points={{-94,68},{-94,-30.1},{-26.8,-30.1}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,2},{-6,2}}));
        connect(busConnector.SystemicArtys_OxygenatedBloodVolume,ArtysVol. u[3])
          annotation (Line(
            points={{-94,68},{-94,-34},{-28,-34},{-28,-29.9},{-26.8,-29.9}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-2},{-6,-2}}));
        connect(feedback.y, busConnector.BloodVolume_change) annotation (Line(
            points={{-39,42},{-66,42},{-66,68},{-94,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(BloodVolume.y, busConnector.BloodVolume) annotation (Line(
          points={{18.4,-66},{90,-66},{90,68},{-94,68}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(HtcFract.y, hematocritEffect.u) annotation (Line(
          points={{40.4,-42},{42,-42},{42,-20},{-52,-20},{-52,0},{-42,0}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(busConnector.LegArtys_OxygenatedBloodVolume, ArtysVol.u[4])
          annotation (Line(
            points={{-94,68},{-94,-38},{-26.8,-38},{-26.8,-29.7}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-6},{-6,-6}}));
        connect(busConnector.LegVeins_DeoxygenatedBloodVolume, VeinsVol.u[5])
          annotation (Line(
            points={{-94,68},{-94,-62},{-28,-62},{-28,-49.68},{-26.8,-49.68}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-10},{-6,-10}}));
      connect(V0.y, division.u2) annotation (Line(
          points={{-21.6,-86},{8,-86},{8,-76.4},{37.2,-76.4}},
          color={0,0,127},
          smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={                          Text(
                extent={{-142,-108},{142,-130}},
                lineColor={0,0,255},
                textString="%name")}),
          Documentation(info="<html>
<p>BloodVolume .. whole blood volume</p>
<p>BloodVol_Hct .. haematocrit</p>
<p>BloodVol_PVCrit .. 1-BloodVol_Hct, plamacrit</p>
<p>ctHb_ery .. concentration of heme group in erythrocytes = 4 * MCHC (mean corpuscular hemoglobin concentration)</p>
<p>ctHb .. concentration of heme group in whole blood</p>
<p>FHbF .. featal Hb fraction from all Hb</p>
<p>FMetHb .. metha-Hb fraction from all Hb</p>
<p>cDPG .. concentration of 2,3-diphosphoglycerate in erythrocytes</p>
<p>Viscosity_ConductanceEffect .. multiply coeficient of blood resistance through vesseles</p>
<p>BloodVol_CollapsedEffect .. effect of small blood volume on systemic veins collasping</p>
<p>Vesseles_V0 .. volume of no-pressure generating blood in all vessels.</p>
<p>ArtysVol .. volume of all oxigenated blood</p>
<p>VeinsVol .. volume of all deoxigenated blood</p>
</html>", revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
      end BloodPropertiesBase;

      model RedCells
        extends Physiolibrary.Icons.RedCells;
        Physiolibrary.Blocks.Factors.SplineLag      EPOEffect(
          HalfTime=3*86400*Modelica.Math.log(2),
          data={{0.0,0.0,0},{1.3,1.0,1.0},{4.0,4.0,0}},
          stateName="[EPO]Delay.Effect",
        UsePositiveLog10=true,
        Xscale=1e3) "20 miu/ml = 20e3 iu/m3"
          annotation (Placement(transformation(extent={{-46,-16},{-26,4}})));
      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{-88,58},{-68,78}})));
        Physiolibrary.Blocks.Math.FractionGain
                                  H2O(f=0.66)
          annotation (Placement(transformation(extent={{-4,-4},{4,4}},
            origin={54,-84})));
        Physiolibrary.Organs.Kidney.EPO EPO
          annotation (Placement(transformation(extent={{-74,-16},{-54,4}})));
      Physiolibrary.Population.Sources.Growth transfusion(useChangeInput=true)
        annotation (Placement(transformation(extent={{-46,-52},{-26,-32}})));
      Physiolibrary.Population.Sources.Growth erythropoiesis(useChangeInput=
            true)
        annotation (Placement(transformation(extent={{-46,-30},{-26,-10}})));
      Physiolibrary.Population.Sources.Loss hemorrhage(useChangeInput=true)
        annotation (Placement(transformation(extent={{58,-32},{78,-12}})));
      Physiolibrary.Population.Components.Mortality mortality(LifeTime(
            displayUnit="d") = 10368000)
        annotation (Placement(transformation(extent={{58,-52},{78,-32}})));
      Physiolibrary.Population.Components.Population erythrocytes(
        population_start=12e12,
        NominalPopulation=1e12,
        NominalPopulationChange=1e6)
        "red cell count (with density of 5e6 per one uL)"
        annotation (Placement(transformation(extent={{4,-42},{24,-22}})));
        Modelica.Blocks.Math.Gain RBCVol(k=2.4e-3/12e12) "12e12 cells == 2.4 L"
        annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            origin={30,-76})));
      Physiolibrary.Types.Constants.PopulationChangeConst RBCBaseSecretionRate(
          k=1.16e6) "13.7 ml/day (12e12 cells == 2.4 L)"
        annotation (Placement(transformation(extent={{-50,8},{-42,16}})));
        Modelica.Blocks.Math.Gain RBCVolToCells(k=12e12/2.4e-3)
        "12e12 cells == 2.4 L" annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            origin={-58,-36})));
        Modelica.Blocks.Math.Gain RBCVol2(k=12e12/2.4e-3)
        "12e12 cells == 2.4 L" annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={68,0})));
      equation

        connect(H2O.y, busConnector.RBCH2O_Vol) annotation (Line(
            points={{58.4,-84},{98,-84},{98,68},{-78,68}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(EPOEffect.u, EPO.Erythropoetin) annotation (Line(
          points={{-44,-6},{-54,-6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector, EPO.busConnector) annotation (Line(
          points={{-78,68},{-78,-12},{-72,-12}},
          color={255,204,51},
          thickness=0.5,
          smooth=Smooth.None));
      connect(EPOEffect.y, erythropoiesis.populationChange) annotation (Line(
          points={{-36,-10},{-36,-16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(erythropoiesis.port_b, erythrocytes.port) annotation (Line(
          points={{-26,-20},{-6,-20},{-6,-32},{14,-32}},
          color={0,127,127},
          thickness=1,
          smooth=Smooth.None));
      connect(transfusion.port_b, erythrocytes.port) annotation (Line(
          points={{-26,-42},{-6,-42},{-6,-32},{14,-32}},
          color={0,127,127},
          thickness=1,
          smooth=Smooth.None));
      connect(erythrocytes.port, hemorrhage.port_a) annotation (Line(
          points={{14,-32},{34,-32},{34,-22},{58,-22}},
          color={0,127,127},
          thickness=1,
          smooth=Smooth.None));
      connect(erythrocytes.port, mortality.port_a) annotation (Line(
          points={{14,-32},{34,-32},{34,-42},{58.2,-42}},
          color={0,127,127},
          thickness=1,
          smooth=Smooth.None));
      connect(RBCVol.y, H2O.u) annotation (Line(
          points={{34.4,-76},{42,-76},{42,-84},{49.2,-84}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(erythrocytes.population, RBCVol.u) annotation (Line(
          points={{20,-42},{20,-76},{25.2,-76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(RBCVol.y, busConnector.RBCVol_Vol) annotation (Line(
          points={{34.4,-76},{98,-76},{98,68},{-78,68}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RBCBaseSecretionRate.y, EPOEffect.yBase) annotation (Line(
          points={{-41,12},{-36,12},{-36,-4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(transfusion.populationChange, RBCVolToCells.y) annotation (Line(
          points={{-36,-38},{-36,-36},{-53.6,-36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector.Transfusion_RBCRate, RBCVolToCells.u) annotation (
          Line(
          points={{-78,68},{-78,-36},{-62.8,-36}},
          color={255,204,51},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Hemorrhage_RBCRate, RBCVol2.u) annotation (Line(
          points={{-78,68},{68,68},{68,4.8}},
          color={255,204,51},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(RBCVol2.y, hemorrhage.populationChange) annotation (Line(
          points={{68,-4.4},{68,-18}},
          color={0,0,127},
          smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={                  Text(
                extent={{-136,-46},{148,-68}},
                lineColor={0,0,255},
                textString="%name")}),
          Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
      end RedCells;

      model ViscosityConductanceEffect
        Blocks.Interpolation.Curve HtcOnVisc(
          x={0,0.44,0.8},
          y={0.5,1,5},
          slope={0.8,3,30})
          annotation (Placement(transformation(extent={{46,-52},{66,-32}})));
        Modelica.Blocks.Math.Division division1
          annotation (Placement(transformation(extent={{78,-40},{86,-32}})));
        Types.Constants.OneConst one1
          annotation (Placement(transformation(extent={{64,-30},{72,-22}})));
        Modelica.Blocks.Interfaces.RealInput hematocrit annotation (Placement(
              transformation(rotation=0, extent={{-110,-50},{-90,-30}})));
        Modelica.Blocks.Interfaces.RealOutput effect annotation (Placement(
              transformation(rotation=0, extent={{90,-10},{110,10}})));
      equation
      connect(one1.y,division1. u1) annotation (Line(
          points={{73,-26},{74,-26},{74,-33.6},{77.2,-33.6}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(HtcOnVisc.val,division1. u2) annotation (Line(
            points={{66,-42},{75.5,-42},{75.5,-38.4},{77.2,-38.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(hematocrit, HtcOnVisc.u) annotation (Line(points={{-100,-40},{-28,
                -40},{-28,-42},{46,-42}}, color={0,0,127}));
        connect(effect, division1.y) annotation (Line(points={{100,0},{94,0},{94,
                -36},{86.4,-36}}, color={0,0,127}));
      end ViscosityConductanceEffect;
    end Blood;

    package Systems
      model Cardiovascular
        extends Physiolibrary.Icons.CardioVascular;
        //  extends Physiomodel.Library.Utilities.DynamicState(stateName="BloodVol.Vol", initType=Library.Utilities.Init.NoInit);

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

        Heart.Heart heart(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{-2,-6},{24,20}})));
        Physiolibrary.Organs.Lungs.Components.PulmonaryCirculation pulmonary(
            redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{2,50},{30,78}})));
        Systemic systemic(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{-4,-70},{30,-36}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-38,-10},{-16,12}}),iconTransformation(extent=
               {{-100,60},{-60,100}})));
        Physiolibrary.Organs.Blood.RedCells redCells
          annotation (Placement(transformation(extent={{-34,24},{-54,44}})));

      /*initial equation
  if STEADY then
     bloodProperties.feedback.y = 0;
  end if;
*/

      equation
        connect(busConnector, pulmonary.busConnector) annotation (Line(
            points={{-27,1},{-26,1},{-26,71},{2,71}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, systemic.busConnector) annotation (Line(
            points={{-27,1},{-26,1},{-26,-46.2},{-4.34,-46.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, redCells.busConnector)    annotation (Line(
            points={{-27,1},{-26,1},{-26,40.8},{-36.2,40.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(heart.leftVentricle, systemic.port_a) annotation (Line(
            points={{21.4,-0.8},{21.4,0},{30,0},{30,-53}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemic.port_b, heart.rightAtrium) annotation (Line(
            points={{-4,-53},{-4,14.8},{0.6,14.8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonary.q_in, heart.rightVentricle) annotation (Line(
            points={{2,64},{-8,64},{-8,0},{0.6,0},{0.6,-0.8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonary.q_out, heart.leftAtrium) annotation (Line(
            points={{30,64},{36,64},{36,16},{20,16},{20,14.54},{21.14,14.54}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

      //  stateValue = bloodProperties.BloodVolume1.y;

        connect(heart.Pericardium, busConnector.Pericardium_Pressure) annotation (
           Line(points={{16.2,20},{16.2,24},{-27,24},{-27,1}}, color={0,0,127}));
        connect(heart.Sympathicus, busConnector.GangliaGeneral_NA) annotation (
            Line(points={{9.96,9.6},{9.96,10},{-26,10},{-26,6},{-27,6},{-27,1}},
              color={0,0,127}));
        connect(heart.Parasympathicus, busConnector.VagusNerve_NA_Hz) annotation (
           Line(points={{2.94,4.4},{2.94,4},{-28,4},{-28,1},{-27,1}}, color={0,0,
                127}));
        annotation ( Documentation(info="<html>
<p><h4><font color=\"#008000\">Cardiovascular system</font></h4></p>
<p><font style=\"color: #008000; \">Connect heart with pulmonary and systemic part. This connection contains pressures and blood flows before and after heart.</font></p>
<p><font style=\"color: #008000; \">Output signal variables about blood volume between lungs capilaries and systemic tissue capilaries are used in gass transport submodels like O2 or CO2.</font></p>
<p><font style=\"color: #008000; \">Output signal Vesseles_V0 is used for systemic veins collapsing in massive blood lost.</font></p>
<p><font style=\"color: #008000; \">The blood properties convert known variables values to another meanings (haematocrit, viscosity, ..).</font></p>
<p><font style=\"color: #008000; \">Red cells contains volume, loss and gains all red blood cells.</font></p>
</html>",   revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-116,-96},{126,-130}},
                lineColor={0,0,255},
                textString="%name")}));
      end Cardiovascular;

      model Systemic
        extends Physiolibrary.Icons.SystemicCirculation;

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Blood) "Blood inflow" annotation (Placement(transformation(extent={
                  {98,-10},{118,10}}, rotation=0), iconTransformation(extent={{90,
                  -10},{110,10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Blood) "Blood outflow" annotation (Placement(transformation(extent=
                  {{-104,4},{-84,24}}, rotation=0), iconTransformation(extent={{-110,
                  -10},{-90,10}})));

        /*
  Library.PressureFlow.NegativePressureFlow fromSystemicVeins annotation (
      Placement(transformation(extent={{-110,-10},{-90,10}}),iconTransformation(
          extent={{-112,44},{-92,64}})));
  Library.PressureFlow.PositivePressureFlow systemicArteries
    annotation (Placement(transformation(extent={{88,-10},{108,10}}),
        iconTransformation(extent={{90,46},{110,66}})));
*/

      Physiolibrary.Fluid.Components.ElasticVessel systemicArtys(redeclare
            package Medium =                                                                Blood,
          massFractions_start=Blood.ArterialDefault,
          useSubstances=true,
        stateName="SystemicArtys.Vol",
        useV0Input=true,
        useComplianceInput=false,
          volume_start=0.00100036,
          Compliance=1.1625954425608e-08,
        useExternalPressureInput=false,
        ExternalPressure=0,
          nPorts=15)
        annotation (Placement(transformation(extent={{65,-10},{86,11}})));
      Physiolibrary.Types.Constants.VolumeConst               V0_artys(k=0.00085)
        annotation (Placement(transformation(extent={{98,18},{88,28}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst
        SystemicVeinsCompliance(k=6.645545561992547e-007)
        annotation (Placement(transformation(extent={{-27,10},{-35,18}})));
        Physiolibrary.Organs.Systems.Peripheral peripheral(redeclare package
            Blood = Blood)
          annotation (Placement(transformation(extent={{-2,0},{26,28}})));
        Physiolibrary.Organs.Components.SystemicVeinsElacticBloodCompartment
          systemicVeinsElacticBloodCompartment(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
            nPorts=8)
          annotation (Placement(transformation(extent={{-56,-10},{-36,10}})));
      Physiolibrary.Types.Constants.PressureConst SystemicVeinsExternalPressure(
          k=0)
        annotation (Placement(transformation(extent={{-36,16},{-43,23}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{36,40},{56,60}}), iconTransformation(extent=
               {{-110,32},{-94,48}})));
        Physiolibrary.Organs.Components.CollapsingVeins collapsedVeins(redeclare
            package Medium = Blood)                                                                     annotation (
            Placement(transformation(
              extent={{-10,10.5},{10,-10.5}},
              rotation=180,
              origin={-84.5,0})));
      Physiolibrary.Fluid.Components.HydrostaticColumn
        gravityHydrostaticDifference(redeclare package Medium = Blood,     useHeightInput=true)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={61,35})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{8.5,-8.5},{-8.5,8.5}},
            origin={78.5,45.5})));
        Modelica.Blocks.Math.Gain G(k=9.81) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={34,26})));
        Physiolibrary.Organs.Systems.Splanchnic splanchnicCirculation(redeclare
            package Blood = Blood)
          annotation (Placement(transformation(extent={{-2,-42},{36,-4}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure1(redeclare
            package Medium =                                                                  Blood)
        annotation (Placement(transformation(extent={{76,-38},{96,-18}})));
        Chemical.Sources.SubstanceOutflow O2_left(SubstanceFlow(displayUnit=
                "mmol/min") = 1.666666666666667e-05*(2*7.71))                                          annotation (
          Placement(transformation(extent={{76,-90},{96,-70}})));
        Chemical.Sources.SubstanceInflowT CO2_left(
          SubstanceFlow(displayUnit="mmol/min") = 1.666666666666667e-05*(2*6.17),
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.CarbonDioxide_gas())
          annotation (Placement(transformation(extent={{28,-90},{48,-70}})));

        Fluid.Sensors.PartialPressure pCO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.CarbonDioxide_gas(),
          redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{14,-50},{34,-70}})));
        Fluid.Sensors.PartialPressure pO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.Oxygen_gas(),
          redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{94,-52},{74,-72}})));
      equation
      connect(systemicArtys.zeroPressureVolume, V0_artys.y) annotation (Line(
          points={{68.15,9.95},{68.15,23},{86.75,23}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(busConnector, peripheral.busConnector)          annotation (
            Line(
            points={{46,50},{46,23.38},{4.3,23.38}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(SystemicVeinsCompliance.y, systemicVeinsElacticBloodCompartment.Compliance)
          annotation (Line(
            points={{-36,14},{-38.2,14},{-38.2,10},{-40,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector,systemicVeinsElacticBloodCompartment. busConnector)
          annotation (Line(
            points={{46,50},{-26,50},{-26,6.1},{-36.2,6.1}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.ExternalPressure,
          SystemicVeinsExternalPressure.y)
          annotation (Line(
            points={{-46,10},{-46,19.5},{-43.875,19.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(collapsedVeins.ExternalPressure, busConnector.Thorax_AvePressure)
          annotation (Line(
            points={{-90.5,2.1},{-80,2.1},{-80,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinus_Pressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(gravityHydrostaticDifference.height, busConnector.CarotidSinusHeight)
          annotation (Line(
            points={{50,35},{46,35},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(gravityHydrostaticDifference.q_up,pressureMeasure.port)
          annotation (Line(
            points={{71,39},{80,39},{80,37},{78.5,37}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinusArteryPressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.Pressure, busConnector.SystemicVeins_Pressure)
          annotation (Line(
            points={{-56,-4},{-56,-28},{46,-28},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(systemicVeinsElacticBloodCompartment.V0, busConnector.SystemicVeins_V0)
          annotation (Line(
            points={{-52.8,10},{-52.8,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(V0_artys.y, busConnector.SystemicArtys_V0) annotation (Line(
            points={{86.75,23},{70,23},{70,22},{46,22},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(collapsedVeins.q_out, port_b) annotation (Line(
            points={{-94.5,-1.22465e-15},{-96.25,-1.22465e-15},{-96.25,14},{-94,
                14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(busConnector.Gravity_Gz, G.u) annotation (Line(
            points={{46,50},{46,38},{34,38},{34,30.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));

        connect(splanchnicCirculation.busConnector, busConnector) annotation (
            Line(
            points={{-2,-13.5},{-2,50},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));

      connect(systemicArtys.fluidVolume, busConnector.SystemicArtys_OxygenatedBloodVolume)
        annotation (Line(
          points={{86,-7.9},{72,-7.9},{72,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(systemicVeinsElacticBloodCompartment.Vol, busConnector.SystemicVeins_DeoxygenatedBloodVolume)
        annotation (Line(
          points={{-50,-10},{-50,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(pressureMeasure1.pressure, busConnector.SystemicArtys_Pressure)
        annotation (Line(
          points={{92,-32},{98,-32},{98,-42},{46,-42},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
        connect(systemicArtys.q_in[1], gravityHydrostaticDifference.q_down)
          annotation (Line(
            points={{75.395,-0.774},{52,-0.774},{52,14},{102,14},{102,30.8},{70.8,
                30.8}},
            color={127,0,0},
            thickness=0.5));

        connect(pressureMeasure1.port, systemicArtys.q_in[2]) annotation (Line(
            points={{86,-38},{86,-44},{64,-44},{64,-14},{60,-14},{60,-0.592},{
                75.395,-0.592}},
            color={127,0,0},
            thickness=0.5));

        connect(port_a, systemicArtys.q_in[3]) annotation (Line(
            points={{108,0},{108,14},{54,14},{54,-0.41},{75.395,-0.41}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, port_a) annotation (Line(
            points={{108,0},{108,0}},
            color={127,0,0},
            thickness=0.5));

        connect(peripheral.port_a, systemicArtys.q_in[4:11]) annotation (Line(
            points={{34.4,14},{52,14},{52,1.046},{75.395,1.046}},
            color={127,0,0},
            thickness=0.5));
        connect(splanchnicCirculation.port_a, systemicArtys.q_in[12:13])
          annotation (Line(
            points={{36,-23},{50,-23},{50,1.41},{75.395,1.41}},
            color={127,0,0},
            thickness=0.5));
        connect(systemicVeinsElacticBloodCompartment.port_b, collapsedVeins.q_in)
          annotation (Line(
            points={{-56,0},{-64.25,0},{-64.25,-1.66533e-15},{-74.5,-1.66533e-15}},
            color={127,0,0},
            thickness=0.5));

        connect(collapsedVeins.q_in, splanchnicCirculation.port_b) annotation (
            Line(
            points={{-74.5,-1.55431e-15},{-68,-1.55431e-15},{-68,-23},{-2,-23}},
            color={127,0,0},
            thickness=0.5));

        connect(systemicVeinsElacticBloodCompartment.port_a[1:8], peripheral.port_b)
          annotation (Line(
            points={{-36,0.4375},{-18,0.4375},{-18,14},{-10.12,14}},
            color={127,0,0},
            thickness=0.5));
        connect(peripheral.Sympathicus, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{13.4,21},{13.4,50},{46,50}}, color={0,0,127}));
        connect(pCO2.port, systemicArtys.q_in[14]) annotation (Line(points={{24,
                -50},{62,-50},{62,-44},{64,-44},{64,-14},{60,-14},{60,1.592},{
                75.395,1.592}}, color={0,127,255}));
        connect(pO2.port, systemicArtys.q_in[15]) annotation (Line(points={{84,
                -52},{84,-44},{64,-44},{64,-14},{60,-14},{60,1.774},{75.395,1.774}},
              color={0,127,255}));
        connect(O2_left.port_a, systemicArtys.substances.O2) annotation (
           Line(points={{76,-80},{60,-80},{60,-16},{58,-16},{58,0.5},{65,0.5}},
              color={158,66,200}));
        connect(pO2.port_a, O2_left.port_a) annotation (Line(points={{74,-62},{74,
                -80},{76,-80}}, color={158,66,200}));
        connect(CO2_left.port_b, systemicArtys.substances.CO2)
          annotation (Line(points={{48,-80},{60,-80},{60,-16},{58,-16},{58,0.5},{
                65,0.5}}, color={158,66,200}));
        connect(pCO2.port_a, CO2_left.port_b) annotation (Line(points={{34,-60},{
                60,-60},{60,-80},{48,-80}}, color={158,66,200}));
       annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                -100},{100,100}}),   graphics={Text(
                extent={{42,46},{74,46}},
                lineColor={0,0,255},
                textString="Carotid Artery Pressure")}),
                                       Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-104,-54},{110,-76}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>", info="<html>
<p>Blood volume (and pressure) distributions between </p>
<p><ul>
<li>systemic arteries, </li>
<li>systemic veins and</li>
<li>portal (splanchnic) vein.</li>
</ul></p>
<p>Blood flow throught: </p>
<p><ul>
<li>GIT, hepatic artery, liver</li>
<li>Kidney</li>
<li>CNS</li>
<li>Skeletal muscle</li>
<li>Respiratory muscle</li>
<li>Skin</li>
<li>Bones</li>
<li>Adipose tissue</li>
<li>Other tissue</li>
</ul></p>
</html>"));
      end Systemic;

      model Peripheral
        extends Physiolibrary.Icons.PerfusionDO;
        extends Physiolibrary.Icons.PeripheralCirculation;

      replaceable package Blood = Physiolibrary.Media.Blood  constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                   annotation ( choicesAllMatching = true); //BloodBySiggaardAndersen
      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a[8](redeclare package
            Medium = Blood) "Blood inflow" annotation (Placement(transformation(
                extent={{90,-10},{110,10}}, rotation=0), iconTransformation(
                extent={{150,-10},{170,10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b[8](redeclare package
            Medium = Blood) "Blood outflow" annotation (Placement(transformation(
                extent={{-110,-10},{-90,10}}, rotation=0), iconTransformation(
                extent={{-168,-10},{-148,10}})));

      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-100,80},{-80,100}}), iconTransformation(
              extent={{-64,58},{-46,76}})));

        Components.Tissue bone(redeclare package Blood = Blood, Cond=
              4.536109889163e-10)
          annotation (Placement(transformation(extent={{-38,62},{-12,88}})));
        Components.Tissue brain(
          redeclare package Blood = Blood,
          onAnesthesia=false,
          onAngiotensinII=false,
          onVasopressin=false,
          onCatecholamines=false,
          onOxygenAndCarbonDioxide=true,
          VasculatureConductanceOnPO2={{27,1.2,0},{37,1.0,-0.03},{47,0.8,0}},
          onOxygenOnly=false,
          Cond=1.1375933900326e-09)
          annotation (Placement(transformation(extent={{12,44},{38,70}})));
        Components.Tissue fat(redeclare package Blood = Blood, Cond=
              3.3752770913055e-10)
          annotation (Placement(transformation(extent={{-38,26},{-12,52}})));
        Skin.Skin skin(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{22,-34},{46,-10}})));
        Components.Tissue otherTissue(redeclare package Blood = Blood, Cond=
              5.2504310309196e-10)
          annotation (Placement(transformation(extent={{-36,-98},{-10,-72}})));
        Components.Tissue skeletalMuscle(
          redeclare package Blood = Blood,
          Cond=9.0007389101479e-10,
          onOxygenNeed=true,
          onExercise=true)
          annotation (Placement(transformation(extent={{-34,-54},{-8,-28}})));
        Components.Tissue respiratoryMuscle(
          redeclare package Blood = Blood,
          Cond=1.3751128890504e-10,
          onOxygenNeed=true)
          annotation (Placement(transformation(extent={{20,-78},{46,-52}})));
      /*Physiolibrary.Types.BusConnector busConnector
  "signals of organ bood flow resistence" annotation (Placement(
      transformation(extent={{-68,84},{-48,104}}),  iconTransformation(
        extent={{60,10},{78,28}})));*/
        Kidney.Kidney kidney(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{16,12},{36,32}})));
        Types.RealIO.FrequencyInput Sympathicus
          "Sympathetic ganglia general neural activity" annotation (Placement(
              transformation(extent={{-110,50},{-90,70}}), iconTransformation(
                extent={{0,40},{20,60}})));
      equation

        connect(busConnector, otherTissue.busConnector)  annotation (Line(
            points={{-90,90},{52,90},{52,-12},{50,-12},{50,-48},{-2,-48},{-2,
                -77.2},{-12.6,-77.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, skin.busConnector) annotation (Line(
            points={{-90,90},{52,90},{52,-6},{27.4,-6},{27.4,-13.96}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, kidney.busConnector) annotation (Line(
            points={{-90,90},{52,90},{52,34},{40,34},{40,36},{20.5,36},{20.5,28.7}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, fat.busConnector) annotation (Line(
            points={{-90,90},{52,90},{52,42},{42,42},{42,40},{-6,40},{-6,46.8},{
                -14.6,46.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, brain.busConnector) annotation (Line(
            points={{-90,90},{52,90},{52,64.8},{35.4,64.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, bone.busConnector) annotation (Line(
            points={{-90,90},{-8,90},{-8,82.8},{-14.6,82.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, skeletalMuscle.busConnector)  annotation (Line(
            points={{-90,90},{52,90},{52,-12},{50,-12},{50,-38},{-2,-38},{-2,
                -33.2},{-10.6,-33.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, respiratoryMuscle.busConnector) annotation (
            Line(
            points={{-90,90},{52,90},{52,-12},{50,-12},{50,-57.2},{43.4,-57.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(bone.BloodFlow, busConnector.bone_BloodFlow)
          annotation (Line(
            points={{-15.9,68.5},{-14,68.5},{-14,58},{-50,58},{-50,80},{-90,80},{
                -90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(brain.BloodFlow, busConnector.brain_BloodFlow)
          annotation (Line(
            points={{34.1,50.5},{52,50.5},{52,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(fat.BloodFlow, busConnector.fat_BloodFlow) annotation (
           Line(
            points={{-15.9,32.5},{-14,32.5},{-14,24},{-46,24},{-46,80},{-44,80},{
                -44,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(kidney.BloodFlow, busConnector.kidney_BloodFlow)
          annotation (Line(
            points={{33,17},{52,17},{52,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skin.BloodFlow, busConnector.skin_BloodFlow)
          annotation (Line(
            points={{42.4,-28},{48,-28},{48,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skeletalMuscle.BloodFlow, busConnector.skeletalMuscle_BloodFlow)
          annotation (Line(
            points={{-11.9,-47.5},{-10,-47.5},{-10,-58},{-50,-58},{-50,58},{-54,
                58},{-54,78},{-90,78},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(respiratoryMuscle.BloodFlow, busConnector.respiratoryMuscle_BloodFlow)
          annotation (Line(
            points={{42.1,-71.5},{50,-71.5},{50,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(otherTissue.BloodFlow, busConnector.otherTissue_BloodFlow)
          annotation (Line(
            points={{-13.9,-91.5},{-12,-91.5},{-12,-102},{-86,-102},{-86,76},{-90,
                76},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));

          connect(bone.BloodFlow, busConnector.Bone_BloodFlow)
          annotation (Line(
            points={{-15.9,68.5},{-14,68.5},{-14,58},{-50,58},{-50,80},{-90,80},{
                -90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(brain.BloodFlow, busConnector.Brain_BloodFlow)
          annotation (Line(
            points={{34.1,50.5},{52,50.5},{52,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(fat.BloodFlow, busConnector.Fat_BloodFlow) annotation (
           Line(
            points={{-15.9,32.5},{-14,32.5},{-14,24},{-46,24},{-46,80},{-44,80},{
                -44,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(kidney.BloodFlow, busConnector.Kidney_BloodFlow)
          annotation (Line(
            points={{33,17},{52,17},{52,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skin.BloodFlow, busConnector.Skin_BloodFlow)
          annotation (Line(
            points={{42.4,-28},{48,-28},{48,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skeletalMuscle.BloodFlow, busConnector.SkeletalMuscle_BloodFlow)
          annotation (Line(
            points={{-11.9,-47.5},{-10,-47.5},{-10,-58},{-50,-58},{-50,58},{-54,
                58},{-54,78},{-90,78},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(respiratoryMuscle.BloodFlow, busConnector.RespiratoryMuscle_BloodFlow)
          annotation (Line(
            points={{42.1,-71.5},{42.1,-70},{50,-70},{50,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(otherTissue.BloodFlow, busConnector.OtherTissue_BloodFlow)
          annotation (Line(
            points={{-13.9,-91.5},{-12,-91.5},{-12,-102},{-86,-102},{-86,76},{-90,
                76},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None));

      connect(bone.tissueConnector, busConnector.bone) annotation (Line(
          points={{-25,85.4},{-25,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
      connect(fat.tissueConnector, busConnector.fat) annotation (Line(
          points={{-25,49.4},{-25,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
      connect(skeletalMuscle.tissueConnector, busConnector.skeletalMuscle)
        annotation (Line(
          points={{-21,-30.6},{-21,88},{-22,88},{-22,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
      connect(otherTissue.tissueConnector, busConnector.otherTissue)
        annotation (Line(
          points={{-23,-74.6},{-23,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
      connect(brain.tissueConnector, busConnector.brain) annotation (Line(
          points={{25,67.4},{24,67.4},{24,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
      connect(respiratoryMuscle.tissueConnector, busConnector.respiratoryMuscle)
        annotation (Line(
          points={{33,-54.6},{32,-54.6},{32,-36},{2,-36},{2,90},{-90,90}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None));
        connect(bone.port_a, port_a[1]) annotation (Line(
            points={{-12,75},{-12,76},{72,76},{72,-4.375},{100,-4.375}},
            color={127,0,0},
            thickness=0.5));
        connect(brain.port_a, port_a[2]) annotation (Line(
            points={{38,57},{38,58},{72,58},{72,-3.125},{100,-3.125}},
            color={127,0,0},
            thickness=0.5));
        connect(fat.port_a, port_a[3]) annotation (Line(
            points={{-12,39},{-12,40},{72,40},{72,-1.875},{100,-1.875}},
            color={127,0,0},
            thickness=0.5));
        connect(kidney.port_a, port_a[4]) annotation (Line(
            points={{42,22},{72,22},{72,-0.625},{100,-0.625}},
            color={127,0,0},
            thickness=0.5));
        connect(skin.port_a, port_a[5]) annotation (Line(
            points={{53.2,-22},{72,-22},{72,0.625},{100,0.625}},
            color={127,0,0},
            thickness=0.5));
        connect(skeletalMuscle.port_a, port_a[6]) annotation (Line(
            points={{-8,-41},{72,-41},{72,1.875},{100,1.875}},
            color={127,0,0},
            thickness=0.5));
        connect(respiratoryMuscle.port_a, port_a[7]) annotation (Line(
            points={{46,-65},{72,-65},{72,3.125},{100,3.125}},
            color={127,0,0},
            thickness=0.5));
        connect(otherTissue.port_a, port_a[8]) annotation (Line(
            points={{-10,-85},{72,-85},{72,4.375},{100,4.375}},
            color={127,0,0},
            thickness=0.5));
        connect(bone.port_b, port_b[1]) annotation (Line(
            points={{-38,75},{-38,74},{-56,74},{-56,-4.375},{-100,-4.375}},
            color={127,0,0},
            thickness=0.5));
        connect(brain.port_b, port_b[2]) annotation (Line(
            points={{12,57},{12,56},{-56,56},{-56,-3.125},{-100,-3.125}},
            color={127,0,0},
            thickness=0.5));
        connect(fat.port_b, port_b[3]) annotation (Line(
            points={{-38,39},{-38,38},{-56,38},{-56,-1.875},{-100,-1.875}},
            color={127,0,0},
            thickness=0.5));
        connect(kidney.port_b, port_b[4]) annotation (Line(
            points={{10.2,22},{-56,22},{-56,-0.625},{-100,-0.625}},
            color={127,0,0},
            thickness=0.5));
        connect(skin.port_b, port_b[5]) annotation (Line(
            points={{15.04,-22},{-56,-22},{-56,0.625},{-100,0.625}},
            color={127,0,0},
            thickness=0.5));
        connect(skeletalMuscle.port_b, port_b[6]) annotation (Line(
            points={{-34,-41},{-56,-41},{-56,1.875},{-100,1.875}},
            color={127,0,0},
            thickness=0.5));
        connect(respiratoryMuscle.port_b, port_b[7]) annotation (Line(
            points={{20,-65},{-56,-65},{-56,3.125},{-100,3.125}},
            color={127,0,0},
            thickness=0.5));
        connect(otherTissue.port_b, port_b[8]) annotation (Line(
            points={{-36,-85},{-56,-85},{-56,4.375},{-100,4.375}},
            color={127,0,0},
            thickness=0.5));
        connect(Sympathicus, bone.Ganglia) annotation (Line(points={{-100,60},{
                -48,60},{-48,92},{-23.7,92},{-23.7,81.5}}, color={0,0,127}));
        connect(Sympathicus, fat.Ganglia) annotation (Line(points={{-100,60},{-14,
                60},{-14,54},{-8,54},{-8,45.5},{-23.7,45.5}}, color={0,0,127}));
        connect(Sympathicus, brain.Ganglia) annotation (Line(points={{-100,60},{
                -48,60},{-48,92},{26.3,92},{26.3,63.5}}, color={0,0,127}));
        connect(Sympathicus, skeletalMuscle.Ganglia) annotation (Line(points={{
                -100,60},{-14,60},{-14,54},{-8,54},{-8,38},{-6,38},{-6,-24},{
                -19.7,-24},{-19.7,-34.5}}, color={0,0,127}));
        connect(Sympathicus, otherTissue.Ganglia) annotation (Line(points={{-100,
                60},{-100,-78.5},{-21.7,-78.5}}, color={0,0,127}));
        connect(Sympathicus, respiratoryMuscle.Ganglia) annotation (Line(points={
                {-100,60},{-14,60},{-14,54},{-8,54},{-8,38},{-6,38},{-6,-24},{4,
                -24},{4,-42},{34.3,-42},{34.3,-58.5}}, color={0,0,127}));
        annotation (
          Documentation(info="<HTML>
<PRE>
Blood resistance in peripheral organs except hepatic artery, gastro interstitional tract, vena porte, liver and liver veins.
</PRE>
</HTML>
",     revisions="<html>
<ul>
<li><i>  </i>
       </li>
<li><i> january 2009 </i><br>
       by Marek Matejak in Modelica initially implemented (consulted with Jiri Kofranek), Charles University, Prague<br>
       orginaly described by Tom Coleman in QHP 2008 beta 3, University of Mississippi Medical Center
       </li>
</ul>
</html>"), Icon(graphics={Text(
                extent={{-100,-128},{100,-100}},
                lineColor={0,0,255},
                textString="%name")}));
      end Peripheral;

      model Splanchnic
        extends Physiolibrary.Icons.PerfusionDO;
        extends Physiolibrary.Icons.GITract;

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a[2](redeclare package
            Medium = Blood) "Blood inflow" annotation (Placement(transformation(
                extent={{90,-10},{110,10}}, rotation=0), iconTransformation(
                extent={{90,-10},{110,10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Blood) "Blood outflow" annotation (Placement(transformation(extent=
                  {{-110,-10},{-90,10}}, rotation=0), iconTransformation(extent={
                  {-110,-10},{-90,10}})));

      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{56,-56},{76,-36}}), iconTransformation(
              extent={{-108,42},{-92,58}})));

      Physiolibrary.Fluid.Components.ElasticVessel portalVein(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
        stateName="SplanchnicVeins.Vol",
        useExternalPressureInput=true,
        useV0Input=true,
        useComplianceInput=false,
          volume_start=0.00100999,
          Compliance=4.6878848490354e-07,
        nPorts=3)
        annotation (Placement(transformation(extent={{-16,-10},{5,11}})));
        Components.Tissue GITract(redeclare package Blood = Blood, Cond=
              1.4001149415786e-09)
          annotation (Placement(transformation(extent={{34,-12},{58,12}})));
      Physiolibrary.Types.Constants.PressureConst ExternalPressure(k=0)
        annotation (Placement(transformation(extent={{24,20},{16,28}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst Compliance(k=
            4.6878848490354e-07)
        annotation (Placement(transformation(extent={{10,32},{2,40}})));
      Physiolibrary.Types.Constants.VolumeConst               V0(k(displayUnit=
              "ml") = 0.0005)
        annotation (Placement(transformation(extent={{-27,11},{-19,19}})));
        Liver.Liver liver(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{-56,34},{-32,58}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(extent={{6,-42},{26,-22}})));
      Modelica.Blocks.Math.Gain SplanchnicCirculation_DeoxygenatedBloodVolume(k=
           1) annotation (Placement(transformation(extent={{-8,-78},{12,-58}})));
      equation

        connect(GITract.busConnector,busConnector)           annotation (Line(
            points={{55.6,7.2},{66,7.2},{66,-46}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(portalVein.externalPressure, ExternalPressure.y)
                                                           annotation (Line(
            points={{1.85,9.95},{1.85,24},{15,24}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(portalVein.zeroPressureVolume, V0.y) annotation (Line(
          points={{-12.85,9.95},{-12.85,15},{-18,15}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(GITract.BloodFlow, busConnector.GITract_BloodFlow) annotation (
            Line(
            points={{54.4,-6},{66,-6},{66,-46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(V0.y, busConnector.PortalVein_V0)      annotation (Line(
            points={{-18,15},{-12,15},{-12,-46},{66,-46}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
            portalVein.volume = SplanchnicCirculation_DeoxygenatedBloodVolume.u;
        connect(busConnector, liver.busConnector) annotation (Line(
            points={{66,-46},{66,54.04},{-50.6,54.04}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.SplanchnicVeins_Pressure)
        annotation (Line(
          points={{22,-36},{44,-36},{44,-46},{66,-46}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(GITract.tissueConnector, busConnector.GITract) annotation (
          Line(
          points={{46,9.6},{66,9.6},{66,-46}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(portalVein.q_in[1], liver.portalVein) annotation (Line(
          points={{-5.605,-0.41},{-41.36,-0.41},{-41.36,40.24}},
          color={127,0,0},
          thickness=0.5));
        connect(portalVein.q_in[2], GITract.port_b) annotation (Line(
            points={{-5.605,0.5},{18,0.5},{18,0},{34,0}},
            color={127,0,0},
            thickness=0.5));
      connect(portalVein.q_in[3],pressureMeasure.port)  annotation (Line(
          points={{-5.605,1.41},{10,1.41},{10,-42},{16,-42}},
          color={127,0,0},
          thickness=0.5));
        connect(SplanchnicCirculation_DeoxygenatedBloodVolume.y, busConnector.SplanchnicCirculation_DeoxygenatedBloodVolume)
          annotation (Line(points={{13,-68},{66,-68},{66,-46}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(port_a[1], liver.port_a) annotation (Line(
            points={{100,-2.5},{82,-2.5},{82,46},{-24.8,46}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a[2], GITract.port_a) annotation (Line(
            points={{100,2.5},{80,2.5},{80,0},{58,0}},
            color={127,0,0},
            thickness=0.5));
        connect(liver.port_b, port_b) annotation (Line(
            points={{-62.96,46},{-86,46},{-86,0},{-100,0}},
            color={127,0,0},
            thickness=0.5));
        connect(GITract.Ganglia, busConnector.GangliaGeneral_NA) annotation (Line(
              points={{47.2,6},{47.2,-46},{66,-46}}, color={0,0,127}));
        annotation (       Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-104,-76},{110,-98}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>", info="<html>
<p>Blood volume (and pressures) distribution between </p>
<p><ul>
<li>pulmonary arteries, </li>
<li>pulmonary veins and </li>
<li>pulmonary capilaries.</li>
</ul></p>
<p>Blood flow through ventilated alveoli.</p>
</html>"));
      end Splanchnic;

      model SystemicCirculationFullDynamic
        extends Physiolibrary.Icons.SystemicCirculation;

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Blood) "Blood inflow" annotation (Placement(transformation(extent={
                  {98,-10},{118,10}}, rotation=0), iconTransformation(extent={{90,
                  -10},{110,10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Blood) "Blood outflow" annotation (Placement(transformation(extent=
                  {{-104,4},{-84,24}}, rotation=0), iconTransformation(extent={{-110,
                  -10},{-90,10}})));

        /*
  Library.PressureFlow.NegativePressureFlow fromSystemicVeins annotation (
      Placement(transformation(extent={{-110,-10},{-90,10}}),iconTransformation(
          extent={{-112,44},{-92,64}})));
  Library.PressureFlow.PositivePressureFlow systemicArteries
    annotation (Placement(transformation(extent={{88,-10},{108,10}}),
        iconTransformation(extent={{90,46},{110,66}})));
*/

      Physiolibrary.Fluid.Components.ElasticVessel systemicArtys(redeclare
            package Medium =                                                                Blood,
        stateName="SystemicArtys.Vol",
        useV0Input=true,
        useComplianceInput=false,
        volume_start=0.00100036,
        Compliance=1.1625954425608e-08,
        useExternalPressureInput=false,
        ExternalPressure=0,
          nPorts=14)
        annotation (Placement(transformation(extent={{65,-10},{86,11}})));
      Physiolibrary.Types.Constants.VolumeConst               V0_artys(k=0.00085)
        annotation (Placement(transformation(extent={{98,18},{88,28}})));
      Physiolibrary.Types.Constants.HydraulicComplianceConst
        SystemicVeinsCompliance(k=6.645545561992547e-007)
        annotation (Placement(transformation(extent={{-27,10},{-35,18}})));
        Physiolibrary.Organs.Systems.Peripheral peripheral(redeclare package
            Blood = Blood)
          annotation (Placement(transformation(extent={{-2,0},{26,28}})));
      Fluid.Sources.VolumeInflowSource              volumeCorrections(redeclare
            package Medium =                                                                     Blood,
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,24},{-42,38}})));
        Physiolibrary.Organs.Components.SystemicVeinsElacticBloodCompartment
          systemicVeinsElacticBloodCompartment(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
            nPorts=10)
          annotation (Placement(transformation(extent={{-56,-10},{-36,10}})));
      Physiolibrary.Types.Constants.PressureConst SystemicVeinsExternalPressure(
          k=0)
        annotation (Placement(transformation(extent={{-36,16},{-43,23}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{36,40},{56,60}}), iconTransformation(extent=
               {{-110,32},{-94,48}})));
        Physiolibrary.Organs.Components.CollapsingVeins collapsedVeins(redeclare
            package Medium = Blood)                                                                     annotation (
            Placement(transformation(
              extent={{-10,10.5},{10,-10.5}},
              rotation=180,
              origin={-84.5,0})));
      Physiolibrary.Fluid.Components.HydrostaticColumn
        gravityHydrostaticDifference(redeclare package Medium = Blood,     useHeightInput=true)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={61,35})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Blood)
        annotation (Placement(transformation(
            extent={{8.5,-8.5},{-8.5,8.5}},
            origin={78.5,45.5})));
        Modelica.Blocks.Math.Gain G(k=9.81) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={34,26})));
        Physiolibrary.Organs.Systems.Splanchnic splanchnicCirculation(redeclare
            package Blood = Blood)
          annotation (Placement(transformation(extent={{-2,-42},{36,-4}})));
          Physiolibrary.Fluid.Components.Conductor legsArtys(redeclare package
            Medium =                                                                    Blood, Conductance=
            5.0004105056377e-09)
        annotation (Placement(transformation(extent={{80,-86},{64,-70}})));
      Physiolibrary.Types.Constants.PressureConst const8(k=0)
        annotation (Placement(transformation(extent={{93,-68},{86,-61}})));
      Physiolibrary.Fluid.Components.HydrostaticColumn
        hydrostaticDifference(redeclare package Medium = Blood,                   useHeightInput=true)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={50,-62})));
        Physiolibrary.Organs.Components.SequesteredBlood sequesteredBlood(redeclare
            package Blood =                                                                         Blood,
          data={{0,0,10^(-10)},{50,97,1.0},{200,150,0.5}},
          pressureControledCompartment(stateName="BVSeqArtys.Vol"),
          initialVol=5.00044e-05)
          annotation (Placement(transformation(extent={{80,-88},{100,-68}})));
        Physiolibrary.Organs.Components.SequesteredBlood sequesteredBlood1(redeclare
            package Blood =                                                                          Blood,
          data={{0,-100,2.00},{150,11,0.11},{600,50,0.15}},
          pressureControledCompartment(stateName="BVSeqVeins.Vol"),
          initialVol=0.000120691)
          annotation (Placement(transformation(extent={{-62,-82},{-44,-64}})));
          Physiolibrary.Fluid.Components.Conductor legsVeins(redeclare package
            Medium =                                                                    Blood, Conductance=
            1.2501026264094e-08)
        annotation (Placement(transformation(extent={{-42,-80},{-28,-66}})));
      Physiolibrary.Fluid.Components.HydrostaticColumn
        hydrostaticDifference1(redeclare package Medium = Blood,
        useHeightInput=true,
        usePumpEffect=true)
        annotation (Placement(transformation(extent={{-5,-78},{-25,-58}})));
      Physiolibrary.Types.Constants.PressureConst             const12(k=0)
        annotation (Placement(transformation(extent={{-52,-60},{-59,-53}})));
      Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure1(redeclare
            package Medium =                                                                  Blood)
        annotation (Placement(transformation(extent={{76,-38},{96,-18}})));
      equation
      connect(systemicArtys.zeroPressureVolume, V0_artys.y) annotation (Line(
          points={{68.15,9.95},{68.15,23},{86.75,23}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(busConnector, peripheral.busConnector)          annotation (
            Line(
            points={{46,50},{46,23.38},{4.3,23.38}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(SystemicVeinsCompliance.y, systemicVeinsElacticBloodCompartment.Compliance)
          annotation (Line(
            points={{-36,14},{-38.2,14},{-38.2,10},{-40,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector,systemicVeinsElacticBloodCompartment. busConnector)
          annotation (Line(
            points={{46,50},{-26,50},{-26,6.1},{-36.2,6.1}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.ExternalPressure,
          SystemicVeinsExternalPressure.y)
          annotation (Line(
            points={{-46,10},{-46,19.5},{-43.875,19.5}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.BloodVolume_change, volumeCorrections.solutionFlow)
        annotation (Line(
          points={{46,50},{-35,50},{-35,35.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
        connect(collapsedVeins.ExternalPressure, busConnector.Thorax_AvePressure)
          annotation (Line(
            points={{-90.5,2.1},{-80,2.1},{-80,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinus_Pressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(gravityHydrostaticDifference.height, busConnector.CarotidSinusHeight)
          annotation (Line(
            points={{50,35},{46,35},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(gravityHydrostaticDifference.q_up,pressureMeasure.port)
          annotation (Line(
            points={{71,39},{80,39},{80,37},{78.5,37}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
      connect(pressureMeasure.pressure, busConnector.CarotidSinusArteryPressure)
        annotation (Line(
          points={{73.4,42.1},{46,42.1},{46,50}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(systemicVeinsElacticBloodCompartment.Pressure, busConnector.SystemicVeins_Pressure)
          annotation (Line(
            points={{-56,-4},{-56,-28},{46,-28},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(systemicVeinsElacticBloodCompartment.V0, busConnector.SystemicVeins_V0)
          annotation (Line(
            points={{-52.8,10},{-52.8,50},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(V0_artys.y, busConnector.SystemicArtys_V0) annotation (Line(
            points={{86.75,23},{70,23},{70,22},{46,22},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(collapsedVeins.q_out, port_b) annotation (Line(
            points={{-94.5,-1.22465e-15},{-96.25,-1.22465e-15},{-96.25,14},{-94,
                14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(busConnector.Gravity_Gz, G.u) annotation (Line(
            points={{46,50},{46,38},{34,38},{34,30.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));

        connect(splanchnicCirculation.busConnector, busConnector) annotation (
            Line(
            points={{-2,-13.5},{-2,50},{46,50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));

        connect(legsArtys.q_in,sequesteredBlood. referencePoint) annotation (Line(
            points={{80,-78},{90,-78}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(sequesteredBlood.ExternalPressure,const8. y) annotation (Line(
            points={{81,-68},{81,-64.5},{85.125,-64.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(legsArtys.q_out,hydrostaticDifference. q_down) annotation (Line(
            points={{64,-78},{58,-78},{58,-70},{62,-70},{62,-66},{64,-66},{64,-66.2},{
                59.8,-66.2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(sequesteredBlood1.ExternalPressure,const12. y) annotation (Line(
            points={{-61.1,-64},{-61.1,-56.5},{-59.875,-56.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood1.referencePoint,legsVeins. q_in) annotation (
            Line(
            points={{-53,-73},{-42,-73}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(legsVeins.q_out,hydrostaticDifference1. q_down) annotation (
            Line(
            points={{-28,-73},{-28,-72.2},{-24.8,-72.2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(hydrostaticDifference1.height, busConnector.LowerTorsoVeinHeight)
          annotation (Line(
            points={{-4,-68},{46,-68},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(hydrostaticDifference1.pumpEffect, busConnector.Exercise_MusclePump_Effect)
          annotation (Line(
            points={{-15,-58},{46,-58},{46,50}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(hydrostaticDifference.height, busConnector.LowerTorsoArtyHeight)
          annotation (Line(
            points={{39,-62},{32,-62},{32,-46},{36,-46},{36,-30},{46,-30},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood1.Vol, busConnector.LegVeins_DeoxygenatedBloodVolume)
          annotation (Line(
            points={{-62,-69.4},{-58,-69.4},{-58,-90},{46,-90},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sequesteredBlood.Vol, busConnector.LegArtys_OxygenatedBloodVolume)
          annotation (Line(
            points={{80,-74},{80,-90},{46,-90},{46,50}},
            color={0,0,127},
            smooth=Smooth.None));

      connect(systemicArtys.fluidVolume, busConnector.SystemicArtys_OxygenatedBloodVolume)
        annotation (Line(
          points={{86,-7.9},{72,-7.9},{72,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(systemicVeinsElacticBloodCompartment.Vol, busConnector.SystemicVeins_DeoxygenatedBloodVolume)
        annotation (Line(
          points={{-50,-10},{-50,-28},{46,-28},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(pressureMeasure1.pressure, busConnector.SystemicArtys_Pressure)
        annotation (Line(
          points={{92,-32},{98,-32},{98,-42},{46,-42},{46,50}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
        connect(systemicArtys.q_in[1], gravityHydrostaticDifference.q_down)
          annotation (Line(
            points={{75.395,-0.7675},{52,-0.7675},{52,14},{102,14},{102,30.8},{
                70.8,30.8}},
            color={127,0,0},
            thickness=0.5));

        connect(hydrostaticDifference.q_up, systemicArtys.q_in[2]) annotation (Line(
            points={{60,-58},{64,-58},{64,-14},{60,-14},{60,-0.5725},{75.395,
                -0.5725}},
            color={127,0,0},
            thickness=0.5));
        connect(pressureMeasure1.port, systemicArtys.q_in[3]) annotation (Line(
            points={{86,-38},{86,-44},{64,-44},{64,-14},{60,-14},{60,-0.3775},{
                75.395,-0.3775}},
            color={127,0,0},
            thickness=0.5));

        connect(port_a, systemicArtys.q_in[4]) annotation (Line(
            points={{108,0},{108,14},{54,14},{54,-0.1825},{75.395,-0.1825}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, port_a) annotation (Line(
            points={{108,0},{108,0}},
            color={127,0,0},
            thickness=0.5));

        connect(peripheral.port_a, systemicArtys.q_in[5:12]) annotation (Line(
            points={{34.4,14},{52,14},{52,1.3775},{75.395,1.3775}},
            color={127,0,0},
            thickness=0.5));
        connect(splanchnicCirculation.port_a, systemicArtys.q_in[13:14])
          annotation (Line(
            points={{36,-23},{50,-23},{50,1.7675},{75.395,1.7675}},
            color={127,0,0},
            thickness=0.5));
        connect(systemicVeinsElacticBloodCompartment.port_b, collapsedVeins.q_in)
          annotation (Line(
            points={{-56,0},{-64.25,0},{-64.25,-1.66533e-15},{-74.5,-1.66533e-15}},
            color={127,0,0},
            thickness=0.5));

        connect(collapsedVeins.q_in, splanchnicCirculation.port_b) annotation (
            Line(
            points={{-74.5,-1.55431e-15},{-68,-1.55431e-15},{-68,-23},{-2,-23}},
            color={127,0,0},
            thickness=0.5));
        connect(systemicVeinsElacticBloodCompartment.port_a[1], volumeCorrections.q_out)
          annotation (Line(
            points={{-36,-0.45},{-18,-0.45},{-18,40},{-48,40},{-48,31},{-42,31}},
            color={127,0,0},
            thickness=0.5));

        connect(systemicVeinsElacticBloodCompartment.port_a[2],
          hydrostaticDifference1.q_up) annotation (Line(
            points={{-36,-0.35},{-25,-0.35},{-25,-64}},
            color={127,0,0},
            thickness=0.5));
        connect(systemicVeinsElacticBloodCompartment.port_a[3:10], peripheral.port_b)
          annotation (Line(
            points={{-36,0.45},{-18,0.45},{-18,14},{-10.12,14}},
            color={127,0,0},
            thickness=0.5));
        connect(peripheral.Sympathicus, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{13.4,21},{13.4,50},{46,50}}, color={0,0,127}));
       annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                -100},{100,100}}),   graphics={Text(
                extent={{42,46},{74,46}},
                lineColor={0,0,255},
                textString="Carotid Artery Pressure")}),
                                       Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-104,-54},{110,-76}},
                lineColor={0,0,255},
                textString="%name")}),
        Documentation(revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>", info="<html>
<p>Blood volume (and pressure) distributions between </p>
<p><ul>
<li>systemic arteries, </li>
<li>systemic veins and</li>
<li>portal (splanchnic) vein.</li>
</ul></p>
<p>Blood flow throught: </p>
<p><ul>
<li>GIT, hepatic artery, liver</li>
<li>Kidney</li>
<li>CNS</li>
<li>Skeletal muscle</li>
<li>Respiratory muscle</li>
<li>Skin</li>
<li>Bones</li>
<li>Adipose tissue</li>
<li>Other tissue</li>
</ul></p>
</html>"));
      end SystemicCirculationFullDynamic;

      model CardioVascularSystem
        extends Physiolibrary.Icons.CardioVascular;
        //  extends Physiomodel.Library.Utilities.DynamicState(stateName="BloodVol.Vol", initType=Library.Utilities.Init.NoInit);

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

        Heart.Heart heart(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{-2,-6},{24,20}})));
        Physiolibrary.Organs.Lungs.Components.PulmonaryCirculation pulmonary(
            redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{2,50},{30,78}})));
        Systemic systemic(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{-2,-68},{32,-34}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-38,-10},{-16,12}}),iconTransformation(extent=
               {{-100,60},{-60,100}})));
        Physiolibrary.Organs.Blood.RedCells redCells
          annotation (Placement(transformation(extent={{-34,24},{-54,44}})));

      /*initial equation
  if STEADY then
     bloodProperties.feedback.y = 0;
  end if;
*/

        Physiolibrary.Organs.Blood.BloodPropertiesBase bloodProperties
          annotation (Placement(transformation(extent={{-36,-50},{-56,-30}})));
      equation
        connect(busConnector, pulmonary.busConnector) annotation (Line(
            points={{-27,1},{-26,1},{-26,71},{2,71}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, systemic.busConnector) annotation (Line(
            points={{-27,1},{-26,1},{-26,-44.2},{-2.34,-44.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, redCells.busConnector)    annotation (Line(
            points={{-27,1},{-26,1},{-26,40.8},{-36.2,40.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(heart.leftVentricle, systemic.port_a) annotation (Line(
            points={{21.4,-0.8},{21.4,0},{32,0},{32,-51}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemic.port_b, heart.rightAtrium) annotation (Line(
            points={{-2,-51},{-4,-51},{-4,14.8},{0.6,14.8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonary.q_in, heart.rightVentricle) annotation (Line(
            points={{2,64},{-8,64},{-8,0},{0.6,0},{0.6,-0.8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonary.q_out, heart.leftAtrium) annotation (Line(
            points={{30,64},{36,64},{36,16},{20,16},{20,14.54},{21.14,14.54}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));

      //  stateValue = bloodProperties.BloodVolume1.y;

        connect(bloodProperties.busConnector, busConnector) annotation (Line(
            points={{-36.6,-33.2},{-36.6,-32},{-27,-32},{-27,1}},
            color={0,0,255},
            thickness=0.5));
        connect(heart.Pericardium, busConnector.Pericardium_Pressure) annotation (
           Line(points={{16.2,20},{16.2,24},{-27,24},{-27,1}}, color={0,0,127}));
        connect(heart.Sympathicus, busConnector.GangliaGeneral_NA) annotation (
            Line(points={{9.96,9.6},{9.96,10},{-26,10},{-26,6},{-27,6},{-27,1}},
              color={0,0,127}));
        connect(heart.Parasympathicus, busConnector.VagusNerve_NA_Hz) annotation (
           Line(points={{2.94,4.4},{2.94,4},{-28,4},{-28,1},{-27,1}}, color={0,0,
                127}));
        annotation ( Documentation(info="<html>
<p><h4><font color=\"#008000\">Cardiovascular system</font></h4></p>
<p><font style=\"color: #008000; \">Connect heart with pulmonary and systemic part. This connection contains pressures and blood flows before and after heart.</font></p>
<p><font style=\"color: #008000; \">Output signal variables about blood volume between lungs capilaries and systemic tissue capilaries are used in gass transport submodels like O2 or CO2.</font></p>
<p><font style=\"color: #008000; \">Output signal Vesseles_V0 is used for systemic veins collapsing in massive blood lost.</font></p>
<p><font style=\"color: #008000; \">The blood properties convert known variables values to another meanings (haematocrit, viscosity, ..).</font></p>
<p><font style=\"color: #008000; \">Red cells contains volume, loss and gains all red blood cells.</font></p>
</html>",   revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-116,-96},{126,-130}},
                lineColor={0,0,255},
                textString="%name")}));
      end CardioVascularSystem;

    end Systems;

    package Components
      model Tissue
        extends Physiolibrary.Icons.Microcirculation;

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

        parameter Physiolibrary.Types.HydraulicConductance Cond;

        parameter Boolean onViscosity=true, onAnesthesia=true, onAngiogenesis=true, onAngiotensinII=true, onVasopressin=true, onCatecholamines=true, onOxygenOnly=true, onOxygenAndCarbonDioxide=false, onOxygenNeed=false, onExercise=false;

        parameter Real[:,3] VasculatureConductanceOnPO2 = {{41,1.2,0},{51,1.0,-0.03},{61,0.8,0}};
        parameter Real[:,3] PO2OnConductance = {{10,2.0,0},{30,1.0,0}};
        parameter Real[:,3] Angiotensin2Effect = {{0.0,1.05,0},{1.3,1.00,-0.08},{3.5,0.50,0}};
        parameter Real[:,3] AlphaReceptorsEffect = {{0.0,1.3,0},{1.0,1.0,-0.3},{5.0,0.1,0}};
        parameter Real[:,3] VasopressinEffect = {{0.8,1.0,0},{3.0,0.1,0}};
        parameter Physiolibrary.Types.Time VasculatureHalfTime=30*86400*Modelica.Math.log(2);

        parameter Boolean FunctionFailed=false "Function failed";

      Physiolibrary.Blocks.Factors.Spline A2Effect(
          Xscale=1e-9,
        UsePositiveLog10=true,
          data=Angiotensin2Effect,
          enabled=onAngiotensinII)
        annotation (Placement(transformation(extent={{-8,40},{12,60}})));
      //  Xscale=1e-9/1.046,
      Physiolibrary.Blocks.Factors.Spline ADHEffect(
          Xscale=1e-9,
        UsePositiveLog10=true,
          data=VasopressinEffect,
          enabled=onVasopressin) "0.8 pg/ml = 0.8e-9 kg/m3"
        annotation (Placement(transformation(extent={{-8,30},{12,50}})));
      //  Xscale=1e-9/1.084,
      Physiolibrary.Types.Constants.HydraulicConductanceConst BasicConductance(k=2*Cond)
        annotation (Placement(transformation(extent={{-18,76},{-6,88}})));
      Physiolibrary.Blocks.Factors.Normalization Anesthesia(enabled=onAnesthesia)
        annotation (Placement(transformation(extent={{-8,50},{12,70}})));
      Components.ViscosityConductance            Viscosity(redeclare package
            Blood = Blood)
        annotation (Placement(transformation(extent={{12,58},{-8,78}})));
        Physiolibrary.Blocks.Factors.SplineLagOrZero              Vasculature(
          FunctionFailed=FunctionFailed,
        Xscale=101325/760,
          data=VasculatureConductanceOnPO2,
          HalfTime=VasculatureHalfTime,
          enabled=onAngiogenesis)
          annotation (Placement(transformation(extent={{-8,-18},{12,2}})));
      //    stateName="GITract-Vasculature.Effect",
        Components.AlphaReceptors AplhaReceptors(
          redeclare package Blood = Blood,
          data=AlphaReceptorsEffect,
          Switch=not onCatecholamines,
          Setting=1)
          annotation (Placement(transformation(extent={{-8,16},{12,36}})));
      Physiolibrary.Fluid.Components.Conductor arterioles(redeclare package
            Medium =
              Blood, useConductanceInput=true)
          annotation (Placement(transformation(extent={{12,-102},{-8,-82}})));
      Physiolibrary.Blocks.Factors.Spline pO2OnConductance(
                     Xscale=101325/760, data=PO2OnConductance,
        enabled=onOxygenOnly)
        annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));

      Physiolibrary.Types.TissueBusConnector tissueConnector annotation (
          Placement(transformation(extent={{-94,0},{-74,20}}),
            iconTransformation(extent={{-20,60},{20,100}})));
      Physiolibrary.Blocks.Factors.Spline TensionEffect(data={{0.0,2.2,0},{1.0,
            1.0,-0.5},{2.0,0.6,0}}, enabled=onOxygenAndCarbonDioxide)
        annotation (Placement(transformation(extent={{-8,-72},{12,-52}})));
      Physiolibrary.Blocks.Factors.Spline PO2OnTension(data={{22,0.0,0},{36,1.0,
            0.02},{60,1.2,0}}, Xscale=101325/760,
        enabled=onOxygenAndCarbonDioxide)
        annotation (Placement(transformation(extent={{-28,-48},{-8,-28}})));
      Physiolibrary.Blocks.Factors.Spline PCO2OnTension(
                                    Xscale=101325/760,
        enabled=onOxygenAndCarbonDioxide,
        data={{20,1.8,0},{55,1.0,-0.05},{75,0.0,0}})
        "FIX: normal venous pCO2 in brain to 55mmHg (because of RQ close to 1)"
        annotation (Placement(transformation(extent={{-28,-56},{-8,-36}})));
        Physiolibrary.Types.Constants.OneConst one
          annotation (Placement(transformation(extent={{-30,-30},{-22,-22}})));
        Components.MetabolicVasodilation metabolicVasolidation(
          data={{50,1.0,0},{1000,3.5,0.003},{3000,5.5,0}},
          Xscale=1/1362657.193569,
          OnTau(displayUnit="min") = 12,
          OffTau(displayUnit="min") = 60,
          enabled=onOxygenNeed)
          annotation (Placement(transformation(extent={{-8,-82},{12,-62}})));
      //  stateName="SkeletalMuscle-MetabolicVasodilation.Effect",
      Physiolibrary.Blocks.Factors.Normalization MusclePumping_SkeletalMuscle(enabled=
              onExercise)
        annotation (Placement(transformation(extent={{12,-2},{-8,18}})));
      Physiolibrary.Blocks.Math.Add add(k=1)
        annotation (Placement(transformation(extent={{4,-4},{-4,4}},
              rotation=90,
              origin={32,18})));
      Physiolibrary.Blocks.Factors.Spline RateEffect(data={{0,0.0,0.04},{60,1.0,
            0.0}}, Xscale=1/60,
          enabled=onExercise)
        annotation (Placement(transformation(extent={{42,20},{22,40}})));
      Physiolibrary.Blocks.Factors.Spline IntensityEffect(data={{0,0.0,0.007},{
            300,1.0,0.0}}, enabled=onExercise)
        annotation (Placement(transformation(extent={{42,30},{22,50}})));
        Physiolibrary.Types.Constants.OneConst one1
          annotation (Placement(transformation(extent={{18,50},{26,58}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Blood) "Blood inflow" annotation (Placement(transformation(extent={{90,-100},
                  {110,-80}}, rotation=0), iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure
                                              volumeFlowMeasure(redeclare
            package
            Medium = Blood)                               annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            origin={58,-90})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Blood) "Blood outflow" annotation (Placement(transformation(extent={{-116,
                  -100},{-96,-80}}, rotation=0), iconTransformation(extent={{-110,-10},
                  {-90,10}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput
                                              BloodFlow
                                                 annotation (Placement(transformation(
                extent={{78,-68},{90,-56}}), iconTransformation(extent={{60,-60},{80,
                  -40}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-100,80},{-80,100}}), iconTransformation(
              extent={{60,40},{100,80}})));
        Fluid.Sensors.Concentration            vasopressin(redeclare function
            GetConcentration = Physiolibrary.Media.Blood.vasopressin,
                                                           redeclare package
            Medium =
              Blood)
          annotation (Placement(transformation(extent={{-44,32},{-24,52}})));
        Fluid.Sensors.Fraction                 anesthesiaVascularConductance(
            redeclare function GetFraction =
              Physiolibrary.Media.Blood.anesthesiaVascularConductance,
            redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-94,50},{-74,70}})));
        Types.RealIO.FrequencyInput Ganglia
          "Sympathetic ganglia general neural activity" annotation (Placement(
              transformation(extent={{-40,8},{-20,28}}),
                                                       iconTransformation(
                extent={{0,40},{20,60}})));
        Fluid.Sensors.PartialPressure pO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.Oxygen_gas(),
          redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-64,-20},{-84,0}})));
        Fluid.Components.ElasticVessel elasticVessel(
          redeclare package Medium = Blood,
          massFractions_start=Blood.VenousDefault,
          useSubstances=true,
          volume_start=1e-06,
          Compliance=7.5006157584566e-10,
          nPorts=9)
          annotation (Placement(transformation(extent={{-60,-100},{-40,-80}})));
      Fluid.Components.Conductor venules(
          redeclare package Medium = Blood,
          useConductanceInput=false,
          Conductance=2*Cond)
          annotation (Placement(transformation(extent={{-72,-100},{-92,-80}})));
        Fluid.Sensors.PartialPressure pCO2(
          redeclare package stateOfMatter = Chemical.Interfaces.IdealGas,
          substanceData=Chemical.Substances.CarbonDioxide_gas(),
          redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-42,-56},{-62,-36}})));
        Fluid.Sensors.MassConcentration        angiotensin2(redeclare function
            GetMassConcentration = Physiolibrary.Media.Blood.angiotensin2,
                                                            redeclare package
            Medium =
              Blood)
          annotation (Placement(transformation(extent={{-78,32},{-58,52}})));

        Physiolibrary.Types.HydraulicConductance cond;
        outer Modelica.Fluid.System system "System wide properties";
      equation
        cond =(-port_b.m_flow/Blood.density_pTX(
          system.p_ambient,
          system.T_ambient,
          Blood.reference_X))/(port_a.p - port_b.p);
        connect(Vasculature.y,pO2OnConductance. yBase) annotation (Line(
            points={{2,-14},{2,-16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Viscosity.y, Anesthesia.yBase) annotation (Line(
            points={{2,64},{2,62}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(BasicConductance.y, Viscosity.yBase)         annotation (Line(
            points={{-4.5,82},{2,82},{2,70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PO2OnTension.y,PCO2OnTension. yBase) annotation (Line(
            points={{-18,-42},{-18,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TensionEffect.u,PCO2OnTension. y) annotation (Line(
            points={{-6,-62},{-18,-62},{-18,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(one.y, PO2OnTension.yBase) annotation (Line(
            points={{-21,-26},{-18,-26},{-18,-36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(MusclePumping_SkeletalMuscle.u,add. y) annotation (Line(
            points={{10,8},{32,8},{32,13.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.u,RateEffect. y) annotation (Line(
            points={{32,22.8},{32,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RateEffect.u, busConnector.Exercise_Metabolism_ContractionRate)
          annotation (Line(
            points={{40,30},{98,30},{98,90},{-90,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(TensionEffect.y, metabolicVasolidation.yBase) annotation (Line(
            points={{2,-66},{2,-70}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(tissueConnector.O2Need, metabolicVasolidation.O2Need) annotation (
         Line(
          points={{-84,10},{-60,10},{-60,-72},{-7.8,-72}},
          color={127,0,0},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
        connect(one1.y, IntensityEffect.yBase) annotation (Line(
            points={{27,54},{32,54},{32,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(port_a, volumeFlowMeasure.q_in) annotation (Line(
            points={{100,-90},{68,-90}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(A2Effect.y, ADHEffect.yBase) annotation (Line(
            points={{2,46},{2,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors.yBase, ADHEffect.y) annotation (Line(
            points={{2,33},{2,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Anesthesia.y, A2Effect.yBase) annotation (Line(
            points={{2,56},{2,52}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pO2OnConductance.y, TensionEffect.yBase) annotation (Line(
            points={{2,-22},{2,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(arterioles.cond, metabolicVasolidation.y) annotation (Line(
            points={{2,-86},{2,-76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors.y, MusclePumping_SkeletalMuscle.yBase) annotation (
            Line(
            points={{2,19},{2,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Vasculature.yBase, MusclePumping_SkeletalMuscle.y) annotation (Line(
            points={{2,-2},{2,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(IntensityEffect.y, RateEffect.yBase) annotation (Line(
            points={{32,36},{32,32}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(IntensityEffect.u, busConnector.Exercise_Metabolism_MotionWatts)
        annotation (Line(
          points={{40,40},{98,40},{98,90},{-90,90}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(volumeFlowMeasure.volumeFlow, BloodFlow) annotation (Line(points=
              {{58,-78},{58,-62},{84,-62}}, color={0,0,127}));
        connect(port_b, venules.q_out) annotation (Line(
            points={{-106,-90},{-92,-90}},
            color={127,0,0},
            thickness=0.5));
        connect(volumeFlowMeasure.q_out, arterioles.q_in) annotation (Line(
            points={{48,-90},{46,-90},{46,-92},{12,-92}},
            color={127,0,0},
            thickness=0.5));
        connect(pO2.partialPressure, Vasculature.u)
          annotation (Line(points={{-64,-10},{-8,-10}}, color={0,0,127}));
        connect(pO2.partialPressure, PO2OnTension.u) annotation (Line(points={{-64,-10},
                {-32,-10},{-32,-38},{-26,-38}}, color={0,0,127}));
        connect(pO2.partialPressure, pO2OnConductance.u) annotation (Line(points={{-64,
                -10},{-14,-10},{-14,-18},{-6,-18}}, color={0,0,127}));
        connect(pCO2.port_a, elasticVessel.substances.CO2) annotation (Line(
              points={{-62,-46},{-64,-46},{-64,-90},{-60,-90}}, color={158,66,200}));
        connect(pCO2.partialPressure, PCO2OnTension.u)
          annotation (Line(points={{-42,-46},{-26,-46}}, color={0,0,127}));
        connect(AplhaReceptors.GangliaGeneral, Ganglia) annotation (Line(points={{-7.8,
                20},{-16,20},{-16,18},{-30,18}}, color={0,0,127}));
        connect(arterioles.q_out, elasticVessel.q_in[1]) annotation (Line(
            points={{-8,-92},{-50.1,-92},{-50.1,-91.1556}},
            color={127,0,0},
            thickness=0.5));
        connect(venules.q_in, elasticVessel.q_in[2]) annotation (Line(
            points={{-72,-90},{-52,-90},{-52,-90.8667},{-50.1,-90.8667}},
            color={127,0,0},
            thickness=0.5));
        connect(pCO2.port, elasticVessel.q_in[3]) annotation (Line(points={{-52,-56},{-52,-74},{-50,-74},{-50,-90.5778},{-50.1,-90.5778}},
                                                                     color={0,127,255}));
        connect(pO2.port, elasticVessel.q_in[4]) annotation (Line(points={{-74,-20},{-74,-74},{-50,-74},{-50,-90.2889},{-50.1,-90.2889}},
                                                                 color={0,127,255}));
        connect(vasopressin.port, elasticVessel.q_in[5]) annotation (Line(points={{-34,32},
                {-34,-62},{-52,-62},{-52,-76},{-50,-76},{-50,-90},{-50.1,-90}},
              color={0,127,255}));
        connect(angiotensin2.port, elasticVessel.q_in[6]) annotation (Line(points={{-68,32},{-68,22},{-36,22},{-36,4},{-34,4},{-34,-62},{-52,-62},{-52,-74},{-50,
                -74},{-50,-89.7111},{-50.1,-89.7111}}, color={0,127,255}));
        connect(anesthesiaVascularConductance.port, elasticVessel.q_in[7])
          annotation (Line(points={{-84,50},{-84,26},{-66,26},{-66,22},{-34,22},{-34,-62},{-50,-62},{-50,-89.4222},{-50.1,-89.4222}},
                                                            color={0,127,255}));
        connect(AplhaReceptors.port_a, elasticVessel.q_in[8]) annotation (Line(points={{-8,24},{-8,-89.1333},{-50.1,-89.1333}},
                                                         color={0,127,255}));
        connect(Viscosity.port, elasticVessel.q_in[9]) annotation (Line(points={{12,68},{16,68},{16,-102},{-22,-102},{-22,-88},{-30,-88},{-30,-88.8444},{-50.1,
                -88.8444}}, color={0,127,255}));
        connect(elasticVessel.substances.O2, pO2.port_a) annotation (Line(
              points={{-60,-90},{-64,-90},{-64,-48},{-90,-48},{-90,-10},{-84,-10}},
              color={158,66,200}));
        connect(anesthesiaVascularConductance.F, Anesthesia.u)
          annotation (Line(points={{-73,60},{-6,60}}, color={0,0,127}));
        connect(angiotensin2.R, A2Effect.u) annotation (Line(points={{-57,42},{
                -50,42},{-50,54},{-14,54},{-14,50},{-6,50}}, color={0,0,127}));
        connect(vasopressin.C, ADHEffect.u)
          annotation (Line(points={{-23,42},{-23,40},{-6,40}}, color={0,0,127}));
        annotation (
          Documentation(info="<HTML>
<PRE>
Blood resistance in gastro interstitial tract.

</PRE>
</HTML>
",     revisions="<html>
<ul>
<li><i>  </i>
       </li>
<li><i> january 2009 </i><br>
       by Marek Matejak in Modelica initially implemented (consulted with Jiri Kofranek), Charles University, Prague<br>
       orginaly described by Tom Coleman in QHP 2008 beta 3, University of Mississippi Medical Center
       </li>
</ul>
</html>"), Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-120,-106},{80,-86}},
                lineColor={0,0,255},
                textString="%name")}));
      end Tissue;

      model SystemicVeins
        //extends QHP.Blood.OrganFlow.BaseBadDirection;
      extends Physiolibrary.Icons.Resistor;

      replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                   annotation ( choicesAllMatching = true);

      Physiolibrary.Fluid.Interfaces.FluidPort_a q_in(redeclare package Medium = Blood) "Blood inflow"
        annotation ( Placement(transformation(extent={{92,-10},{112,10}},
                                 rotation=0),
                                      iconTransformation(extent={{90,-10},{110,
                10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b q_out(redeclare package Medium = Blood) "Blood outflow"
        annotation ( Placement(transformation(extent={{-108,-12},{-88,8}},
                                 rotation=0),
                                        iconTransformation(extent={{-110,-10},{
                -90,10}})));

      Physiolibrary.Fluid.Components.Conductor     systemicVeinsConductance(redeclare
            package Medium =                                                                           Blood,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{0,-12},{-20,8}})));
      ViscosityConductance                       ViscosityEffect(redeclare
            package Blood = Blood)
        annotation (Placement(transformation(extent={{0,0},{-20,20}})));
      Physiolibrary.Blocks.Factors.Normalization ExerciseEffect
        annotation (Placement(transformation(extent={{-20,7},{0,27}})));
      Physiolibrary.Blocks.Factors.Normalization CollapseEffect
        annotation (Placement(transformation(extent={{-20,14},{0,34}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst const12(k=
            BaseConductance)
        annotation (Placement(transformation(extent={{-29,45},{-17,57}})));
        parameter Physiolibrary.Types.HydraulicConductance BaseConductance( displayUnit="ml/(mmHg.min)");

      Physiolibrary.Fluid.Sensors.FlowMeasure     flowMeasure(redeclare package
            Medium =                                                                     Blood) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            origin={80,0})));
        Modelica.Blocks.Interfaces.RealOutput BloodFlow
                                                 annotation (Placement(transformation(
                extent={{88,26},{100,38}}),  iconTransformation(extent={{60,-30},{80,-10}})));
      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-96,77},{-76,97}}), iconTransformation(
              extent={{60,10},{78,28}})));
        Modelica.Blocks.Math.Min CollapsedEffect
          annotation (Placement(transformation(extent={{88,76},{96,84}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{76,82},{84,90}})));
      Types.Constants.OneConst               one
        annotation (Placement(transformation(extent={{64,66},{72,74}})));
        Modelica.Blocks.Math.Sum V0(nin=4)
          annotation (Placement(transformation(extent={{8,70},{16,78}})));
        Modelica.Blocks.Math.Add BloodVolume
          annotation (Placement(transformation(extent={{48,90},{56,98}})));
      equation
        connect(systemicVeinsConductance.cond,ViscosityEffect. y) annotation (Line(
            points={{-10,4},{-10,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ViscosityEffect.yBase,ExerciseEffect. y) annotation (Line(
            points={{-10,12},{-10,13}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ExerciseEffect.yBase,CollapseEffect. y) annotation (Line(
            points={{-10,19},{-10,19.5},{-10.2,19.5},{-10.2,20},{-10,20},{-10,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.Exercise_MusclePump_Effect,
          ExerciseEffect.u) annotation (Line(
            points={{-86,87},{-86,17},{-18,17}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(const12.y, CollapseEffect.yBase) annotation (Line(
            points={{-15.5,51},{-10,51},{-10,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(flowMeasure.q_in, q_in) annotation (Line(
            points={{90,0},{102,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(flowMeasure.q_out, systemicVeinsConductance.q_in) annotation (
            Line(
            points={{70,0},{36,0},{36,-2},{0,-2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(systemicVeinsConductance.q_out, q_out) annotation (Line(
            points={{-20,-2},{-98,-2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(flowMeasure.massFlow, BloodFlow)
          annotation (Line(points={{80,12},{80,32},{94,32}}, color={0,0,127}));
        connect(division.y,CollapsedEffect. u1)
                                    annotation (Line(
            points={{84.4,86},{85.8,86},{85.8,82.4},{87.2,82.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(BloodVolume.y,division. u1)
                                    annotation (Line(
            points={{56.4,94},{66,94},{66,88.4},{75.2,88.4}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(one.y,CollapsedEffect. u2) annotation (Line(
          points={{73,70},{80,70},{80,77.6},{87.2,77.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(V0.y,division. u2) annotation (Line(
          points={{16.4,74},{46,74},{46,83.6},{75.2,83.6}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(busConnector.PulmonaryCirculation_V0,V0. u[1])
          annotation (Line(
            points={{-86,87},{-86,76},{6,76},{6,73.7},{7.2,73.7}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,6},{-6,6}}));
        connect(busConnector.SystemicArtys_V0,V0. u[2])
          annotation (Line(
            points={{-86,87},{-86,70},{6,70},{6,73.9},{7.2,73.9}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-2},{-6,-2}}));
        connect(busConnector.PortalVein_V0,V0. u[3]) annotation (Line(
            points={{-86,87},{-86,66},{6,66},{6,74.1},{7.2,74.1}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-6},{-6,-6}}));
        connect(busConnector.SystemicVeins_V0,V0. u[4]) annotation (Line(
            points={{-86,87},{-86,62},{6,62},{6,74.3},{7.2,74.3}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,-10},{-6,-10}}));
        connect(busConnector.RBCVol_Vol,BloodVolume. u1)
                                                  annotation (Line(
            points={{-86,87},{-86,96.4},{47.2,96.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.PlasmaVol_Vol,BloodVolume. u2)
                                                    annotation (Line(
            points={{-86,87},{-86,91.6},{47.2,91.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(CollapsedEffect.y, CollapseEffect.u) annotation (Line(points={{96.4,80},
                {100,80},{100,60},{-72,60},{-72,24},{-18,24}}, color={0,0,127}));
        connect(ViscosityEffect.port, q_in)
          annotation (Line(points={{0,10},{102,10},{102,0}}, color={0,127,255}));
        annotation ( Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Text(
                extent={{-70,-30},{70,30}},
                lineColor={0,0,0},
                textString="%BaseConductance ml/min/mmHg"), Text(
                extent={{-101,-58},{99,-30}},
                lineColor={0,0,255},
                textString="%name")}));
      end SystemicVeins;

      model SystemicVeinsElacticBloodCompartment
       extends Physiolibrary.Icons.ElasticBalloon;
       extends Physiolibrary.Fluid.Interfaces.CompositionSetup(redeclare
            replaceable package                                                              Medium =
              Physiolibrary.Media.Blood);

       parameter Integer nPorts = 0 "Number of hydraulic ports" annotation (
          Evaluate = true,
          Dialog(connectorSizing = true, group = "Ports"));

        Physiolibrary.Types.RealIO.PressureInput ExternalPressure
        "external pressure around the compartment"                              annotation (
        Placement(transformation(
            origin={0,100},
            extent={{-10,-10},{10,10}},
            rotation=270)));
        Physiolibrary.Types.RealIO.HydraulicComplianceInput Compliance( displayUnit="ml/mmHg")
        "elasticity of the stressed walls"                               annotation (
        Placement(transformation(
            origin={60,100},
            extent={{-10,-10},{10,10}},
            rotation=270)));

        Physiolibrary.Types.RealIO.PressureOutput Pressure( displayUnit="mmHg")
        "blod pressure in compartment"
          annotation (Placement(transformation(extent={{30,-110},{50,-90}}, rotation=-90)));
        Physiolibrary.Types.RealIO.VolumeOutput Vol
        "blood volume in compartment"
          annotation (Placement(transformation(extent={{-50,-110},{-30,-90}}, rotation=-90),
              iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-40,-100})));
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-88,72},{-68,92}}), iconTransformation(
              extent={{88,51},{108,71}})));
        Physiolibrary.Fluid.Components.ElasticVessel systemicVeins(
          redeclare package Medium = Medium,
          massFractions_start=massFractions_start,
          extraConcentration_start=extraConcentration_start,
          stateName="SystemicVeins.Vol",
          useComplianceInput=true,
          useExternalPressureInput=true,
          useV0Input=true,
        volume_start=initialSystemisVeinsVol,
          nPorts=4+nPorts)                                           "systemic veins"
          annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
      Physiolibrary.Blocks.Factors.Spline V0_A2_Effect(
        data={{0.0,1.05,0.0},{1.3,1.00,-0.10},{3.0,0.85,0.0}},
          Xscale=1e-9,
        UsePositiveLog10=true)
        annotation (Placement(transformation(extent={{-30,7},{-10,27}})));
      Physiolibrary.Types.Constants.VolumeConst               const4(k=0.0017)
        annotation (Placement(transformation(extent={{-32,52},{-23,43}})));
        AlphaReceptors AplhaReceptors(
          redeclare package Blood = Medium,
          data={{0.0,1.2,0.0},{1.0,1.0,-0.30},{3.0,0.6,0.0}},
          NEURALK=0.333,
          HUMORALK=0.5)
          annotation (Placement(transformation(extent={{-30,24},{-10,44}})));
        Physiolibrary.Types.RealIO.VolumeOutput V0(displayUnit="ml")
        "maximal zero pressure blood volume in compartment"
          annotation (Placement(transformation(extent={{-4.5,-4.5},{4.5,4.5}},rotation=180,
              origin={-27.5,7.5}),
              iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-68,100})));

        parameter Physiolibrary.Types.Volume initialSystemisVeinsVol = 2329.57e-6; // = 2200;// = 2980;

        Physiolibrary.Fluid.Sensors.PressureMeasure pressureMeasure(redeclare
            package Medium = Medium)
          annotation (Placement(transformation(extent={{16,-20},{36,0}})));
        Fluid.Interfaces.FluidPort_a port_a[nPorts](redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{90,-10},{110,10}}),
              iconTransformation(extent={{90,-10},{110,10}})));
        Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
                                            annotation (Placement(transformation(
                extent={{-110,-10},{-90,10}}),
                                             iconTransformation(extent={{-110,-10},
                  {-90,10}})));
        Fluid.Sensors.MassConcentration        Angiotensin2(redeclare function
            GetMassConcentration = Physiolibrary.Media.Blood.angiotensin2,
                                                            redeclare package
            Medium = Medium)
          annotation (Placement(transformation(extent={{-74,4},{-54,24}})));
        SystemicVeins                                 veins(redeclare package
            Blood =
              Medium, BaseConductance(displayUnit="ml/(mmHg.min)") = 1.2000985213531e-07)
          "scaled to coronary vessels reorganisation"
          annotation (Placement(transformation(extent={{-88,-8},{-72,8}})));
      equation
        connect(V0_A2_Effect.y, systemicVeins.zeroPressureVolume) annotation (Line(
            points={{-20,13},{-20,12},{-11,12},{-11,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors.y,V0_A2_Effect. yBase) annotation (Line(
            points={{-20,27},{-20,19}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AplhaReceptors.yBase,const4. y) annotation (Line(
            points={{-20,41},{-20,47.5},{-21.875,47.5}},
            color={0,0,127},
            smooth=Smooth.None));
        systemicVeins.volume= Vol;
        connect(systemicVeins.externalPressure, ExternalPressure) annotation (Line(
            points={{3,9},{3,67},{0,67},{0,100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(systemicVeins.compliance, Compliance) annotation (Line(
            points={{-4,9},{-4,50},{60,50},{60,100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(V0_A2_Effect.y, V0) annotation (Line(
            points={{-20,13},{-20,7.5},{-27.5,7.5}},
            color={0,0,127},
            smooth=Smooth.None));

      connect(pressureMeasure.pressure, Pressure) annotation (Line(
          points={{32,-14},{-100,-14},{-100,-40}},
          color={0,0,127},
          smooth=Smooth.None));

        connect(pressureMeasure.port, systemicVeins.q_in[1]) annotation (Line(
            points={{26,-20},{10,-20},{10,0},{-4.1,0}},
            color={127,0,0},
            thickness=0.5));
        connect(AplhaReceptors.port_a, systemicVeins.q_in[3]) annotation (Line(
            points={{-30,32},{-44,32},{-44,2},{-2,2},{-2,0},{-4.1,0}},
            color={127,0,0},
            thickness=0.5));
        connect(Angiotensin2.port, systemicVeins.q_in[2]) annotation (Line(points={{-64,4},
                {-6,4},{-6,0},{-4.1,0}},               color={0,127,255}));
        connect(AplhaReceptors.GangliaGeneral, busConnector.GangliaGeneral_NA)
          annotation (Line(points={{-29.8,28},{-78,28},{-78,82}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a[1:nPorts], systemicVeins.q_in[5:4+nPorts]) annotation (Line(
            points={{100,0},{40,0},{40,4},{12,4},{12,0},{-4.1,0}},
            color={127,0,0},
            thickness=0.5));
        connect(veins.busConnector, busConnector) annotation (Line(
            points={{-74.48,1.52},{-74.48,82},{-78,82},{-78,80},{-82,80},{-82,82},{-78,
                82}},
            color={0,0,255},
            thickness=0.5));
        connect(veins.q_out, port_b) annotation (Line(
            points={{-88,0},{-100,0}},
            color={127,0,0},
            thickness=0.5));
        connect(veins.q_in, systemicVeins.q_in[4]) annotation (Line(
            points={{-72,0},{-4,0},{-4,0},{-4.1,0}},
            color={127,0,0},
            thickness=0.5));
        connect(Angiotensin2.R, V0_A2_Effect.u) annotation (Line(points={{-53,14},
                {-38,14},{-38,17},{-28,17}}, color={0,0,127}));
       annotation (
          Documentation(info="<HTML>
<PRE>
  Elastic blood flow compartment.

</PRE>
</HTML>
",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>

<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
      end SystemicVeinsElacticBloodCompartment;

      model CollapsingVeins
        extends Physiolibrary.Icons.CollapsingVessel;
        extends Physiolibrary.Fluid.Interfaces.OnePort;

      Modelica.Blocks.Interfaces.RealInput ExternalPressure
                                                       annotation (Placement(
              transformation(extent={{40,0},{80,40}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={60,20})));

        parameter Real PR1LL( final quantity="Pressure", final displayUnit="mmHg") = 0
        "start-collapsing sucking pressure, when external pressure is zero";
      equation

         q_in.p = if (q_out.p > (PR1LL+ExternalPressure)) then q_out.p else (PR1LL+ExternalPressure);

        annotation (Icon(graphics={
              Text(
                extent={{-62,-32},{58,-58}},
                lineColor={0,0,255},
                textString="%name")}));
      end CollapsingVeins;

      model SequesteredBlood
        extends Physiolibrary.Icons.BloodSequesteredCompartment;

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

      Physiolibrary.Fluid.Interfaces.FluidPort_a referencePoint(redeclare
            package
            Medium = Blood)
        annotation ( Placement(transformation(
              extent={{-10,-110},{10,-90}}, rotation=0),
                                             iconTransformation(extent={{-10,
                -10},{10,10}})));
        Physiolibrary.Types.RealIO.PressureInput ExternalPressure
        "external pressure around the compartment"                              annotation (
        Placement(transformation(
            origin={-90,100},
            extent={{-10,-10},{10,10}},
            rotation=270)));

        Physiolibrary.Types.RealIO.PressureOutput Pressure
        "blod pressure in compartment"
          annotation (Placement(transformation(extent={{30,-110},{50,-90}}, rotation=-90)));
        Physiolibrary.Types.RealIO.VolumeOutput Vol
        "blood volume in compartment"
          annotation (Placement(transformation(extent={{-50,-110},{-30,-90}}, rotation=-90)));

      parameter Physiolibrary.Types.Volume initialVol
        "initial compartment blood volume";
       parameter Real[:,3] data;

      Physiolibrary.Blocks.Interpolation.Curve curve(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3],
        Xscale=1e-6,
        Yscale=101325/760)
        annotation (Placement(transformation(extent={{-60,50},{-40,70}})));

        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-6,40})));
        Physiolibrary.Fluid.Components.ElasticVessel pressureControledCompartment(
          redeclare package Medium = Blood,
        ZeroPressureVolume(displayUnit="l") = 0.002,
        useExternalPressureInput=true,
        volume_start=initialVol,
          nPorts=1)
        annotation (Placement(transformation(extent={{-24,-10},{-4,10}})));
      equation
        connect(curve.val, add.u2) annotation (Line(
            points={{-40,60},{-12,60},{-12,52}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ExternalPressure, add.u1) annotation (Line(
            points={{-90,100},{-90,82},{-2,82},{-2,52},{1.77636e-15,52}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, Pressure) annotation (Line(
            points={{-6,29},{-6,20},{-100,20},{-100,-40}},
            color={0,0,127},
            smooth=Smooth.None));

      connect(add.y, pressureControledCompartment.externalPressure) annotation (
         Line(
          points={{-6,29},{-6,20},{-6,9},{-7,9}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(pressureControledCompartment.fluidVolume, Vol) annotation (Line(
              points={{-4,-8},{76,-8},{76,102},{-100,102},{-100,40}}, color={0,0,127}));
        connect(pressureControledCompartment.fluidVolume, curve.u) annotation (Line(
              points={{-4,-8},{0,-8},{0,-38},{-76,-38},{-76,60},{-60,60}}, color={0,0,
                127}));
        connect(pressureControledCompartment.q_in[1], referencePoint) annotation (
            Line(
            points={{-14.1,0},{-14.1,-86},{0,-86},{0,-100}},
            color={127,0,0},
            thickness=0.5));
       annotation (
          Documentation(info="<HTML>
<PRE>
  Elastic blood flow compartment.

</PRE>
</HTML>
",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>

<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>january 2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-100,-16},{100,-32}},
                lineColor={0,0,255},
                textString="(initial %initialVol ml)")}));
      end SequesteredBlood;

      model MetabolicVasodilation
        extends Physiolibrary.Icons.BaseFactorIcon5;
        Physiolibrary.Types.RealIO.MolarFlowRateInput O2Need
                     annotation (Placement(transformation(extent={{-110,60},{-82,88}}),
              iconTransformation(extent={{-108,-10},{-88,10}})));

       parameter Boolean enabled=true "disabled => y=yBase";

       parameter Real[:,3] data = {{   50,  1.0,  0}, { 1000,  3.5,  0.003}, { 3000,  5.5,  0}};
       parameter Physiolibrary.Types.Time OnTau = 0.2;
       parameter Physiolibrary.Types.Time OffTau = 1;
       parameter Physiolibrary.Types.Fraction initialEffectValue = 1;
        parameter String stateName=getInstanceName();
        parameter Physiolibrary.Types.MolarFlowRate Xscale = 1
        "conversion scale to SI unit of x values";

      Physiolibrary.Blocks.Interpolation.Curve SteadyState(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3],
          Xscale=Xscale)
        annotation (Placement(transformation(extent={{-72,64},{-52,84}})));
      Physiolibrary.Blocks.Math.Integrator effect(
        y_start=initialEffectValue,
          k=1)  annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-28,-14})));
       // stateName=stateName,
        Modelica.Blocks.Math.Feedback feedback annotation (Placement(
              transformation(
              extent={{-8,-12},{12,-32}},
              rotation=270,
              origin={8,64})));
        Modelica.Blocks.Math.Product product1 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-22,16})));
        Modelica.Blocks.Logical.Switch switch1(u2(start=false))
          annotation (Placement(transformation(extent={{-54,24},{-34,44}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold
          annotation (Placement(transformation(extent={{-72,30},{-64,38}})));
      Physiolibrary.Blocks.Math.Reciprocal OnK annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-86,8})));
      Physiolibrary.Blocks.Math.Reciprocal OffK annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-60,8})));
      Physiolibrary.Types.Constants.TimeConst                 Constant0(k=
            OnTau) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-86,-22})));
      Physiolibrary.Types.Constants.TimeConst                 Constant1(k=
            OffTau) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-60,-22})));

        Physiolibrary.Blocks.Factors.Normalization normalization(enabled=enabled)
          annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
      equation
        connect(SteadyState.val, feedback.u1)
                                        annotation (Line(
            points={{-52,74},{-14,74},{-14,70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(effect.y, feedback.u2)     annotation (Line(
            points={{-28,-25},{-28,-68},{86,-68},{86,62},{-6,62}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SteadyState.u, O2Need)  annotation (Line(
            points={{-72,74},{-96,74}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y, effect.u)     annotation (Line(
            points={{-22,5},{-22,-2},{-28,-2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.u1, feedback.y) annotation (Line(
            points={{-16,28},{-16,40},{-14,40},{-14,53}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(switch1.y, product1.u2) annotation (Line(
            points={{-33,34},{-28,34},{-28,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greaterThreshold.u, feedback.y) annotation (Line(
            points={{-72.8,34},{-76,34},{-76,50},{-14,50},{-14,53}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greaterThreshold.y, switch1.u2) annotation (Line(
            points={{-63.6,34},{-56,34}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(OnK.y, switch1.u1)  annotation (Line(
            points={{-86,19},{-86,42},{-56,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(OffK.y, switch1.u3)  annotation (Line(
            points={{-60,19},{-60,26},{-56,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Constant1.y, OffK.u)  annotation (Line(
            points={{-60,-9.5},{-60,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Constant0.y, OnK.u)  annotation (Line(
            points={{-86,-9.5},{-86,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(effect.y, normalization.u) annotation (Line(
            points={{-28,-25},{-28,-40},{-12,-40},{-12,-10},{-8,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(yBase, normalization.yBase) annotation (Line(
            points={{0,20},{0,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(normalization.y, y) annotation (Line(
            points={{0,-14},{0,-40}},
            color={0,0,127},
            smooth=Smooth.None));
      end MetabolicVasodilation;

    model VariableResistorWithMyogenicResponse
      extends Physiolibrary.Icons.Resistor;
      extends Physiolibrary.Fluid.Interfaces.OnePort;
    /*
  Physiolibrary.Fluid.Interfaces.FluidPort_a q_in "Blood inflow"
    annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent={{-10,
            -110},{10,-90}}, rotation=0),
                                  iconTransformation(extent={{90,-10},{110,
            10}})));
  Physiolibrary.Fluid.Interfaces.FluidPort_b q_out "Blood outflow"
    annotation (extent=[-10,-110; 10,-90], Placement(transformation(extent={{-10,
            -110},{10,-90}}, rotation=0),
                                    iconTransformation(extent={{-110,-10},{
            -90,10}})));
*/
      //(q_in(pressure(start=95.5)),q_out(pressure(start=61.5)));
    /*  extends Physiolibrary.SteadyStates.Interfaces.SteadyState(
                                                stateName="Kidney-MyogenicDelay.PressureChange", state_start=InitialPressureChange, state(nominal=133));
*/
      Physiolibrary.Types.RealIO.HydraulicConductanceInput cond(displayUnit="ml/(min.mmHg)")
          annotation (Placement(transformation(extent={{-100,92},             {-80,112}}), iconTransformation(
                   extent={{-10,-10},{10,10}},         rotation=270,         origin={0,40})));

      Physiolibrary.Types.Fraction myogenicEffect;
      Physiolibrary.Types.Pressure pressureChange(start=InitialPressureChange); //(start=0.161874);
    //  Real pressureChangeSteadyState;
     // Real adaptedPressure; //(start=77.9546);
    //  Real interlobarPressure;
      parameter Physiolibrary.Types.Pressure InitialPressureChange=0;

      parameter Physiolibrary.Types.Frequency K_PressureChange(displayUnit="1/min") =  2.0/60;
      parameter Physiolibrary.Types.Time Tau_PressureAdoption(displayUnit="hod") =  4.0*60*60;
      parameter Real[:,3] PressureChangeOnMyogenicCondEffect;
      Physiolibrary.Blocks.Interpolation.Curve PressureChangeOnCondEffect(
        x=PressureChangeOnMyogenicCondEffect[:, 1],
        y=PressureChangeOnMyogenicCondEffect[:, 2],
        slope=PressureChangeOnMyogenicCondEffect[:, 3],
        Xscale=101325/760)
        annotation (Placement(transformation(extent={{14,26},{34,46}})));

        AfferentArteryMyogenicReceptors kidneyMyogenic(initialPressure(
              displayUnit="mmHg") = 9999.179056125)
          annotation (Placement(transformation(extent={{-46,50},{-26,70}})));
    //initial equation
     // adaptedPressure = interlobarPressure;
      //der(adaptedPressure) = 0;
     // der(pressureChange) = 0;
    equation
      //q_in.q + q_out.q = 0;

      volumeFlowRate = myogenicEffect * cond * (q_in.p - q_out.p);
      kidneyMyogenic.InterlobarPressure = (q_in.p + q_out.p)/2;  //stredny tlak v arteriole
     // der(adaptedPressure) = (1/(60*Tau_PressureAdoption)) * (interlobarPressure-adaptedPressure); //receptory sa adaptuju na tlak (polcas adaptacie nastane za 2hod a 45min)
     // pressureChangeSteadyState = interlobarPressure-adaptedPressure;  //zmena tlaku sa taktiez adaptuje - neviem preco? => potom to vizera, ze stimulacia receptorov je postupny proces (polcas nabudenia stimulacie je 20 sekund)

      der(pressureChange)=K_PressureChange * (kidneyMyogenic.PressureChange_SteadyState - pressureChange);

      PressureChangeOnCondEffect.u = pressureChange; //zmena tlaku aktivuje receptory
      myogenicEffect = PressureChangeOnCondEffect.val; //stimulacia receptorov ma vplyv na vodivost (odpor) krvi aferentnej arterie
      annotation ( Icon(graphics={
              Text(
                extent={{-110,-68},{106,-32}},
                textString="%name",
                lineColor={0,0,255}),
              Text(
                extent={{-68,-20},{66,12}},
                lineColor={0,0,0},
                textString="blood flow"),
              Rectangle(
                extent={{-70,30},{70,-30}},
                lineColor={0,0,255},
                fillColor={215,215,215},
                fillPattern=FillPattern.Sphere),
              Text(
                extent={{-54,20},{52,-18}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={215,215,215},
                textString="Myogenic")}),
            Documentation(info="<html> <pre>Receptory sa adaptuju na priemerny tlak v arteriole - polcas adaptacie nastane za 2hod a 45min.
        Zmena tlaku sa taktiez adaptuje - neviem preco? =&GT; potom to vizera, ze stimulacia receptorov je postupny proces (polcas nabudenia stimulacie je 20 sekund).
        Zmena tlaku aktivuje receptory, ktorych stimulacia ma vplyv na vasokonstrikciu danej arterioly.</pre> </html>"));
    end VariableResistorWithMyogenicResponse;

      model AfferentArteryMyogenicReceptors
      /*  extends Physiolibrary.SteadyStates.Interfaces.SteadyState(
                                                stateName="Kidney-Myogenic.AdaptedPressure",
                                                state_start=initialPressure,
                                                state(nominal=1e5));*/
        parameter Physiolibrary.Types.Time Tau = 4*60*60;
        parameter Physiolibrary.Types.Frequency K =   1 / ( Tau);
        parameter Physiolibrary.Types.Pressure initialPressure;
        Physiolibrary.Types.Pressure AdaptedPressure(displayUnit="mmHg");
        Physiolibrary.Types.RealIO.PressureInput
                                           InterlobarPressure(
                                                        displayUnit="mmHg") annotation (
            Placement(transformation(extent={{-100,20},{-60,60}}), iconTransformation(
                extent={{-100,20},{-60,60}})));
        Physiolibrary.Types.RealIO.PressureOutput
                                            PressureChange_SteadyState(
                                                                 displayUnit="mmHg")
          annotation (Placement(transformation(extent={{80,-60},{120,-20}}),
              iconTransformation(extent={{80,-60},{120,-20}})));
      equation
        der(AdaptedPressure)= K  * ( InterlobarPressure  -  AdaptedPressure);

        PressureChange_SteadyState = InterlobarPressure - AdaptedPressure;
      end AfferentArteryMyogenicReceptors;

      model AlphaReceptors
        //extends Library.BaseFactor2;

        replaceable package Blood = Physiolibrary.Media.Blood                         constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium "Blood medium model" annotation ( choicesAllMatching = true);

        Modelica.Blocks.Interfaces.RealInput yBase
                                 annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={86,90}),
              iconTransformation(extent={{-10,-10},{10,10}},rotation=270,
              origin={0,70})));
        Modelica.Blocks.Interfaces.RealOutput y
                              annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={80,-90}),
              iconTransformation(extent={{-10,-10},{10,10}},  rotation=270,
              origin={0,-70})));

        parameter Real[:,3] data={{0.0,1.3,0},{1.0,1.0,-0.16},{4.0,0.8,0}};

        parameter Physiolibrary.Types.Fraction NEURALK=0.5;
        parameter Physiolibrary.Types.Fraction HUMORALK=0.5;
        parameter Boolean Switch = false;
        parameter Physiolibrary.Types.Fraction Setting = 0;

        Modelica.Blocks.Math.Add TotalAgonism(k1=NEURALK, k2=HUMORALK)
          annotation (Placement(transformation(extent={{-58,20},{-38,40}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{18,28},{38,48}})));
      Modelica.Blocks.Sources.BooleanConstant booleanConstant(k=Switch)
        annotation (Placement(transformation(extent={{-28,38},{-8,58}})));
      Physiolibrary.Types.Constants.FractionConst             Constant(k=Setting)
        annotation (Placement(transformation(extent={{-30,76},{-10,96}})));
      Physiolibrary.Blocks.Interpolation.Curve SympsOnConductance(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3])
        annotation (Placement(transformation(extent={{30,-40},{50,-20}})));
        Modelica.Blocks.Math.Product Activity
          annotation (Placement(transformation(extent={{-6,-40},{14,-20}})));
        Modelica.Blocks.Math.Product SympsEffect
                                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={80,-66})));
        Modelica.Fluid.Interfaces.FluidPort_a
                                     port_a(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-110,-30},{-90,-10}})));
        Fluid.Sensors.MassConcentration        norepinephrine(redeclare
            function
            GetMassConcentration = Physiolibrary.Media.Blood.norepinephrine,
                                                              redeclare package
            Medium = Blood)
          annotation (Placement(transformation(extent={{-84,-8},{-64,12}})));
        Fluid.Sensors.MassConcentration        epinephrine(redeclare function
            GetMassConcentration = Physiolibrary.Media.Blood.epinephrine,
                                                           redeclare package
            Medium =
              Blood)
          annotation (Placement(transformation(extent={{-84,-34},{-64,-14}})));
        Fluid.Sensors.Fraction                 alphaBlockers(redeclare function
            GetFraction = Physiolibrary.Media.Blood.alphaBlockers,
                                                             redeclare package
            Medium =
              Blood)
          annotation (Placement(transformation(extent={{-84,-92},{-64,-72}})));

        Physiolibrary.Blocks.Math.Log10AsEffect log10_1
        annotation (Placement(transformation(extent={{10,-66},{30,-46}})));
        Modelica.Blocks.Math.Add3 AlphaTotal(
          k3=5e6,
          k1=0.021e9,
          k2=0.125e9)
          annotation (Placement(transformation(extent={{-38,-62},{-18,-42}})));
        Fluid.Sensors.MassConcentration        desglymidodrine(redeclare
            function
            GetMassConcentration = Physiolibrary.Media.Blood.desglymidodrine,
                                                               redeclare
            package
            Medium = Blood)
          annotation (Placement(transformation(extent={{-84,-62},{-64,-42}})));
        Modelica.Blocks.Math.Feedback AlphaBlockadeEffect
          annotation (Placement(transformation(extent={{-24,-88},{-4,-68}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-52,-84},{-40,-72}})));
        Modelica.Blocks.Math.Gain toEffect(k=1/1.5) "frequency to effect"
          annotation (Placement(transformation(extent={{-82,70},{-62,90}})));
        Types.RealIO.FrequencyInput GangliaGeneral
          "Sympathicus neural activity from general ganglia" annotation (
            Placement(transformation(extent={{-112,70},{-92,90}}),
              iconTransformation(extent={{-108,-70},{-88,-50}})));
      equation

        connect(SympsEffect.u2, SympsOnConductance.val)
                                        annotation (Line(
            points={{74,-54},{74,-30},{50,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SympsOnConductance.u, Activity.y)
                                    annotation (Line(
            points={{30,-30},{15,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Activity.u1, switch1.y)
                                       annotation (Line(
            points={{-8,-24},{-20,-24},{-20,2},{62,2},{62,38},{39,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u3, TotalAgonism.y)
                                   annotation (Line(
            points={{16,30},{-37,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u2, booleanConstant.y) annotation (Line(
            points={{16,38},{-2,38},{-2,48},{-7,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(switch1.u1, Constant.y) annotation (Line(
            points={{16,46},{10,46},{10,86},{-7.5,86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(yBase, SympsEffect.u1)
                                    annotation (Line(
            points={{86,90},{86,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SympsEffect.y, y)
                               annotation (Line(
            points={{80,-77},{80,-90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AlphaTotal.y, log10_1.u) annotation (Line(points={{-17,-52},{2,
                -52},{2,-56},{8,-56}}, color={0,0,127}));
        connect(log10_1.y, TotalAgonism.u2) annotation (Line(points={{31,-56},{36,
                -56},{36,-44},{26,-44},{26,-36},{22,-36},{22,16},{-70,16},{-70,24},
                {-60,24}}, color={0,0,127}));
        connect(const.y, AlphaBlockadeEffect.u1)
          annotation (Line(points={{-39.4,-78},{-22,-78}}, color={0,0,127}));
        connect(AlphaBlockadeEffect.y, Activity.u2) annotation (Line(points={{-5,
                -78},{0,-78},{0,-44},{-14,-44},{-14,-36},{-8,-36}}, color={0,0,
                127}));
        connect(port_a, norepinephrine.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-8},{-74,-8}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, epinephrine.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-34},{-74,-34}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, alphaBlockers.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-92},{-74,-92}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, desglymidodrine.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-62},{-74,-62}},
            color={127,0,0},
            thickness=0.5));
        connect(GangliaGeneral, toEffect.u)
          annotation (Line(points={{-102,80},{-84,80}}, color={0,0,127}));
        connect(toEffect.y, TotalAgonism.u1) annotation (Line(points={{-61,80},{
                -58,80},{-58,60},{-70,60},{-70,36},{-60,36}}, color={0,0,127}));
        connect(norepinephrine.R, AlphaTotal.u1) annotation (Line(points={{-63,2},
                {-50,2},{-50,-44},{-40,-44}}, color={0,0,127}));
        connect(epinephrine.R, AlphaTotal.u2) annotation (Line(points={{-63,-24},
                {-52,-24},{-52,-52},{-40,-52}}, color={0,0,127}));
        connect(alphaBlockers.F, AlphaBlockadeEffect.u2) annotation (Line(points=
                {{-63,-82},{-62,-82},{-62,-96},{-14,-96},{-14,-86}}, color={0,0,
                127}));
        connect(desglymidodrine.R, AlphaTotal.u3) annotation (Line(points={{-63,
                -52},{-54,-52},{-54,-60},{-40,-60}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,70},{100,-70}},
                lineColor={112,143,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}), Text(
                extent={{-88,-40},{100,48}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={85,255,170},
                textString="%name")}));
      end AlphaReceptors;

      model BetaReceptors
        //extends Library.BaseFactor2;

        replaceable package Blood = Physiolibrary.Media.Blood
           constrainedby Physiolibrary.Media.Interfaces.PartialMedium
                                                       "Blood medium model" annotation ( choicesAllMatching = true);

        Types.RealIO.FrequencyInput GangliaGeneral
          "Sympathicus neural activity from general ganglia" annotation (
            Placement(transformation(extent={{-110,70},{-90,90}}),
              iconTransformation(extent={{-108,-70},{-88,-50}})));
        input Real yBase = base if useBase
                                 annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={86,90}),
              iconTransformation(extent={{-10,-10},{10,10}},rotation=270,
              origin={0,70})));                   //=base
                                                       // if useBase
        Modelica.Blocks.Interfaces.RealOutput y
                              annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={80,-90}),
              iconTransformation(extent={{-10,-10},{10,10}},  rotation=270,
              origin={0,-70})));

        parameter Boolean useBase=false "If not then yBase=1" annotation (
          Evaluate = true,
          HideResult = true,
          choices(checkBox = true),
          Dialog(group = "Conditional inputs"));
        parameter Physiolibrary.Types.Fraction NEURALK=0.5;
        parameter Physiolibrary.Types.Fraction HUMORALK=0.5;
        parameter Boolean Switch = false;
        parameter Physiolibrary.Types.Fraction Setting = 0;

        Modelica.Blocks.Math.Add TotalAgonism(k1=NEURALK, k2=HUMORALK)
          annotation (Placement(transformation(extent={{-58,20},{-38,40}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{18,28},{38,48}})));
      Modelica.Blocks.Sources.BooleanConstant booleanConstant(k=Switch)
        annotation (Placement(transformation(extent={{-28,38},{-8,58}})));
      Physiolibrary.Types.Constants.FractionConst             Constant(k=Setting)
        annotation (Placement(transformation(extent={{-30,76},{-10,96}})));
        Modelica.Blocks.Math.Product Activity
          annotation (Placement(transformation(extent={{-6,-40},{14,-20}})));
        Modelica.Blocks.Math.Product SympsEffect
                                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={80,-66})));
        Modelica.Fluid.Interfaces.FluidPort_a
                                     port_a(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-110,-30},{-90,-10}})));
        Fluid.Sensors.MassConcentration        norepinephrine(redeclare
            function                                                             GetMassConcentration =
                                   Physiolibrary.Media.Blood.norepinephrine,
                                                              redeclare package
                                                                                Medium =
                     Blood)
          annotation (Placement(transformation(extent={{-84,-10},{-64,10}})));
        Fluid.Sensors.MassConcentration        epinephrine(redeclare function GetMassConcentration =
                                   Physiolibrary.Media.Blood.epinephrine,
                                                           redeclare package Medium =
              Blood)
          annotation (Placement(transformation(extent={{-84,-34},{-64,-14}})));
        Fluid.Sensors.Fraction                 betaBlockers(redeclare function GetFraction =
                          Physiolibrary.Media.Blood.betaBlockers,
                                                            redeclare package Medium =
              Blood)
          annotation (Placement(transformation(extent={{-84,-92},{-64,-72}})));

        Physiolibrary.Blocks.Math.Log10AsEffect log10_1
        annotation (Placement(transformation(extent={{12,-68},{32,-48}})));
        Modelica.Blocks.Math.Add  AlphaTotal(k1=0.021e9, k2=0.125e9)
          annotation (Placement(transformation(extent={{-44,-62},{-18,-36}})));
        Modelica.Blocks.Math.Feedback BetaBlockadeEffect
          annotation (Placement(transformation(extent={{-24,-88},{-4,-68}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-52,-84},{-40,-72}})));

        Real base;

        Modelica.Blocks.Math.Gain toEffect(k=1/1.5) "frequency to effect"
          annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
      equation
        if not useBase then
          base = 1;
        end if;

        connect(Activity.u1, switch1.y)
                                       annotation (Line(
            points={{-8,-24},{-20,-24},{-20,2},{62,2},{62,38},{39,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u3, TotalAgonism.y)
                                   annotation (Line(
            points={{16,30},{-37,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u2, booleanConstant.y) annotation (Line(
            points={{16,38},{-2,38},{-2,48},{-7,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(switch1.u1, Constant.y) annotation (Line(
            points={{16,46},{10,46},{10,86},{-7.5,86}},
            color={0,0,127},
            smooth=Smooth.None));
        SympsEffect.u1=base;

        connect(SympsEffect.y, y)
                               annotation (Line(
            points={{80,-77},{80,-90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AlphaTotal.y, log10_1.u) annotation (Line(points={{-16.7,-49},{6,-49},
                {6,-58},{10,-58}},     color={0,0,127}));
        connect(log10_1.y, TotalAgonism.u2) annotation (Line(points={{33,-58},{38,-58},
                {38,18},{-68,18},{-68,24},{-60,24}},
                           color={0,0,127}));
        connect(const.y, BetaBlockadeEffect.u1)
          annotation (Line(points={{-39.4,-78},{-22,-78}}, color={0,0,127}));
        connect(BetaBlockadeEffect.y, Activity.u2) annotation (Line(points={{-5,-78},{
                2,-78},{2,-44},{-12,-44},{-12,-36},{-8,-36}}, color={0,0,127}));
        connect(port_a, norepinephrine.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-10},{-74,-10}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, epinephrine.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-34},{-74,-34}},
            color={127,0,0},
            thickness=0.5));
        connect(port_a, betaBlockers.port) annotation (Line(
            points={{-100,-20},{-88,-20},{-88,-92},{-74,-92}},
            color={127,0,0},
            thickness=0.5));
        connect(Activity.y, SympsEffect.u2)
          annotation (Line(points={{15,-30},{74,-30},{74,-54}}, color={0,0,127}));
        connect(GangliaGeneral, toEffect.u)
          annotation (Line(points={{-100,80},{-82,80}}, color={0,0,127}));
        connect(toEffect.y, TotalAgonism.u1) annotation (Line(points={{-59,80},{
                -56,80},{-56,60},{-68,60},{-68,36},{-60,36}}, color={0,0,127}));
        connect(norepinephrine.R, AlphaTotal.u1) annotation (Line(points={{-63,0},
                {-52,0},{-52,-34},{-54,-34},{-54,-41.2},{-46.6,-41.2}}, color={0,
                0,127}));
        connect(epinephrine.R, AlphaTotal.u2) annotation (Line(points={{-63,-24},
                {-58,-24},{-58,-56.8},{-46.6,-56.8}}, color={0,0,127}));
        connect(betaBlockers.F, BetaBlockadeEffect.u2) annotation (Line(points={{
                -63,-82},{-63,-94},{-14,-94},{-14,-86}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,70},{100,-70}},
                lineColor={112,143,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}), Text(
                extent={{-88,-40},{100,48}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={85,255,170},
                textString="%name")}));
      end BetaReceptors;

      model ViscosityConductance
        import Physiolibrary;
        extends Icons.BaseFactorIcon4;
        Physiolibrary.Fluid.Sensors.Fraction Hct(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{-90,14},{-70,34}})));
        Blocks.Factors.Normalization Viscosity1
          annotation (Placement(transformation(extent={{-10,-18},{10,2}})));
        replaceable package Blood = Physiolibrary.Media.Blood  constrainedby
          Media.Interfaces.PartialMedium                                                                                                   annotation ( choicesAllMatching = true);
        Modelica.Fluid.Interfaces.FluidPort_a port(redeclare package Medium = Blood)
          annotation (Placement(transformation(rotation=0, extent={{-110,-10},{-90,10}}),
              iconTransformation(extent={{-110,-10},{-90,10}})));
        Blocks.Interpolation.Curve HtcOnVisc(
          x={0,0.44,0.8},
          y={0.5,1,5},
          slope={0.8,3,30})
          annotation (Placement(transformation(extent={{-60,14},{-40,34}})));
        Modelica.Blocks.Math.Division division1
          annotation (Placement(transformation(extent={{-28,26},{-20,34}})));
        Types.Constants.OneConst one1
          annotation (Placement(transformation(extent={{-42,36},{-34,44}})));
      equation
        connect(port, Hct.port) annotation (Line(points={{-100,0},{-100,6},{-80,6},{-80,
                14}}, color={127,0,0}));
        connect(y, Viscosity1.y) annotation (Line(points={{0,-40},{0,-12}},
                           color={0,0,127}));
        connect(yBase, Viscosity1.yBase) annotation (Line(points={{0,20},{0,-6}},
                                  color={0,0,127}));
      connect(one1.y,division1. u1) annotation (Line(
          points={{-33,40},{-32,40},{-32,32.4},{-28.8,32.4}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(HtcOnVisc.val,division1. u2) annotation (Line(
            points={{-40,24},{-30.5,24},{-30.5,27.6},{-28.8,27.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division1.y, Viscosity1.u) annotation (Line(points={{-19.6,30},{
                -14,30},{-14,-8},{-8,-8}}, color={0,0,127}));
        connect(Hct.F, HtcOnVisc.u)
          annotation (Line(points={{-69,24},{-60,24}}, color={0,0,127}));
      end ViscosityConductance;

      model Membrane
        extends Icons.Membrane;

        replaceable package MediumA = Physiolibrary.Media.Blood   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        replaceable package MediumB = Physiolibrary.Media.Blood   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);

        Chemical.Interfaces.SubstancePorts_a ports_a[MediumA.nS]
          annotation (Placement(transformation(extent={{-110,18},{-90,98}})));
        Chemical.Interfaces.SubstancePorts_b ports_b[MediumB.nS]
          annotation (Placement(transformation(extent={{90,18},{110,98}})));
        Chemical.Components.Membrane membrane[size(substanceNames,1)](KC=KC)
          annotation (Placement(transformation(extent={{-6,48},{14,68}})));
        parameter String substanceNames[:]={"O2","CO2"};
        parameter Real KC[size(substanceNames,1)](each final unit="mol2.s-1.J-1")=fill(1,size(substanceNames,1));
        parameter String extraSubstanceNames[:]={"Epinephrine","Angiotensin2","Renin"};
        parameter Real EKC[size(extraSubstanceNames,1)]=fill(1,size(extraSubstanceNames,1));

      protected
        parameter Integer iSA[size(substanceNames,1)] = findIndieces(substanceNames,MediumA.substanceNames)
          "Indieces of substances in vector of substances of medium A";

        parameter Integer iSB[size(substanceNames,1)] = findIndieces(substanceNames,MediumB.substanceNames)
          "Indieces of substances in vector of substances of medium B";

        parameter Integer ioSA[MediumA.nS-size(substanceNames,1)] = findOtherIndiecies(MediumA.nS,iSA)
          "Indieces of substances in vector of substances of medium A";

        parameter Integer ioSB[MediumB.nS-size(substanceNames,1)] = findOtherIndiecies(MediumB.nS,iSB)
          "Indieces of substances in vector of substances of medium B";

        function findIndieces
          input String searchNames[:];
          input String vectorNames[:];
          output Integer indieces[size(searchNames,1)];
        algorithm
          for j in 1:size(searchNames,1) loop
            indieces[j]:= -1;
            for i in 1:size(vectorNames,1) loop
              if ( Modelica.Utilities.Strings.isEqual(vectorNames[i], searchNames[j])) then
               indieces[j] := i;
              end if;
            end for;
            assert(indieces[j] > 0, "Substance '" + searchNames[j] + "' is not present between Substances in Medium\n"
               + "Check parameters and medium model.");
          end for;
        end findIndieces;

        function findOtherIndiecies
          input Integer n "Length of vector";
          input Integer indiecies[:] "Indiecies in vector";
          output Integer otherIndiecies[n-size(indiecies,1)] "Other indiecies";
        protected
          Integer k,e;
        algorithm
          k:=1;
          for i in 1:n loop
            e:=1;
            for j in i:size(indiecies,1) loop
              if (indiecies[j]==i) then e:=0; end if;
            end for;
            if (e==1) then
              otherIndiecies[k]:=i;
              k:=k+1;
            end if;
          end for;
        end findOtherIndiecies;

      equation

        for j in 1:size(substanceNames,1) loop
          connect(membrane[j].port_a, ports_a[iSA[j]])
            annotation (Line(points={{-6,58},{-100,58}}, color={158,66,200}));
          connect(membrane[j].port_b, ports_b[iSB[j]])
            annotation (Line(points={{14,58},{100,58}}, color={158,66,200}));
        end for;

        for oj in 1:size(ioSA,1) loop
          ports_a[ioSA[oj]].q=0;
          ports_a[ioSA[oj]].h_outflow=0;
          ports_b[ioSB[oj]].q=0;
          ports_b[ioSB[oj]].h_outflow=0;
        end for;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-140,-124},{140,-104}},
                textColor={102,44,145},
                textString="%name")}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end Membrane;
    end Components;

    package Interfaces

      partial model BaseTissue
      extends Physiolibrary.Icons.PerfusionDO;

      replaceable package Blood = Physiolibrary.Media.Blood  constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                   annotation ( choicesAllMatching = true); //BloodBySiggaardAndersen
      Physiolibrary.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Blood) "Blood inflow" annotation (Placement(transformation(extent={
                  {100,-10},{120,10}}, rotation=0), iconTransformation(extent={{
                  150,-10},{170,10}})));
      Physiolibrary.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Blood) "Blood outflow" annotation (Placement(transformation(extent=
                  {{-110,-10},{-90,10}}, rotation=0), iconTransformation(extent={
                  {-168,-10},{-148,10}})));

      Physiolibrary.Types.BusConnector busConnector
        "signals of organ bood flow resistence" annotation (Placement(
            transformation(extent={{-100,80},{-80,100}}), iconTransformation(
              extent={{-64,58},{-46,76}})));

        Physiolibrary.Types.RealIO.VolumeFlowRateOutput BloodFlow
                                                 annotation (Placement(transformation(
                extent={{92,14},{104,26}}),  iconTransformation(extent={{60,-60},{80,
                  -40}})));
      Physiolibrary.Fluid.Sensors.VolumeFlowMeasure flowMeasure(redeclare
            package
            Medium = Blood)                                     annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            origin={88,0})));
      equation

        connect(flowMeasure.q_in, port_a) annotation (Line(
            points={{98,0},{110,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(flowMeasure.volumeFlow, BloodFlow)
          annotation (Line(points={{88,12},{88,20},{98,20}}, color={0,0,127}));
        annotation (Documentation(info="<HTML>
<PRE>
Blood flow variable resistor abstract model.
</PRE>
</HTML>
",     revisions="<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
      end BaseTissue;

    end Interfaces;

    class References "References"
    extends Modelica.Icons.References;

    annotation (Documentation(info="<html>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">

        <tr>
                <td>[Abildgaard1986]</td>
                <td>U. Abildgaard, N.-H. Holstein-Rathlou, and P. P. Leyssac, \"Effect of renal nerve activity on tubular sodium and water reabsorption in dog kidneys as determined by the lithium clearance method,\" Acta Physiologica Scandinavica, vol. 126, pp. 251-257, 1986. </td>
        </tr>
        <tr>
                <td>[Abram2007]</td>
                <td>S. R. Abram, B. L. Hodnett, R. L. Summers, T. G. Coleman, and R. L. Hester, \"Quantitative circulatory physiology: an integrative mathematical model of human physiology for medical education,\" Advances in Physiology Education, vol. 31, pp. 202-210, 2007. </td>
        </tr>
        <tr>
                <td>[Abramson1958]</td>
                <td>D. I. Abramson, A. Kahn, S. Tuck Jr, G. A. Turman, H. Rejal, and C. J. Fleischer, \"Relationship between a range of tissue temperature and local oxygen uptake in the human forearm. I. Changes observed under resting conditions,\" Journal of Clinical Investigation, vol. 37, p. 1031, 1958. </td>
        </tr>
        <tr>
                <td>[Adair1982]</td>
                <td>T. H. Adair, D. S. Moffatt, A. W. Paulsen, and A. C. Guyton, Quantitation of changes in lymph protein concentration during lymph node transit vol. 243, 1982. </td>
        </tr>
        <tr>
                <td>[Adler1970]</td>
                <td>S. Adler, \"An extrarenal action of aldosterone on mammalian skeletal muscle,\" Am J Physiol, vol. 218, pp. 616-621, 1970. </td>
        </tr>
        <tr>
                <td>[Adolph1946]</td>
                <td>E. F. Adolph and G. W. Molnar, EXCHANGES OF HEAT AND TOLERANCES TO COLD IN MEN EXPOSED TO OUTDOOR WEATHER vol. 146, 1946. </td>
        </tr>
        <tr>
                <td>[Adrogue1985]</td>
                <td>H. J. Adrogue, Z. Chap, T. Ishida, and J. Field, \"Role of the endocrine pancreas in the kalemic response to acute metabolic acidosis in conscious dogs,\" Journal of Clinical Investigation, vol. 75, p. 798, 1985. </td>
        </tr>
        <tr>
                <td>[ADROGUÉ1986]</td>
                <td>H. J. ADROGUÉ, E. D. LEDERER, W. N. SUKI, and G. EKNOYAN, \"Determinants of Plasma Potassium Levels in Diabetic Ketoacidosis,\" Medicine, vol. 65, pp. 163-172, 1986. </td>
        </tr>
        <tr>
                <td>[Agostoni1962]</td>
                <td>E. Agostoni and G. Torri, Diaphragm contraction as a limiting factor to maximum expiration vol. 17, 1962. </td>
        </tr>
        <tr>
                <td>[Aguilera1978]</td>
                <td>G. Aguilera and K. Catt, \"Regulation of aldosterone secretion by the renin-angiotensin system during sodium restriction in rats,\" Proceedings of the National Academy of Sciences, vol. 75, pp. 4057-4061, 1978. </td>
        </tr>
        <tr>
                <td>[Ahlqvist2003]</td>
                <td>J. Ahlqvist, \"Plasma protein osmotic pressure equations for humans,\" Journal of Applied Physiology, vol. 94, pp. 1288-1289, 2003. </td>
        </tr>
        <tr>
                <td>[Albert1967]</td>
                <td>M. S. Albert, R. B. Dell, and R. W. Winters, \"Quantitative Displacement of Acid-Base Equilibrium in Metabolic Acidosis,\" Annals of Internal Medicine, vol. 66, pp. 312-322, 1967. </td>
        </tr>
        <tr>
                <td>[Alexander1978]</td>
                <td>G. Alexander, \"Cold thermogenesis,\" International review of physiology, vol. 20, pp. 43-155, 1978. </td>
        </tr>
        <tr>
                <td>[Alexander1955]</td>
                <td>J. K. Alexander, H. F. Spalter, and J. R. West, \"MODIFICATION OF THE RESPIRATORY RESPONSE TO CARBON DIOXIDE BY SALICYLATE,\" The Journal of Clinical Investigation, vol. 34, pp. 533-537, 1955. </td>
        </tr>
        <tr>
                <td>[Alfie1999]</td>
                <td>J. Alfie, G. D. Waisman, C. R. Galarza, and M. I. Cámera, \"Contribution of Stroke Volume to the Change in Pulse Pressure Pattern With Age,\" Hypertension, vol. 34, pp. 808-812, October 1, 1999 1999. </td>
        </tr>
        <tr>
                <td>[Algenstaedt2004]</td>
                <td>P. Algenstaedt, N. Rosenblatt, I. Kolb, A. Krützelmann, B. Schwarzloh, A. Böttcher, et al., \"A new model of primary human adipocytes reveals reduced early insulin signalling in type 2 diabetes,\" Hormone and Metabolic Research = Hormon- Und Stoffwechselforschung = Hormones Et Métabolisme, vol. 36, pp. 531-537, 2004/08// 2004. </td>
        </tr>
        <tr>
                <td>[Almgard1975]</td>
                <td>L. Almgard and A. Ljungqvist, \"Effect of circulating norepinephrine on the renin release from the denervated kidney,\" Scandinavian journal of urology and nephrology, vol. 9, pp. 119-124, 1975. </td>
        </tr>
        <tr>
                <td>[Alsberge1988]</td>
                <td>M. Alsberge, M. Magno, and M. Lipschutz, Carotid body control of bronchial circulation in sheep vol. 65, 1988. </td>
        </tr>
        <tr>
                <td>[Ames1965]</td>
                <td>R. P. Ames, A. J. Borkowski, A. M. Sicinski, and J. H. Laragh, \"Prolonged infusions of angiotensin II and norepinephrine and blood pressure, electrolyte balance, and aldosterone and cortisol secretion in normal man and in cirrhosis with ascites,\" Journal of Clinical Investigation, vol. 44, p. 1171, 1965. </td>
        </tr>
        <tr>
                <td>[Anderson1985]</td>
                <td>K. E. Anderson, E. Pantuck, A. H. Conney, and A. Kappas, \"Nutrient regulation of chemical metabolism in humans,\" in Federation proceedings, 1985, pp. 130-133. </td>
        </tr>
        <tr>
                <td>[Andres1962]</td>
                <td>R. Andres, M. A. Baltzan, G. Cader, and K. L. Zierler, \"Effect of insulin on carbohydrate metabolism and on potassium in the forearm of man,\" Journal of Clinical Investigation, vol. 41, p. 108, 1962. </td>
        </tr>
        <tr>
                <td>[Angielski1978]</td>
                <td>S. Angielski and J. Lukowicz, \"The role of the kidney in the removal of ketone bodies under different acid-base status of the rat,\" The American Journal of Clinical Nutrition, vol. 31, pp. 1635-41, September 1, 1978 1978. </td>
        </tr>
        <tr>
                <td>[Arendshorst1985]</td>
                <td>W. J. Arendshorst and C. W. Gottschalk, Glomerular ultrafiltration dynamics: historical perspective vol. 248, 1985. </td>
        </tr>
        <tr>
                <td>[Archer2002]</td>
                <td>S. Archer and E. Michelakis, The Mechanism(s) of Hypoxic Pulmonary Vasoconstriction: Potassium Channels, Redox O2 Sensors, and Controversies vol. 17, 2002. </td>
        </tr>
        <tr>
                <td>[Archer1996]</td>
                <td>S. L. Archer, J. M. C. Huang, H. L. Reeve, V. Hampl, S. Tolarová, E. Michelakis, et al., \"Differential Distribution of Electrophysiologically Distinct Myocytes in Conduit and Resistance Arteries Determines Their Response to Nitric Oxide and Hypoxia,\" Circulation Research, vol. 78, pp. 431-442, March 1, 1996 1996. </td>
        </tr>
        <tr>
                <td>[Armstrong1991]</td>
                <td>L. E. Armstrong and C. M. Maresh, \"The induction and decay of heat acclimatisation in trained athletes,\" Sports Medicine, vol. 12, pp. 302-312, 1991. </td>
        </tr>
        <tr>
                <td>[Armstrong1985]</td>
                <td>R. Armstrong, C. Vandenakker, and M. Laughlin, \"Muscle blood flow patterns during exercise in partially curarized rats,\" Journal of Applied Physiology, vol. 58, pp. 698-701, 1985. </td>
        </tr>
        <tr>
                <td>[Arner2002]</td>
                <td>P. Arner, \"Insulin resistance in type 2 diabetes: role of fatty acids,\" Diabetes/metabolism research and reviews, vol. 18, pp. S5-S9, 2002. </td>
        </tr>
        <tr>
                <td>[Ashley1992]</td>
                <td>K. D. Ashley, D. N. Herndon, L. D. Traber, D. L. Traber, K. Deubel-Ashley, J. Stothert, et al., \"Systemic blood flow to sheep lung: comparison of flow probes and microspheres,\" Journal of Applied Physiology, vol. 73, pp. 1996-1996, 1992. </td>
        </tr>
        <tr>
                <td>[Atherton1971]</td>
                <td>J. Atherton, R. Green, and S. Thomas, \"Influence of lysine-vasopressin dosage on the time course of changes in renal tissue and urinary composition in the conscious rat,\" The Journal of physiology, vol. 213, pp. 291-309, 1971. </td>
        </tr>
        <tr>
                <td>[Atchley1933]</td>
                <td>D. W. Atchley, R. F. Loeb, D. W. Richards, Jr., E. M. Benedict, and M. E. Driscoll, \"ON DIABETIC ACIDOSIS: A Detailed Study of Electrolyte Balances Following the Withdrawal and Reestablishment of Insulin Therapy,\" The Journal of Clinical Investigation, vol. 12, pp. 297-326, 1933. </td>
        </tr>
        <tr>
                <td>[Atkins1962]</td>
                <td>E. L. Atkins and W. B. Schwartz, \"Factors governing correction of the alkalosis associated with potassium deficiency; the critical role of chloride in the recovery process,\" Journal of Clinical Investigation, vol. 41, p. 218, 1962. </td>
        </tr>
        <tr>
                <td>[Aukland1989]</td>
                <td>K. Aukland, \"Myogenic mechanisms in the kidney,\" Journal of hypertension. Supplement: official journal of the International Society of Hypertension, vol. 7, pp. S71-6; discussion S77, 1989. </td>
        </tr>
        <tr>
                <td>[Aukland1993]</td>
                <td>K. Aukland and R. K. Reed, \"Interstitial-lymphatic mechanisms in the control of extracellular fluid volume,\" Physiological Reviews, vol. 73, pp. 1-78, January 1, 1993 1993. </td>
        </tr>
        <tr>
                <td>[Aukland1993]</td>
                <td>K. Aukland and R. Reed, \"Interstitial-lymphatic mechanisms in the control of extracellular fluid volume,\" Physiological reviews, vol. 73, pp. 1-78, 1993. </td>
        </tr>
        <tr>
                <td>[Avery1961]</td>
                <td>M. E. Avery and C. D. Cook, Volume-pressure relationships of lungs and thorax in fetal, newborn, and adult goats vol. 16, 1961. </td>
        </tr>
        <tr>
                <td>[Badder1977]</td>
                <td>E. M. Badder, J. F. Seaton, and T. S. Harrison, \"Arterial and venous catecholamine responses to passive orthostatic stimulation,\" Surgical forum, vol. 28, pp. 115-118, 1977 1977. </td>
        </tr>
        <tr>
                <td>[Bachelard1974]</td>
                <td>H. S. Bachelard, L. D. Lewis, U. Pontén, and B. K. Siesjö, \"MECHANISMS ACTIVATING GLYCOLYSIS IN THE BRAIN IN ARTERIAL HYPOXIA,\" Journal of Neurochemistry, vol. 22, pp. 395-401, 1974. </td>
        </tr>
        <tr>
                <td>[Baldes1934]</td>
                <td>E. J. Baldes and F. Smirk, \"The effect of water drinking, mineral starvation and salt administration on the total osmotic pressure of the blood in man, chiefly in relation to the problems of water absorption and water diuresis,\" The Journal of physiology, vol. 82, pp. 62-74, 1934. </td>
        </tr>
        <tr>
                <td>[Baldes1934]</td>
                <td>E. J. Baldes and F. H. Smirk, \"The effect of water drinking, mineral starvation and salt administration on the total osmotic pressure of the blood in man, chiefly in relation to the problems of water absorption and water diuresis,\" The Journal of Physiology, vol. 82, pp. 62-74, August 24, 1934 1934. </td>
        </tr>
        <tr>
                <td>[Bangsbo1997]</td>
                <td>J. Bangsbo, C. Juel, Y. Hellsten, and B. Saltin, \"Dissociation between lactate and proton exchange in muscle during intense exercise in man,\" The Journal of Physiology, vol. 504, pp. 489-499, October 15, 1997 1997. </td>
        </tr>
        <tr>
                <td>[Barger1958]</td>
                <td>A. Barger, R. Berlin, and J. Tulenko, \"INFUSION OF ALDOSTERONE, 9-?-FLUOROHYDROCORTISONE AND ANTIDIURETIC HORMONE INTO THE RENAL ARTERY OF NORMAL AND ADRENALECTOMIZED, UNANESTHETIZED DOGS: EFFECT ON ELECTROLYTE AND WATER EXCRETION 1,\" Endocrinology, vol. 62, pp. 804-815, 1958. </td>
        </tr>
        <tr>
                <td>[Barnard1987]</td>
                <td>P. Barnard, S. Andronikou, M. Pokorski, N. Smatresk, A. Mokashi, and S. Lahiri, Time-dependent effect of hypoxia on carotid body chemosensory function vol. 63, 1987. </td>
        </tr>
        <tr>
                <td>[Bassingthwaighte1997]</td>
                <td>J. B. Bassingthwaighte, \"Design and strategy for the Cardionome Project,\" in Analytical and Quantitative Cardiology, ed: Springer, 1997, pp. 325-339. </td>
        </tr>
        <tr>
                <td>[Bassingthwaighte2000]</td>
                <td>J. B. Bassingthwaighte, \"Strategies for the physiome project,\" Annals of Biomedical Engineering, vol. 28, pp. 1043-1058, 2000. </td>
        </tr>
        <tr>
                <td>[BAUER1993]</td>
                <td>C. BAUER, \"A WIDESPREAD OXYGEN SENSOR REVEALED,\" ed: C/O WILLIAMS & WILKINS, PO BOX 1496, BALTIMORE, MD 21203, 1993. </td>
        </tr>
        <tr>
                <td>[Bauer1979]</td>
                <td>J. H. Bauer and W. C. Gauntner, \"Effect of potassium chloride on plasma renin activity and plasma aldosterone during sodium restriction in normal man,\" Kidney Int, vol. 15, pp. 286-293, 03//print 1979. </td>
        </tr>
        <tr>
                <td>[Bazett1997]</td>
                <td>H. C. Bazett, \"AN ANALYSIS OF THE TIME-RELATIONS OF ELECTROCARDIOGRAMS,\" Annals of Noninvasive Electrocardiology, vol. 2, pp. 177-194, 1997. </td>
        </tr>
        <tr>
                <td>[Becklake1989]</td>
                <td>M. R. Becklake, \"Occupational Exposures: Evidence for a Causal Association with Chronic Obstructive Pulmonary Disease,\" American Review of Respiratory Disease, vol. 140, pp. S85-S91, 1989/09/01 1989. </td>
        </tr>
        <tr>
                <td>[Beeken1962]</td>
                <td>W. L. Beeken, W. Volwiler, P. D. Goldsworthy, L. E. Garby, W. E. Reynolds, R. Stogsdill, et al., \"Studies of I131-albumin catabolism and distribution in normal young male adults,\" Journal of Clinical Investigation, vol. 41, p. 1312, 1962. </td>
        </tr>
        <tr>
                <td>[Begg1966]</td>
                <td>T. Begg and J. Hearns, \"Components in blood viscosity. The relative contribution of haematocrit, plasma fibrinogen and other proteins,\" Clinical science, vol. 31, pp. 87-93, 1966. </td>
        </tr>
        <tr>
                <td>[Bello-Reuss1975]</td>
                <td>E. Bello-Reuss, R. Colindres, E. Pastoriza-Munoz, R. Mueller, and C. Gottschalk, \"Effects of acute unilateral renal denervation in the rat,\" Journal of Clinical Investigation, vol. 56, p. 208, 1975. </td>
        </tr>
        <tr>
                <td>[Bengis1979]</td>
                <td>R. Bengis and T. Coleman, \"Antihypertensive effect of prolonged blockade of angiotensin formation in benign and malignant, one-and two-kidney Goldblatt hypertensive rats,\" Clin Sci, vol. 57, pp. 53-62, 1979. </td>
        </tr>
        <tr>
                <td>[Bennett1993]</td>
                <td>F. M. Bennett and W. E. Fordyce, \"Regulation of PaCO2 during rest and exercise: a modeling study,\" Ann Biomed Eng, vol. 21, pp. 545-55, Sep-Oct 1993. </td>
        </tr>
        <tr>
                <td>[Benzinger1969]</td>
                <td>T. H. Benzinger, \"Heat regulation: homeostasis of central temperature in man,\" Physiological Reviews, vol. 49, pp. 671-759, 1969. </td>
        </tr>
        <tr>
                <td>[Berde1968]</td>
                <td>B. Berde and R. Boissonnas, Basic pharmacological properties of synthetic analogues and homologues of the neurohypophysial hormones: Springer, 1968. </td>
        </tr>
        <tr>
                <td>[Berg1997]</td>
                <td>B. R. Berg, K. D. Cohen, and I. H. Sarelius, \"Direct coupling between blood flow and metabolism at the capillary level in striated muscle,\" American Journal of Physiology-Heart and Circulatory Physiology, vol. 41, p. H2693, 1997. </td>
        </tr>
        <tr>
                <td>[Berkenbosch1979]</td>
                <td>A. Berkenbosch, J. Van Dissel, C. N. Olievier, J. De Goede, and J. Heeringa, \"The contribution of the peripheral chemoreceptors to the ventilatory response to CO2 in anaesthetized cats during hyperoxia,\" Respiration Physiology, vol. 37, pp. 381-390, 8// 1979. </td>
        </tr>
        <tr>
                <td>[Bevegärd1962]</td>
                <td>S. Bevegärd and A. Lodin, \"Postural Circulatory Changes at Rest and during Exercise in five Patients with Congenital Absence of Valves in the Deep Veins of the Legs,\" Acta Medica Scandinavica, vol. 172, pp. 21-29, 1962. </td>
        </tr>
        <tr>
                <td>[Biscoe1970]</td>
                <td>T. J. Biscoe, M. J. Purves, and S. R. Sampson, \"The frequency of nerve impulses in single carotid body chemoreceptor afferent fibres recorded in vivo with intact circulation,\" The Journal of Physiology, vol. 208, pp. 121-131, May 1, 1970 1970. </td>
        </tr>
        <tr>
                <td>[Black1971]</td>
                <td>A. M. Black, D. I. McCloskey, and R. W. Torrance, \"The responses of carotid body chemoreceptors in the cat to sudden changes of hypercapnic and hypoxic stimuli,\" Respir Physiol, vol. 13, pp. 36-49, Oct 1971. </td>
        </tr>
        <tr>
                <td>[Blackard1970]</td>
                <td>W. G. Blackard and N. C. Nelson, \"Portal and Peripheral Vein Immunoreactive Insulin Concentrations Before and After Glucose Infusion,\" Diabetes, vol. 19, pp. 302-306, May 1, 1970 1970. </td>
        </tr>
        <tr>
                <td>[Blackard1974]</td>
                <td>W. G. Blackard, N. C. Nelson, and S. S. Andrews, \"Portal and Peripheral Vein Immunoreactive Glucagon Concentrations After Arginine or Glucose Infusions,\" Diabetes, vol. 23, pp. 199-202, March 1, 1974 1974. </td>
        </tr>
        <tr>
                <td>[Blatteis1997]</td>
                <td>C. M. Blatteis and E. Sehic, \"Fever: how may circulating pyrogens signal the brain?,\" News in Physiological Sciences, vol. 12, pp. 1-8, 1997. </td>
        </tr>
        <tr>
                <td>[Block1952]</td>
                <td>M. A. Block, K. G. Wakim, and F. C. Mann, \"Renal function during stimulation of renal nerves,\" Am J Physiol, vol. 169, pp. 670-677, 1952. </td>
        </tr>
        <tr>
                <td>[Bock1930]</td>
                <td>A. V. Bock, D. B. Dill, and H. T. Edwards, \"ON THE RELATION OF CHANGES IN BLOOD VELOCITY AND VOLUME FLOW OF BLOOD TO CHANGE OF POSTURE,\" The Journal of Clinical Investigation, vol. 8, pp. 533-544, 1930. </td>
        </tr>
        <tr>
                <td>[Bonvalet1990]</td>
                <td>J. Bonvalet, \"Aldosterone-sensitive cells in the kidney: new insights,\" News Physiol Sci, vol. 6, pp. 201-205, 1990. </td>
        </tr>
        <tr>
                <td>[Bootsma1994]</td>
                <td>M. Bootsma, C. A. Swenne, H. H. Van Bolhuis, P. C. Chang, V. M. Cats, and A. Bruschke, \"Heart rate and heart rate variability as indexes of sympathovagal balance,\" American Journal of Physiology, vol. 266, pp. H1565-H1565, 1994. </td>
        </tr>
        <tr>
                <td>[Borgdorff1990]</td>
                <td>P. Borgdorff, D. R. Gross, R. Burattini, P. Duijst, and N. Westerhof, \"Short-term systemic autoregulation,\" Am J Physiol Heart Circ Physiol, vol. 258, pp. H1097-H1102, 1990. </td>
        </tr>
        <tr>
                <td>[Borgström1975]</td>
                <td>L. Borgström, H. Jóhannsson, and B. K. Siesjö, \"The Relationship between Arterial PO2 and Cerebral Blood Flow in Hypoxic Hypoxia,\" Acta Physiologica Scandinavica, vol. 93, pp. 423-432, 1975. </td>
        </tr>
        <tr>
                <td>[Braam1993]</td>
                <td>B. Braam, K. D. Mitchell, H. A. Koomans, and L. G. Navar, \"Relevance of the tubuloglomerular feedback mechanism in pathophysiology,\" Journal of the American Society of Nephrology, vol. 4, pp. 1257-1274, 1993. </td>
        </tr>
        <tr>
                <td>[BRADLEY1952]</td>
                <td>S. E. BRADLEY, F. J. INGELFINGER, and G. P. BRADLEY, \"Hepatic Circulation in Cirrhosis of the Liver,\" Circulation, vol. 5, pp. 419-429, March 1, 1952 1952. </td>
        </tr>
        <tr>
                <td>[Bradley2000]</td>
                <td>R. L. Bradley, K. A. Cleveland, and B. Cheatham, \"The adipocyte as a secretory organ: mechanisms of vesicle transport and secretory pathways,\" Recent progress in hormone research, vol. 56, pp. 329-358, 2000. </td>
        </tr>
        <tr>
                <td>[Bradley1953]</td>
                <td>S. E. Bradley, P. A. Marks, P. C. Reynell, and J. Meltzer, \"The circulating splanchnic blood volume in dog and man,\" Trans Assoc Am Physicians, vol. 66, pp. 294-302, 1953. </td>
        </tr>
        <tr>
                <td>[Braunwald1976]</td>
                <td>E. Braunwald, J. Ross, and E. H. Sonnenblick, Mechanisms of contraction of the normal and failing heart: Little, Brown Boston, 1976. </td>
        </tr>
        <tr>
                <td>[Braunwald1961]</td>
                <td>E. Braunwald, R. D. Bloodwell, L. I. Goldberg, and A. G. Morrow, \"STUDIES ON DIGITALIS. IV. OBSERVATIONS IN MAN ON THE EFFECTS OF DIGITALIS PREPARATIONS ON THE CONTRACTILITY OF THE NON-FAILING HEART AND ON TOTAL VASCULAR RESISTANCE,\" The Journal of Clinical Investigation, vol. 40, pp. 52-59, 1961. </td>
        </tr>
        <tr>
                <td>[Brebbia1957]</td>
                <td>D. R. Brebbia, R. F. Goldman, and E. R. Buskirk, Water Vapor Loss From the Respiratory Tract During Outdoor Exercise in the Cold vol. 11, 1957. </td>
        </tr>
        <tr>
                <td>[Brenner1977]</td>
                <td>B. M. Brenner and H. D. Humes, \"Mechanics of Glomerular Ultrafiltration,\" New England Journal of Medicine, vol. 297, pp. 148-154, 1977. </td>
        </tr>
        <tr>
                <td>[Brenner1977]</td>
                <td>B. M. Brenner and H. D. Humes, \"Mechanics of glomerular ultrafiltration,\" N Engl J Med, vol. 297, pp. 148-54, Jul 21 1977. </td>
        </tr>
        <tr>
                <td>[Breslow1993]</td>
                <td>M. J. Breslow, J. R. Tobin, D. S. Bredt, C. D. Ferris, S. H. Snyder, and R. J. Traystman, Nitric oxide as a regulator of adrenal blood flow vol. 264, 1993. </td>
        </tr>
        <tr>
                <td>[Brezis1995]</td>
                <td>M. Brezis and S. Rosen, \"Hypoxia of the Renal Medulla — Its Implications for Disease,\" New England Journal of Medicine, vol. 332, pp. 647-655, 1995. </td>
        </tr>
        <tr>
                <td>[Briscoe1958]</td>
                <td>W. A. Briscoe and A. B. Dubois, \"The Relationship Between Airway Resistance, Airway Conductance and Lung Volume in Subjects of Different Age and Body Size12,\" The Journal of Clinical Investigation, vol. 37, pp. 1279-1285, 1958. </td>
        </tr>
        <tr>
                <td>[Brown1982]</td>
                <td>M. J. Brown, F. J. M. Lhoste, C. Zamboulis, P. W. Ind, D. A. Jenner, and C. T. Dollery, \"Estimation of sympathetic activity in essential hypertension,\" Clin. Pharm. Ther., vol. 31, pp. 16-22, 01//print 1982. </td>
        </tr>
        <tr>
                <td>[Brugard2009]</td>
                <td>J. Brugard, D. Hedberg, M. Cascante, G. Cedersund, A. Gómez-Garrido, D. Maier, et al., \"Creating a Bridge between Modelica and the Systems Biology Community,\" in 7th International Modelica Conference, Como, Italy, 2009. </td>
        </tr>
        <tr>
                <td>[Brugard2009]</td>
                <td>J. Brugard, D. Hedberg, M. Cascante, G. Cedersund, A. Gómez-Garrido, D. Maier, et al., \"Creating a Bridge between Modelica and the Systems Biology Community,\" in 7th International Modelica Conference, Como, Italy, 2009. </td>
        </tr>
        <tr>
                <td>[BRUNNER1979]</td>
                <td>H. R. BRUNNER, H. GAVRAS, B. WAEBER, G. R. KERSHAW, G. A. TURINI, R. A. VUKOVICH, et al., \"Oral angiotensin-converting enzyme inhibitor in long-term treatment of hypertensive patients,\" Annals of internal medicine, vol. 90, pp. 19-23, 1979. </td>
        </tr>
        <tr>
                <td>[Bruun1990]</td>
                <td>N. Bruun, P. Skott, N. M. Damkjaer, S. Rasmussen, H. Schütten, A. Leth, et al., \"Normal renal tubular response to changes of sodium intake in hypertensive man,\" Journal of hypertension, vol. 8, pp. 219-227, 1990. </td>
        </tr>
        <tr>
                <td>[Buckey1988]</td>
                <td>J. C. Buckey, R. M. Peshock, and C. G. Blomqvist, \"Deep venous contribution to hydrostatic blood volume change in the human leg,\" Am J Cardiol, vol. 62, pp. 449-53, Sep 1 1988. </td>
        </tr>
        <tr>
                <td>[Burattini1994]</td>
                <td>R. Burattini, P. Borgdorff, and N. Westerhof, \"Relationship between strength of short-term systemic autoregulation and initial resistance,\" American Journal of Physiology-Regulatory Integrative and Comparative Physiology, vol. 36, p. R1182, 1994. </td>
        </tr>
        <tr>
                <td>[Burton1935]</td>
                <td>A. C. Burton, \"Human Calorimetry II. The Average Temperature of the Tissues of the BodyThree Figures,\" The Journal of Nutrition, vol. 9, pp. 261-280, 1935. </td>
        </tr>
        <tr>
                <td>[Bushinsky1982]</td>
                <td>D. A. Bushinsky, F. L. Coe, C. Katzenberg, J. P. Szidon, and J. H. Parks, \"Arterial Pco2 in chronic metabolic acidosis,\" Kidney Int, vol. 22, pp. 311-314, 09//print 1982. </td>
        </tr>
        <tr>
                <td>[Butler1960]</td>
                <td>J. Butler, C. G. Caro, R. Alcala, and A. B. DuBois, \"PHYSIOLOGICAL FACTORS AFFECTING AIRWAY RESISTANCE IN NORMAL SUBJECTS AND IN PATIENTS WITH OBSTRUCTIVE RESPIRATORY DISEASE*,\" The Journal of Clinical Investigation, vol. 39, pp. 584-591, 1960. </td>
        </tr>
        <tr>
                <td>[Cahan1990]</td>
                <td>C. Cahan, P. Hoekje, E. Goldwasser, M. Decker, and K. Strohl, \"Assessing the characteristic between length of hypoxic exposure and serum erythropoietin levels,\" Am. J. Physiol, vol. 258, pp. R1016-R1021, 1990. </td>
        </tr>
        <tr>
                <td>[Cahill1970]</td>
                <td>G. F. Cahill, \"Starvation in Man,\" New England Journal of Medicine, vol. 282, pp. 668-675, 1970. </td>
        </tr>
        <tr>
                <td>[Cahill1981]</td>
                <td>G. F. Cahill, Jr., \"Ketosis,\" Kidney Int, vol. 20, pp. 416-425, 09//print 1981. </td>
        </tr>
        <tr>
                <td>[Carlson1954]</td>
                <td>L. D. Carlson, \"The Adequate Stimulus for Shivering,\" Experimental Biology and Medicine, vol. 85, pp. 303-305, February 1, 1954 1954. </td>
        </tr>
        <tr>
                <td>[Carlson1971]</td>
                <td>L. Carlson, L. Ekelund, and S. Fröberg, \"Concentration of triglycerides, phospholipids and glycogen in skeletal muscle and of free fatty acids and beta-hydroxybutyric acid in blood in man in response to exercise,\" European journal of clinical investigation, vol. 1, pp. 248-254, 1971. </td>
        </tr>
        <tr>
                <td>[Carter1998]</td>
                <td>Y. M. Carter, C. X. Jia, P. F. Soto, J. P. Starr, D. G. Rabkin, D. T. Hsu, et al., \"Diastolic properties, myocardial water content, and histologic condition of the rat left ventricle: effect of varied osmolarity of a coronary perfusate,\" The Journal of heart and lung transplantation : the official publication of the International Society for Heart Transplantation, vol. 17, pp. 140-149, 1998/02// 1998. </td>
        </tr>
        <tr>
                <td>[Case1977]</td>
                <td>D. B. Case, J. M. Wallace, H. J. Keim, M. A. Weber, J. E. Sealey, and J. H. Laragh, \"Possible role of renin in hypertension as suggested by renin-sodium profiling and inhibition of converting enzyme,\" New England Journal of Medicine, vol. 296, pp. 641-646, 1977. </td>
        </tr>
        <tr>
                <td>[Cellier2005]</td>
                <td>F. E. Cellier and A. Nebot, \"Object-oriented Modeling in the Service of Medicine,\" in Proc. 6th Asia Simulation Conference, 2005, pp. 33-40. </td>
        </tr>
        <tr>
                <td>[LLC2012]</td>
                <td>L. b. U. o. M. M. Center, \"HumMod,\" p. http://hummod.org/, 2012. </td>
        </tr>
        <tr>
                <td>[Clutter1980]</td>
                <td>W. E. Clutter, D. M. Bier, S. D. Shah, and P. E. Cryer, \"Epinephrine plasma metabolic clearance rates and physiologic thresholds for metabolic and hemodynamic actions in man,\" Journal of Clinical Investigation, vol. 66, p. 94, 1980. </td>
        </tr>
        <tr>
                <td>[Clutter1980]</td>
                <td>W. E. Clutter, D. M. Bier, S. D. Shah, and P. E. Cryer, \"Epinephrine plasma metabolic clearance rates and physiologic thresholds for metabolic and hemodynamic actions in man,\" The Journal of Clinical Investigation, vol. 66, pp. 94-101, 1980. </td>
        </tr>
        <tr>
                <td>[Clutter1980]</td>
                <td>W. E. Clutter, D. M. Bier, S. D. Shah, and P. E. Cryer, \"Epinephrine plasma metabolic clearance rates and physiologic thresholds for metabolic and hemodynamic actions in man,\" The Journal of Clinical Investigation, vol. 66, pp. 94-101, 1980. </td>
        </tr>
        <tr>
                <td>[Cogan1979]</td>
                <td>M. G. Cogan, D. A. Maddox, M. S. Lucci, F. C. Rector Jr, M. R. Mueller, and K. R. Wong, \"Control of proximal bicarbonate reabsorption in normal and acidotic rats,\" Journal of Clinical Investigation, vol. 64, p. 1168, 1979. </td>
        </tr>
        <tr>
                <td>[Cogan1979]</td>
                <td>M. G. Cogan, D. A. Maddox, M. S. Lucci, F. C. Rector Jr, M. R. Mueller, and K. R. Wong, \"Control of proximal bicarbonate reabsorption in normal and acidotic rats,\" Journal of Clinical Investigation, vol. 64, p. 1168, 1979. </td>
        </tr>
        <tr>
                <td>[Coleman1973]</td>
                <td>D. L. Coleman, \"Effects of parabiosis of obese with diabetes and normal mice,\" Diabetologia, vol. 9, pp. 294-298, 1973/08/01 1973. </td>
        </tr>
        <tr>
                <td>[Coleman1983]</td>
                <td>T. G. Coleman and J. E. Randall, \"A Comprehensive Physiological Model,\" The Physiologist, vol. 26, 1983. </td>
        </tr>
        <tr>
                <td>[Coleman1972]</td>
                <td>T. G. Coleman, R. D. Manning, Jr., R. A. Norman, Jr., and A. C. Guyton, \"Dynamics of water-isotope distribution,\" Am J Physiol, vol. 223, pp. 1371-5, Dec 1972. </td>
        </tr>
        <tr>
                <td>[Collins-Nakai1994]</td>
                <td>R. L. Collins-Nakai, D. Noseworthy, and G. D. Lopaschuk, \"Epinephrine increases ATP production in hearts by preferentially increasing glucose metabolism,\" Am J Physiol, vol. 267, pp. H1862-71, Nov 1994. </td>
        </tr>
        <tr>
                <td>[Conci2001]</td>
                <td>F. Conci, M. Di Rienzo, and P. Castiglioni, \"Blood pressure and heart rate variability and baroreflex sensitivity before and after brain death,\" Journal of Neurology, Neurosurgery & Psychiatry, vol. 71, pp. 621-631, 2001. </td>
        </tr>
        <tr>
                <td>[Considine1996]</td>
                <td>R. V. Considine, M. K. Sinha, M. L. Heiman, A. Kriauciunas, T. W. Stephens, M. R. Nyce, et al., \"Serum Immunoreactive-Leptin Concentrations in Normal-Weight and Obese Humans,\" New England Journal of Medicine, vol. 334, pp. 292-295, 1996. </td>
        </tr>
        <tr>
                <td>[Consolazio1961]</td>
                <td>C. F. Consolazio, R. Shapiro, J. E. Masterson, and P. S. McKinzie, \"Energy requirements of men in extreme heat,\" The Journal of Nutrition, vol. 73, pp. 126-134, 1961. </td>
        </tr>
        <tr>
                <td>[Consolazio1963]</td>
                <td>C. F. Consolazio, L. O. Matoush, R. A. Nelson, J. B. Torres, and G. J. Isaac, \"Environmental temperature and energy expenditures,\" J Appl Physiol, vol. 18, pp. 65-68, 1963. </td>
        </tr>
        <tr>
                <td>[Conte1992]</td>
                <td>G. Conte, G. Romano, V. Sepe, L. De Nicola, M. Sabbatini, D. Russo, et al., \"Role of inhibition of atrial natriuretic factor release in the down-regulation of salt excretion,\" Kidney Int, vol. 42, pp. 673-680, 1992. </td>
        </tr>
        <tr>
                <td>[Cortney1966]</td>
                <td>M. Cortney, W. Nagel, and K. Thurau, \"A micropuncture study of the relationship between flow-rate through the loop of Henle and sodium concentration in the early distal tubule,\" Pflüger's Archiv für die gesamte Physiologie des Menschen und der Tiere, vol. 287, pp. 286-295, 1966/09/01 1966. </td>
        </tr>
        <tr>
                <td>[Cota2006]</td>
                <td>D. Cota, K. Proulx, K. A. B. Smith, S. C. Kozma, G. Thomas, S. C. Woods, et al., \"Hypothalamic mTOR Signaling Regulates Food Intake,\" Science, vol. 312, pp. 927-930, May 12, 2006 2006. </td>
        </tr>
        <tr>
                <td>[Cox1978]</td>
                <td>M. Cox, R. H. Sterns, and I. Singer, \"The Defense against Hyperkalemia: The Roles of Insulin and Aldosterone,\" New England Journal of Medicine, vol. 299, pp. 525-532, 1978. </td>
        </tr>
        <tr>
                <td>[Cryer1993]</td>
                <td>P. E. Cryer, Glucose counterregulation: prevention and correction of hypoglycemia in humans vol. 264, 1993. </td>
        </tr>
        <tr>
                <td>[Cumin1996]</td>
                <td>F. Cumin, H. P. Baum, and N. Levens, \"Leptin is cleared from the circulation primarily by the kidney,\" International journal of obesity and related metabolic disorders : journal of the International Association for the Study of Obesity, vol. 20, pp. 1120-1126, 1996/12// 1996. </td>
        </tr>
        <tr>
                <td>[Dash1975]</td>
                <td>S. Dash, K. Chugh, R. Nath, and P. Wahi, \"Effect of rapid lowering of blood pressure on renal function in hypertensives with renal failure,\" The Indian journal of medical research, vol. 63, pp. 902-909, 1975. </td>
        </tr>
        <tr>
                <td>[Davidson1986]</td>
                <td>D. Davidson, S. A. Stalcup, and R. B. Mellins, Systemic hemodynamics affecting cardiac output during hypocapnic and hypercapnic hypoxia vol. 60, 1986. </td>
        </tr>
        <tr>
                <td>[de1992]</td>
                <td>D. de Zeeuw, W. M. Janssen, and P. E. de Jong, \"Atrial natriuretic factor: its (patho) physiological significance in humans,\" Kidney Int, vol. 41, pp. 1115-33, 1992. </td>
        </tr>
        <tr>
                <td>[DeFronzo1980]</td>
                <td>R. A. DeFronzo, P. Felig, E. Ferrannini, and J. Wahren, \"Effect of graded doses of in"
             + "sulin on splanchnic and peripheral potassium metabolism in man,\" Am J Physiol, vol. 238, pp. E421-7, 1980. </td>
        </tr>
        <tr>
                <td>[Defronzo1978]</td>
                <td>R. A. Defronzo, R. S. Sherwin, M. Dillingham, R. Hendler, W. V. Tamborlane, and P. Felig, \"Influence of basal insulin and glucagon secretion on potassium and sodium metabolism: studies with somatostatin in normal dogs and in normal and diabetic human beings,\" Journal of Clinical Investigation, vol. 61, p. 472, 1978. </td>
        </tr>
        <tr>
                <td>[Degroot1977]</td>
                <td>L. J. Degroot and H. Niepomniszcze, \"Biosynthesis of thyroid hormone: basic and clinical aspects,\" Metabolism, vol. 26, pp. 665-718, 1977. </td>
        </tr>
        <tr>
                <td>[Deheneffe1976]</td>
                <td>J. Deheneffe, V. Cuesta, J. Briggs, J. Brown, R. Fraser, A. Lever, et al., \"Response of aldosterone and blood pressure to angiotensin II infusion in anephric man. Effect of sodium deprivation,\" Circulation research, vol. 39, pp. 183-190, 1976. </td>
        </tr>
        <tr>
                <td>[Devaux1968]</td>
                <td>C. Devaux, J. Menard, J.-M. Alexandre, J.-M. Idatte, P. Meyer, and P. Milliez, \"Variations in renin and its substrate after binephrectomy,\" The Lancet, vol. 291, p. 300, 1968. </td>
        </tr>
        <tr>
                <td>[DiBona1997]</td>
                <td>G. F. DiBona and U. C. Kopp, Neural control of renal function vol. 77, 1997. </td>
        </tr>
        <tr>
                <td>[Dighe2004]</td>
                <td>A. S. Dighe, F. J. Hayes, J. Khosravi, U. Bodani, and P. M. Sluss, \"Comparison of Inhibin A Immunoassays: Recommendation for Adoption of Standardized Reporting,\" Clinical Chemistry, vol. 50, pp. 767-769, April 1, 2004 2004. </td>
        </tr>
        <tr>
                <td>[Dill1941]</td>
                <td>D. B. Dill and W. H. Forbes, RESPIRATORY AND METABOLIC EFFECTS OF HYPOTHERMIA vol. 132, 1941. </td>
        </tr>
        <tr>
                <td>[Dimri1980]</td>
                <td>G. Dimri, M. Malhotra, J. S. Gupta, T. S. Kumar, and B. Arora, \"Alterations in aerobic-anaerobic proportions of metabolism during work in heat,\" European journal of applied physiology and occupational physiology, vol. 45, pp. 43-50, 1980. </td>
        </tr>
        <tr>
                <td>[Dobson1967]</td>
                <td>H. L. Dobson, L. Robbins, P. C. Johnson, J. Mdalel, D. D. Odem, G. Cornwall, et al., \"Absorption of 131-I labeled modified insulin,\" Metabolism, vol. 16, pp. 723-732, 8// 1967. </td>
        </tr>
        <tr>
                <td>[Dodt1952]</td>
                <td>E. Dodt and Y. Zotterman, \"Mode of action of warm receptors,\" Acta physiologica scandinavica, vol. 26, pp. 345-357, 1952. </td>
        </tr>
        <tr>
                <td>[DOEDEN1987]</td>
                <td>B. DOEDEN and R. RIZZA, \"Use of a Variable Insulin Infusion to Assess Insulin Action in Obesity: Defects in Both the Kinetics and Amplitude of Response,\" The Journal of Clinical Endocrinology & Metabolism, vol. 64, pp. 902-908, 1987. </td>
        </tr>
        <tr>
                <td>[Donnan1911]</td>
                <td>F. G. Donnan, \"Theorie der Membrangleichgewichte und Membranpotentiale bei Vorhandensein von nicht dialysierenden Elektrolyten. Ein Beitrag zur physikalisch-chemischen Physiologie,\" Zeitschrift für Elektrochemie und angewandte physikalische Chemie, vol. 17, pp. 572-581, 1911. </td>
        </tr>
        <tr>
                <td>[Drake2002]</td>
                <td>R. E. Drake and M. F. Doursout, Pulmonary Edema and Elevated Left Atrial Pressure: Four Hours and Beyond vol. 17, 2002. </td>
        </tr>
        <tr>
                <td>[DREES1974]</td>
                <td>J. A. DREES and C. F. Rothe, \"Reflex venoconstriction and capacity vessel pressure-volume relationships in dogs,\" Circulation research, vol. 34, pp. 360-373, 1974. </td>
        </tr>
        <tr>
                <td>[Drenick1972]</td>
                <td>E. J. Drenick, L. C. Alvarez, G. C. Tamasi, and A. S. Brickman, \"Resistance to Symptomatic Insulin Reactions after Fasting,\" The Journal of Clinical Investigation, vol. 51, pp. 2757-2762, 1972. </td>
        </tr>
        <tr>
                <td>[Drummond2008]</td>
                <td>H. A. Drummond, S. C. Grifoni, and N. L. Jernigan, \"A new trick for an old dogma: ENaC proteins as mechanotransducers in vascular smooth muscle,\" Physiology, vol. 23, pp. 23-31, 2008. </td>
        </tr>
        <tr>
                <td>[Drury1927]</td>
                <td>A. Drury and N. Jones, \"Observations upon the rate at which oedema forms when the veins of the human limb are congested,\" Heart, vol. 14, p. 8, 1927. </td>
        </tr>
        <tr>
                <td>[Drury1927]</td>
                <td>A. Drury and N. Jones, \"Observations upon the rate at which oedema forms when the veins of the human limb are congested,\" Heart, vol. 14, p. 8, 1927. </td>
        </tr>
        <tr>
                <td>[Duffin1972]</td>
                <td>J. Duffin, \"A mathematical model of the chemoreflex control of ventilation,\" Respiration Physiology, vol. 15, pp. 277-301, 7// 1972. </td>
        </tr>
        <tr>
                <td>[Duffin2000]</td>
                <td>J. Duffin, R. M. Mohan, P. Vasiliou, R. Stephenson, and S. Mahamed, \"A model of the chemoreflex control of breathing in humans: model parameters measurement,\" Respiration Physiology, vol. 120, pp. 13-26, 3// 2000. </td>
        </tr>
        <tr>
                <td>[Dunbar2001]</td>
                <td>S. L. Dunbar, L. Tamhidi, D. E. Berkowitz, and A. A. Shoukas, Hindlimb unweighting affects rat vascular capacitance function vol. 281, 2001. </td>
        </tr>
        <tr>
                <td>[Dunnill1973]</td>
                <td>M. S. Dunnill and W. Halley, \"Some observations on the quantitative anatomy of the kidney,\" The Journal of Pathology, vol. 110, pp. 113-121, 1973. </td>
        </tr>
        <tr>
                <td>[Dyckner1978]</td>
                <td>T. Dyckner and P. O. Wester, \"Ventricular Extrasystoles and Intracellular Electrolytes in Hypokalemic Patients before and after Correction of the Hypokalemia,\" Acta Medica Scandinavica, vol. 204, pp. 375-379, 1978. </td>
        </tr>
        <tr>
                <td>[Ebeling1994]</td>
                <td>P. Ebeling and V. A. Koivisto, \"Non-esterified fatty acids regulate lipid and glucose oxidation and glycogen synthesis in healthy man,\" Diabetologia, vol. 37, pp. 202-209, 1994/02/01 1994. </td>
        </tr>
        <tr>
                <td>[Eckardt1989]</td>
                <td>K. U. Eckardt, A. Kurtz, and C. Bauer, \"Regulation of erythropoietin production is related to proximal tubular function,\" The American journal of physiology. Renal physiology, vol. 256, pp. F942-F947, 1989. </td>
        </tr>
        <tr>
                <td>[Eckardt1990]</td>
                <td>K. U. Eckardt, A. Kurtz, and C. Bauer, \"Triggering of erythropoietin production by hypoxia is inhibited by respiratory and metabolic acidosis,\" The American journal of physiology : AJP. Regu Physiol, vol. 258, pp. R678-R683, 1990. </td>
        </tr>
        <tr>
                <td>[Edelman1974]</td>
                <td>I. S. Edelman, \"Thyroid Thermogenesis,\" New England Journal of Medicine, vol. 290, pp. 1303-1308, 1974. </td>
        </tr>
        <tr>
                <td>[ECHT1974]</td>
                <td>M. ECHT, J. DÜWELING, O. H. GAUER, and L. LANGE, \"Effective Compliance of the Total Vascular Bed and the Intrathoracic Compartment Derived from Changes in Central Venous Pressure Induced by Volume Changes in Man,\" Circulation Research, vol. 34, pp. 61-68, January 1, 1974 1974. </td>
        </tr>
        <tr>
                <td>[Eisenhoffer1994]</td>
                <td>J. Eisenhoffer, S. Lee, and M. Johnston, \"Pressure-flow relationships in isolated sheep prenodal lymphatic vessels,\" American Journal of Physiology-Heart and Circulatory Physiology, vol. 36, p. H938, 1994. </td>
        </tr>
        <tr>
                <td>[Elmqvist2003]</td>
                <td>H. Elmqvist, H. Tummescheit, and M. Otter, \"Object-oriented modeling of thermo-fluid systems,\" in 3rd International Modelica Conference, 2003, pp. 269-286. </td>
        </tr>
        <tr>
                <td>[Elsasser1980]</td>
                <td>V. Elsasser, R. Hesp, L. Klenerman, and R. Wootton, \"Deficit of trabecular and cortical bone in elderly women with fracture of the femoral neck,\" Clin Sci, vol. 59, pp. 393-395, 1980. </td>
        </tr>
        <tr>
                <td>[Engelson1999]</td>
                <td>V. Engelson, H. Larsson, and P. Fritzson, \"A design, simulation and visualization environment for object-oriented mechanical and multi-domain models in Modelica,\" in Information Visualization, 1999. Proceedings. 1999 IEEE International Conference on, 1999, pp. 188-193. </td>
        </tr>
        <tr>
                <td>[Engeset1973]</td>
                <td>A. Engeset, B. Hager, A. Nesheim, and A. Kolbenstvedt, \"Studies on human peripheral lymph. I. Sampling method,\" Lymphology, vol. 6, pp. 1-5, 1973. </td>
        </tr>
        <tr>
                <td>[Engeset1973]</td>
                <td>A. Engeset, B. Hager, A. Nesheim, and A. Kolbenstvedt, \"Studies on human peripheral lymph. I. Sampling method,\" Lymphology, vol. 6, pp. 1-5, 1973. </td>
        </tr>
        <tr>
                <td>[Epstein1999]</td>
                <td>Y. Epstein and L. E. Armstrong, \"Fluid-electrolyte balance during labor and exercise: concepts and misconceptions,\" International journal of sport nutrition, vol. 9, pp. 1-12, 1999. </td>
        </tr>
        <tr>
                <td>[Erslev]</td>
                <td>ErslevA. J. Erslev, \"Erythropoietin,\" Leukemia Research, vol. 14, pp. 683-688.</td>
        </tr>
        <tr>
                <td>[Erslev1985]</td>
                <td>A. J. Erslev, J. Caro, and A. Besarab, \"Why the Kidney?,\" Nephron, vol. 41, pp. 213-216, 1985. </td>
        </tr>
        <tr>
                <td>[Erslev1987]</td>
                <td>A. Erslev, J. Wilson, and J. Caro, \"Erythropoietin titers in anemic, nonuremic patients,\" J Lab Clin Med, vol. 109, pp. 429-433, 1987. </td>
        </tr>
        <tr>
                <td>[Erwald1978]</td>
                <td>R. Erwald and K. Wiechel, \"Effect of vasopressin on central and splanchnic hemodynamics in awake man,\" Acta chirurgica Scandinavica, vol. 144, p. 347, 1978. </td>
        </tr>
        <tr>
                <td>[Eschbach1987]</td>
                <td>J. W. Eschbach, J. C. Egrie, M. R. Downing, J. K. Browne, and J. W. Adamson, \"Correction of the Anemia of End-Stage Renal Disease with Recombinant Human Erythropoietin,\" New England Journal of Medicine, vol. 316, pp. 73-78, 1987. </td>
        </tr>
        <tr>
                <td>[Eschbach1989]</td>
                <td>J. W. Eschbach, M. R. Kelly, N. R. Haley, R. I. Abels, and J. W. Adamson, \"Treatment of the Anemia of Progressive Renal Failure with Recombinant Human Erythropoietin,\" New England Journal of Medicine, vol. 321, pp. 158-163, 1989. </td>
        </tr>
        <tr>
                <td>[Eyzaguirre1961]</td>
                <td>C. Eyzaguirre and J. Lewin, \"Chemoreceptor activity of the carotid body of the cat,\" The Journal of Physiology, vol. 159, pp. 222-237, December 1, 1961 1961. </td>
        </tr>
        <tr>
                <td>[Eyzaguirre1961]</td>
                <td>C. Eyzaguirre and J. Lewin, \"The effect of sympathetic stimulation on carotid nerve activity,\" The Journal of Physiology, vol. 159, pp. 251-267, December 1, 1961 1961. </td>
        </tr>
        <tr>
                <td>[Eyzaguirre1965]</td>
                <td>C. Eyzaguirre and H. Koyano, \"Effects of hypoxia, hypercapnia, and pH on the chemoreceptor activity of the carotid body in vitro,\" The Journal of Physiology, vol. 178, pp. 385-409, June 1, 1965 1965. </td>
        </tr>
        <tr>
                <td>[Fan1980]</td>
                <td>F. C. Fan, R. Y. Chen, G. B. Schuessler, and S. Chien, Effects of hematocrit variations on regional hemodynamics and oxygen transport in the dog vol. 238, 1980. </td>
        </tr>
        <tr>
                <td>[Farooqi2002]</td>
                <td>I. S. Farooqi, G. Matarese, G. M. Lord, J. M. Keogh, E. Lawrence, C. Agwu, et al., \"Beneficial effects of leptin on obesity, T cell hyporesponsiveness, and neuroendocrine/metabolic dysfunction of human congenital leptin deficiency,\" The Journal of Clinical Investigation, vol. 110, pp. 1093-1103, 2002. </td>
        </tr>
        <tr>
                <td>[Fatema2002]</td>
                <td>K. Fatema, O. Hirono, Y. Takeishi, J. Nitobe, K. Kaneko, M. Ito, et al., \"Hemodialysis improves myocardial interstitial edema and left ventricular diastolic function in patients with end-stage renal disease: noninvasive assessment by ultrasonic tissue characterization,\" Heart and vessels, vol. 16, pp. 227-231, 2002. </td>
        </tr>
        <tr>
                <td>[Felig1976]</td>
                <td>P. Felig, J. Wahren, R. Sherwin, and R. Hendler, \"The Lilly Lecture 1976: Insulin, Glucagon, and Somatostatin in Normal Physiology and Diabetes Mellitus,\" Diabetes, vol. 25, pp. 1091-1099, December 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Felig1976]</td>
                <td>P. Felig, J. Wahren, R. Sherwin, and R. Hendler, \"The Lilly Lecture 1976: Insulin, Glucagon, and Somatostatin in Normal Physiology and Diabetes Mellitus,\" Diabetes, vol. 25, pp. 1091-1099, December 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Fenner2008]</td>
                <td>J. W. Fenner, B. Brook, G. Clapworthy, P. Coveney, V. Feipel, H. Gregersen, et al., \"The EuroPhysiome, STEP and a roadmap for the virtual physiological human,\" Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences, vol. 366, pp. 2979-2999, 2008. </td>
        </tr>
        <tr>
                <td>[Ferguson1985]</td>
                <td>D. W. Ferguson, F. M. Abboud, and A. L. Mark, \"Relative contribution of aortic and carotid baroreflexes to heart rate control in man during steady state and dynamic increases in arterial pressure,\" The Journal of Clinical Investigation, vol. 76, pp. 2265-2274, 1985. </td>
        </tr>
        <tr>
                <td>[Ferris1938]</td>
                <td>E. B. Ferris Jr, M. Blankenhorn, H. W. Robinson, and G. E. Cullen, \"Heat stroke: clinical and chemical observations on 44 cases,\" Journal of Clinical Investigation, vol. 17, p. 249, 1938. </td>
        </tr>
        <tr>
                <td>[Field1985]</td>
                <td>M. J. Field and G. J. Giebisch, \"Hormonal control of renal potassium excretion,\" Kidney Int, vol. 27, pp. 379-87, 1985. </td>
        </tr>
        <tr>
                <td>[Figge1991]</td>
                <td>J. Figge, T. H. Rossing, and V. Fencl, \"The role of serum proteins in acid-base equilibria,\" J Lab Clin Med, vol. 117, pp. 453-67, Jun 1991. </td>
        </tr>
        <tr>
                <td>[Findley1937]</td>
                <td>T. Findley, Jr. and H. L. White, \"THE RESPONSE OF NORMAL INDIVIDUALS AND PATIENTS WITH DIABETES INSIPIDUS TO THE INGESTION OF WATER 1,\" The Journal of Clinical Investigation, vol. 16, pp. 197-202, 1937. </td>
        </tr>
        <tr>
                <td>[Fink1975]</td>
                <td>W. J. Fink, D. L. Costill, and P. J. Van Handel, \"Leg muscle metabolism during exercise in the heat and cold,\" European Journal of Applied Physiology and Occupational Physiology, vol. 34, pp. 183-190, 1975/12/01 1975. </td>
        </tr>
        <tr>
                <td>[Fitzgerald1971]</td>
                <td>R. S. Fitzgerald and D. C. Parks, \"Effect of hypoxia on carotid chemoreceptor response to carbon dioxide in cats,\" Respir Physiol, vol. 12, pp. 218-29, Jun 1971. </td>
        </tr>
        <tr>
                <td>[Fitzgerald1971]</td>
                <td>R. S. Fitzgerald and D. C. Parks, \"Effect of hypoxia on carotid chemoreceptor response to carbon dioxide in cats,\" Respir Physiol, vol. 12, pp. 218-29, Jun 1971. </td>
        </tr>
        <tr>
                <td>[FitzGerald1981]</td>
                <td>G. A. FitzGerald, V. Hossmann, and C. T. Dollery, \"Norepinephrine release in essential hypertension,\" Clin. Pharm. Ther., vol. 30, pp. 164-171, 08//print 1981. </td>
        </tr>
        <tr>
                <td>[Fitzgerald1980]</td>
                <td>G. A. Fitzgerald, P. Barnes, C. A. Hamilton, and C. T. Dollery, \"Circulating adrenaline and blood pressure: the metabolic effects and kinetics of infused adrenaline in man,\" European Journal of Clinical Investigation, vol. 10, pp. 401-406, 1980. </td>
        </tr>
        <tr>
                <td>[Fitzgerald1980]</td>
                <td>G. A. Fitzgerald, P. Barnes, C. A. Hamilton, and C. T. Dollery, \"Circulating adrenaline and blood pressure: the metabolic effects and kinetics of infused adrenaline in man,\" European Journal of Clinical Investigation, vol. 10, pp. 401-406, 1980. </td>
        </tr>
        <tr>
                <td>[Flatt1972]</td>
                <td>J. P. Flatt, \"On the Maximal Possible Rate of Ketogenesis,\" Diabetes, vol. 21, pp. 50-53, January 1, 1972 1972. </td>
        </tr>
        <tr>
                <td>[Florez-Duquet1998]</td>
                <td>M. Florez-Duquet and R. B. McDonald, \"Cold-induced thermoregulation and biological aging,\" Physiol Rev, vol. 78, pp. 339-58, Apr 1998. </td>
        </tr>
        <tr>
                <td>[Folkers1969]</td>
                <td>K. Folkers, F. Enzmann, J. Boler, C. Y. Bowers, and A. V. Schally, \"Discovery of modification of the synthetic tripeptide-sequence of the thyrotropin releasing hormone having activity,\" Biochem Biophys Res Commun, vol. 37, pp. 123-6, Sep 24 1969. </td>
        </tr>
        <tr>
                <td>[Forbes1962]</td>
                <td>G. B. Forbes, \"Methods for determining composition of the human body with a note on the effect of diet on body composition,\" Pediatrics, vol. 29, pp. 477-494, 1962. </td>
        </tr>
        <tr>
                <td>[Forbes1956]</td>
                <td>G. B. Forbes and A. M. Lewis, \"Total sodium, potassium and chloride in adult man,\" Journal of Clinical Investigation, vol. 35, p. 596, 1956. </td>
        </tr>
        <tr>
                <td>[Forbes1963]</td>
                <td>G. B. Forbes and J. B. Hursh, \"AGE AND SEX TRENDS IN LEAN BODY MASS CALCULATED FROM K40 MEASUREMENTS: WITH A NOTE ON THE THEORETICAL BASIS FOR THE PROCEDURE*,\" Annals of the New York Academy of Sciences, vol. 110, pp. 255-263, 1963. </td>
        </tr>
        <tr>
                <td>[Forster1971]</td>
                <td>H. V. Forster, J. A. Dempsey, M. L. Birnbaum, W. G. Reddan, J. Thoden, R. F. Grover, et al., Effect of chronic exposure to hypoxia on ventilatory response to CO 2 and hypoxia vol. 31, 1971. </td>
        </tr>
        <tr>
                <td>[Franco-Morselli1977]</td>
                <td>R. Franco-Morselli, J. Elghozi, E. Joly, S. Di Giuilio, and P. Meyer, \"Increased plasma adrenaline concentrations in benign essential hypertension,\" British medical journal, vol. 2, p. 1251, 1977. </td>
        </tr>
        <tr>
                <td>[Frayn2002]</td>
                <td>K. Frayn, \"Adipose tissue as a buffer for daily lipid flux,\" Diabetologia, vol. 45, pp. 1201-1210, 2002. </td>
        </tr>
        <tr>
                <td>[Friedman-Einat2003]</td>
                <td>M. Friedman-Einat, L. Camoin, Z. Faltin, C. Rosenblum, V. Kaliouta, Y. Eshdat, et al., \"Serum leptin activity in obese and lean patients,\" Regulatory peptides, vol. 111, pp. 77-82, 2003. </td>
        </tr>
        <tr>
                <td>[Frisbee2000]</td>
                <td>J. C. Frisbee and J. H. Lombard, \"Increased Intravascular Pressure Does Not Enhance Skeletal Muscle Arteriolar Constriction to Oxygen or Angiotensin II,\" Microvascular Research, vol. 59, pp. 176-180, 1// 2000. </td>
        </tr>
        <tr>
                <td>[Frisbee2000]</td>
                <td>J. C. Frisbee and J. H. Lombard, \"Short-term angiotensin converting enzyme inhibition reduces basal tone and dilator reactivity in skeletal muscle arterioles*,\" American Journal of Hypertension, vol. 13, pp. 389-395, April 1, 2000 2000. </td>
        </tr>
        <tr>
                <td>[Fritzson1998]</td>
                <td>P. Fritzson and V. Engelson, \"Modelica—A unified object-oriented language for system modeling and simulation,\" in ECOOP’98—Object-Oriented Programming, ed: Springer, 1998, pp. 67-90. </td>
        </tr>
        <tr>
                <td>[Gaasch1975]</td>
                <td>W. H. Gaasch, J. S. Cole, M. A. Quinones, and J. Alexander, \"Dynamic determinants of letf ventricular diastolic pressure-volume relations in man,\" Circulation, vol. 51, pp. 317-323, 1975. </td>
        </tr>
        <tr>
                <td>[Ganong1958]</td>
                <td>W. F. Ganong and P. J. Mulrow, \"Rate of Change in Sodium and Potassium Excretion After Injection of Aldosterone Into the Aorta and Renal Artery of the Dog’,\" change, vol. 7, p. 90, 1958. </td>
        </tr>
        <tr>
                <td>[Garlick1970]</td>
                <td>D. Garlick and E. Renkin, Transport of large molecules from plasma to interstitial fluid and lymph in dogs vol. 219, 1970. </td>
        </tr>
        <tr>
                <td>[GAUER1956]</td>
                <td>O. H. GAUER, J. P. HENRY, and H. O. SIEKER, \"Changes in Central Venous Pressure after Moderate Hemorrhage and Transfusion in Man,\" Circulation Research, vol. 4, pp. 79-84, January 1, 1956 1956. </td>
        </tr>
        <tr>
                <td>[Gauss1917]</td>
                <td>H. Gauss and K. Meyer, \"HEAT STROKE: REPORT OF ONE HUNDRED AND FIFTY-EIGHT CASES FROM COOK COUNTY HOSPITAL, CHICAGO,\" The American Journal of the Medical Sciences, vol. 154, p. 554, 1917. </td>
        </tr>
        <tr>
                <td>[Gautron2011]</td>
                <td>L. Gautron and J. K. Elmquist, \"Sixteen years and counting: an update on leptin in energy balance,\" The Journal of Clinical Investigation, vol. 121, pp. 2087-2093, 2011. </td>
        </tr>
        <tr>
                <td>[Gekle1998]</td>
                <td>M. Gekle, Renal Proximal Tubular Albumin Reabsorption: Daily Prevention of Albuminuria vol. 13, 1998. </td>
        </tr>
        <tr>
                <td>[George2004]</td>
                <td>S. George, J. J. Rochford, C. Wolfrum, S. L. Gray, S. Schinner, J. C. Wilson, et al., \"A family with severe insulin resistance and diabetes due to a mutation in AKT2,\" Science, vol. 304, pp. 1325-1328, 2004. </td>
        </tr>
        <tr>
                <td>[Gephart1915]</td>
                <td>F. C. Gephart and E. F. DuBOIS, \"FOURTH PAPER THE DETERMINATION OF THE BASAL METABOLISM OF NORMAL MEN AND THE EFFECT OF FOOD,\" Archives of Internal Medicine, vol. 15, pp. 835-867, 1915. </td>
        </tr>
        <tr>
                <td>[Gerich1975]</td>
                <td>J. E. Gerich, M. Lorenzi, D. M. Bier, V. Schneider, E. Tsalikian, J. H. Karam, et al., \"Prevention of human diabetic ketoacidosis by somatostatin: evidence for an essential role of glucagon,\" New England Journal of Medicine, vol. 292, pp. 985-989, 1975. </td>
        </tr>
        <tr>
                <td>[Gerich1975]</td>
                <td>J. E. Gerich, M. Lorenzi, D. M. Bier, V. Schneider, E. Tsalikian, J. H. Karam, et al., \"Prevention of Human Diabetic Ketoacidosis by Somatostatin,\" New England Journal of Medicine, vol. 292, pp. 985-989, 1975. </td>
        </tr>
        <tr>
                <td>[Ghazanshahi1993]</td>
                <td>S. Ghazanshahi and M. K. Khoo, \"Optimal ventilatory patterns in periodic breathing,\" Annals of Biomedical Engineering, vol. 21, pp. 517-530, 1993/09/01 1993. </td>
        </tr>
        <tr>
                <td>[Gibbs1942]</td>
                <td>E. L. Gibbs, F. A. Gibbs, W. G. Lennox, and L. F. Nims, \"REgulation of cerebral carbon dioxide,\" Archives of Neurology & Psychiatry, vol. 47, pp. 879-889, 1942. </td>
        </tr>
        <tr>
                <td>[GINSBERG1973]</td>
                <td>S. GINSBERG, M. B. BLOCK, M. E. MAKO, and A. H. RUBENSTEIN, \"Serum Insulin Levels Following Administration of Exogenous Insulin,\" The Journal of Clinical Endocrinology & Metabolism, vol. 36, pp. 1175-1179, 1973. </td>
        </tr>
        <tr>
                <td>[Glickson1974]</td>
                <td>J. D. Glickson and C. Pissiotis, Vasopressin: Chemical and clinical aspects vol. 1: Ardent Media, 1974. </td>
        </tr>
        <tr>
                <td>[Gold1940]</td>
                <td>H. Gold and M. Cattell, \"MEchanism of digitalis action in abolishing heart failure,\" Archives of Internal Medicine, vol. 65, pp. 263-278, 1940. </td>
        </tr>
        <tr>
                <td>[Goldberg1994]</td>
                <td>M. A. Goldberg and T. J. Schneider, \"Similarities between the oxygen-sensing mechanisms regulating the expression of vascular endothelial growth factor and erythropoietin,\" Journal of Biological Chemistry, vol. 269, pp. 4355-9, February 11, 1994 1994. </td>
        </tr>
        <tr>
                <td>[Goldstein2003]</td>
                <td>D. S. Goldstein, G. Eisenhofer, and I. J. Kopin, \"Sources and Significance of Plasma Levels of Catechols and Their Metabolites in Humans,\" Journal of Pharmacology and Experimental Therapeutics, vol. 305, pp. 800-811, June 1, 2003 2003. </td>
        </tr>
        <tr>
                <td>[Goldstein1987]</td>
                <td>S. Goldstein, J. Askanazi, C. Weissman, B. Thomashow, and J. Kinney, \"Energy expenditure in patients with chronic obstructive pulmonary disease,\" CHEST Journal, vol. 91, pp. 222-224, 1987. </td>
        </tr>
        <tr>
                <td>[Good1984]</td>
                <td>D. W. Good, H. Velazquez, and F. S. Wright, \"Luminal influences on potassium secretion: low sodium concentration,\" Am J Physiol, vol. 246, p. 20, 1984. </td>
        </tr>
        <tr>
                <td>[Goodman1978]</td>
                <td>A. H. Goodman, R. Einstein, and H. J. Granger, \"Effect of changing metabolic rate on local blood flow control in the canine hindlimb,\" Circulation Research, vol. 43, pp. 769-76, November 1, 1978 1978. </td>
        </tr>
        <tr>
                <td>[Gottschalk1959]</td>
                <td>C. W. Gottschalk and M. Mylle, \"Micropuncture study of the mammalian urinary concentrating mechanism: evidence for the countercurrent hypothesis,\" American Journal of Physiology--Legacy Content, vol. 196, pp. 927-936, 1959. </td>
        </tr>
        <tr>
                <td>[Gottschalk1960]</td>
                <td>C. W. Gottschalk, W. E. Lassiter, and M. Mylle, Localization of urine acidification in the mammalian kidney vol. 198, 1960. </td>
        </tr>
        <tr>
                <td>[Granger1969]</td>
                <td>H. J. Granger and A. C. Guyton, \"Autoregulation of the Total Systemic Circulation Following Destruction of the Central Nervous System in the Dog,\" Circulation Research, vol. 25, pp. 379-388, October 1, 1969 1969. </td>
        </tr>
        <tr>
                <td>[Granger1983]</td>
                <td>D. N. Granger and H. J. Granger, \"Systems analysis of intestinal hemodynamics and oxygenation,\" Am J Physiol, vol. 245, pp. G786-G796, 1983. </td>
        </tr>
        <tr>
                <td>[Granger1976]</td>
                <td>H. J. Granger, A. H. Goodman, and D. N. Granger, \"Role of resistance and exchange vessels in local microvascular control of skeletal muscle oxygenation in the dog,\" Circulation Research, vol. 38, pp. 379-85, May 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Granger1980]</td>
                <td>D. N. Granger, N. A. Mortillaro, P. R. Kvietys, G. Rutili, J. C. Parker, and A. E. Taylor, Role of the interstitial matrix during intestinal volume absorption vol. 238, 1980. </td>
        </tr>
        <tr>
                <td>[Greenway1973]</td>
                <td>C. Greenway and G. Oshiro, \"Effects of histamine on hepatic volume (outflow block) in anaesthetized dogs,\" British journal of pharmacology, vol. 47, pp. 282-290, 1973. </td>
        </tr>
        <tr>
                <td>[Greenway1974]</td>
                <td>C. V. Greenway and G. E. Lister, \"Capacitance effects and blood reservoir function in the splanchnic vascular bed during non-hypotensive haemorrhage and blood volume expansion in anaesthetized cats,\" The Journal of Physiology, vol. 237, pp. 279-294, March 1, 1974 1974. </td>
        </tr>
        <tr>
                <td>[Greenway1985]</td>
                <td>C. V. Greenway, K. L. Seaman, and I. R. Innes, Norepinephrine on venous compliance and unstressed volume in cat liver vol. 248, 1985. </td>
        </tr>
        <tr>
                <td>[Grimm1980]</td>
                <td>M. Grimm, P. Weidmann, G. Keusch, A. Meier, and Z. Glück, \"Norepinephrine clearance and pressor effect in normal and hypertensive man,\" Klinische Wochenschrift, vol. 58, pp. 1175-1181, 1980. </td>
        </tr>
        <tr>
                <td>[Gross1952]</td>
                <td>J. Gross and R. Pitt-Rivers, \"The identification of 3:5:3'-L-triiodothyronine in human plasma,\" Lancet, vol. 1, pp. 439-41, Mar 1 1952. </td>
        </tr>
        <tr>
                <td>[Gross1953]</td>
                <td>J. Gross and R. Pitt-Rivers, \"3: 5: 3'-Triiodothyronine. 1. Isolation from thyroid gland and synthesis,\" Biochemical Journal, vol. 53, p. 645, 1953. </td>
        </tr>
        <tr>
                <td>[Gross1953]</td>
                <td>J. Gross and R. Pitt-Rivers, \"3: 5: 3'-Triiodothyronine. 2. Physiological activity,\" Biochemical Journal, vol. 53, p. 652, 1953. </td>
        </tr>
        <tr>
                <td>[Guarente2009]</td>
                <td>L. Guarente, \"Hypoxic Hookup,\" Science, vol. 324, pp. 1281-1282, June 5, 2009 2009. </td>
        </tr>
        <tr>
                <td>[Guggino1989]</td>
                <td>W. B. Guggino and S. E. Guggino, \"Renal anion transport,\" Kidney Int, vol. 36, pp. 385-391, 09//print 1989. </td>
        </tr>
        <tr>
                <td>[Gullans1985]</td>
                <td>S. R. Gullans, M. J. Avison, T. Ogino, G. Giebisch, and R. G. Shulman, \"NMR measurements of intracellular sodium in the rabbit proximal tubule,\" Am. J. Physiol, vol. 249, pp. F160-F168, 1985. </td>
        </tr>
        <tr>
                <td>[Gutsche1980]</td>
                <td>H. U. Gutsche, R. Müller-Suur, U. Hegel, and K. Hierholzer, \"Electrical conductivity of tubular fluid of the rat nephron,\" Pflügers Archiv, vol. 383, pp. 113-121, 1980/01/01 1980. </td>
        </tr>
        <tr>
                <td>[Guyton1965]</td>
                <td>A. C. Guyton, \"Interstitial fluid pressure: II. Pressure-volume curves of interstitial space,\" Circulation research, vol. 16, pp. 452-460, 1965. </td>
        </tr>
        <tr>
                <td>[Guyton1961]</td>
                <td>A. C. Guyton and K. Sagawa, \"Compensations of cardiac output and other circulatory functions in areflex dogs with large AV fistulas,\" The American journal of physiology, vol. 200, p. 1157, 1961. </td>
        </tr>
        <tr>
                <td>[Guyton1972]</td>
                <td>A. C. Guyton, T. G. Coleman, and H. J. Granger, \"Circulation: overall regulation,\" Annual Review of Physiology, vol. 34, pp. 13-44, 1972. </td>
        </tr>
        <tr>
                <td>[Guyton1978]</td>
                <td>J. R. Guyton, R. O. Foster, J. S. Soeldner, M. H. Tan, C. B. Kahn, L. Koncz, et al., \"A Model of Glucose-insulin Homeostasis in Man that Incorporates the Heterogeneous Fast Pool Theory of Pancreatic Insulin Release,\" Diabetes, vol. 27, pp. 1027-1042, October 1, 1978 1978. </td>
        </tr>
        <tr>
                <td>[Hakkinen1995]</td>
                <td>J. P. Hakkinen, M. W. Miller, A. H. Smith, and D. R. Knight, \"Measurement of organ blood flow with coloured microspheres in the rat,\" Cardiovascular research, vol. 29, pp. 74-79, 1995. </td>
        </tr>
        <tr>
                <td>[Halaas1997]</td>
                <td>J. L. Halaas, C. Boozer, J. Blair-West, N. Fidahusein, D. A. Denton, and J. M. Friedman, \"Physiological response to long-term peripheral and central leptin infusion in lean and obese?mice,\" Proceedings of the National Academy of Sciences, vol. 94, pp. 8878-8883, August 5, 1997 1997. </td>
        </tr>
        <tr>
                <td>[Hall1986]</td>
                <td>J. E. Hall, \"Control of sodium excretion by angiotensin II: intrarenal mechanisms and blood pressure regulation,\" 1986. </td>
        </tr>
        <tr>
                <td>[Hall1983]</td>
                <td>J. E. Hall and J. P. Granger, Renal hemodynamic actions of angiotensin II: interaction with tubuloglomerular feedback vol. 245, 1983. </td>
        </tr>
        <tr>
                <td>[Hall1979]</td>
                <td>J. Hall, T. Coleman, A. Guyton, J. Balfe, and H. Salgado, \"Intrarenal role of angiotensin II and </td>
        </tr>
        <tr>
                <td>[des-Asp1]</td>
                <td>1977]        J. E. Hall, A. C. Guyton, N. C. Trippodo, T. E. Lohmeier, R. McCaa, and A. Cowley Jr, \"Intrarenal control of electrolyte excretion by angiotensin II,\" Am J Physiol, vol. 232, pp. F538-F544, 1977. </td>
        </tr>
        <tr>
                <td>[Hall1977]</td>
                <td>J. E. Hall, A. C. Guyton, T. E. Jackson, T. G. Coleman, T. E. Lohmeier, and N. C. Trippodo, \"Control of glomerular filtration rate by renin-angiotensin system,\" Am J Physiol, vol. 233, pp. F366-F372, 1977. </td>
        </tr>
        <tr>
                <td>[Halperin1989]</td>
                <td>M. L. Halperin and S. Cheema-Dhadli, \"Renal and hepatic aspects of ketoacidosis: A quantitative analysis based on energy turnover,\" Diabetes/Metabolism Reviews, vol. 5, pp. 321-336, 1989. </td>
        </tr>
        <tr>
                <td>[Hannaford1982]</td>
                <td>M. C. Hannaford, L. A. Leiter, R. G. Josse, M. B. Goldstein, E. B. Marliss, and M. L. Halperin, Protein wasting due to acidosis of prolonged fasting vol. 243, 1982. </td>
        </tr>
        <tr>
                <td>[HANNON1969]</td>
                <td>R. C. HANNON, R. P. DERUYCK, J. V. JOOSSENS, and A. K. AMERY, \"Disappearance rate of endogenous renin from the plasma after bilateral nephrectomy in humans,\" The Journal of Clinical Endocrinology & Metabolism, vol. 29, pp. 1420-1424, 1969. </td>
        </tr>
        <tr>
                <td>[Harder1996]</td>
                <td>D. R. Harder, J. Narayanan, E. K. Birks, J. F. Liard, J. D. Imig, J. H. Lombard, et al., \"Identification of a Putative Microvascular Oxygen Sensor,\" Circulation Research, vol. 79, pp. 54-61, July 1, 1996 1996. </td>
        </tr>
        <tr>
                <td>[Harder1996]</td>
                <td>D. R. Harder, J. Narayanan, E. K. Birks, J. F. Liard, J. D. Imig, J. H. Lombard, et al., \"Identification of a Putative Microvascular Oxygen Sensor,\" Circulation Research, vol. 79, pp. 54-61, July 1, 1996 1996. </td>
        </tr>
        <tr>
                <td>[Hardy1961]</td>
                <td>J. D. Har"
                 + "dy, \"Physiology of temperature regulation,\" Physiol Rev, vol. 41, pp. 521-606, Jul 1961. </td>
        </tr>
        <tr>
                <td>[Hardy1938]</td>
                <td>J. D. Hardy and G. F. Soderstrom, \"Heat Loss from the Nude Body and Peripheral Blood Flow at Temperatures of 22°C. to 35°C.: Two Figures,\" The Journal of Nutrition, vol. 16, pp. 493-510, November 1, 1938 1938. </td>
        </tr>
        <tr>
                <td>[Harrison1938]</td>
                <td>H. E. Harrison and D. C. Darrow, \"The distribution of body water and electrolytes in adrenal insufficiency,\" Journal of Clinical Investigation, vol. 17, p. 77, 1938. </td>
        </tr>
        <tr>
                <td>[Harrop1923]</td>
                <td>G. A. Harrop and E. M. Benedict, \"The role of phosphate and potassium in carbohydrate metabolism following insulin administration,\" Experimental Biology and Medicine, vol. 20, pp. 430-431, May 1, 1923 1923. </td>
        </tr>
        <tr>
                <td>[HART1982]</td>
                <td>G. R. HART, R. J. ANDERSON, C. P. CRUMPLER, A. SHULKIN, G. REED, and J. P. KNOCHEL, \"Epidemic classical heat stroke: clinical characteristics and course of 28 patients,\" Medicine, vol. 61, p. 189, 1982. </td>
        </tr>
        <tr>
                <td>[Hatcher1978]</td>
                <td>J. D. Hatcher, L. K. Chiu, and D. B. Jennings, Anemia as a stimulus to aortic and carotid chemoreceptors in the cat vol. 44, 1978. </td>
        </tr>
        <tr>
                <td>[Havel2004]</td>
                <td>P. J. Havel, \"Update on adipocyte hormones regulation of energy balance and carbohydrate/lipid metabolism,\" Diabetes, vol. 53, pp. S143-S151, 2004. </td>
        </tr>
        <tr>
                <td>[HAYS1993]</td>
                <td>M. T. HAYS, \"Colonic excretion of iodide in normal human subjects,\" Thyroid, vol. 3, pp. 31-35, 1993. </td>
        </tr>
        <tr>
                <td>[Hayward1993]</td>
                <td>L. Hayward, M. Hay, and R. Felder, \"Acute resetting of the carotid sinus baroreflex by aortic depressor nerve stimulation,\" METHODS, vol. 10, p. 11, 1993. </td>
        </tr>
        <tr>
                <td>[Heller1932]</td>
                <td>H. Heller and F. H. Smirk, \"Studies concerning the alimentary absorption of water and tissue hydration in relation to diuresis,\" The Journal of Physiology, vol. 76, pp. 1-38, September 16, 1932 1932. </td>
        </tr>
        <tr>
                <td>[Hennessy1993]</td>
                <td>E. Hennessy, S. White, T. Van der Touw, A. Quail, W. Porges, and P. Glenfield, \"Control of resting bronchial hemodynamics in the awake dog,\" American Journal of Physiology, vol. 265, pp. H649-H649, 1993. </td>
        </tr>
        <tr>
                <td>[Henriksen1985]</td>
                <td>J. H. Henriksen, \"Estimation of lymphatic conductance: A model based on protein-kinetic studies and haemodynamic measurements in patients with cirrhosis of the liver and in pigs,\" Scandinavian journal of clinical & laboratory investigation, vol. 45, pp. 123-130, 1985. </td>
        </tr>
        <tr>
                <td>[Henriksen1985]</td>
                <td>J. H. Henriksen, \"Estimation of lymphatic conductance,\" Scandinavian Journal of Clinical & Laboratory Investigation, vol. 45, pp. 123-130, 1985. </td>
        </tr>
        <tr>
                <td>[Henry1950]</td>
                <td>J. P. Henry and O. H. Gauer, \"THE INFLUENCE OF TEMPERATURE UPON VENOUS PRESSURE IN THE FOOT,\" The Journal of Clinical Investigation, vol. 29, pp. 855-861, 1950. </td>
        </tr>
        <tr>
                <td>[HENSEL1953]</td>
                <td>H. HENSEL, \"The time factor in thermoreceptor excitation,\" Acta Physiologica Scandinavica, vol. 29, pp. 109-116, 1953. </td>
        </tr>
        <tr>
                <td>[Hermansson1981]</td>
                <td>K. Hermansson, M. Larson, Ö. Källskog, and M. Wolgast, \"Influence of renal nerve activity on arteriolar resistance, ultrafiltration dynamics and fluid reabsorption,\" Pflügers Archiv, vol. 389, pp. 85-90, 1981/01/01 1981. </td>
        </tr>
        <tr>
                <td>[Hesslink1992]</td>
                <td>R. L. Hesslink, M. M. D'Alesandro, D. W. Armstrong, and H. L. Reed, Human cold air habituation is independent of thyroxine and thyrotropin vol. 72, 1992. </td>
        </tr>
        <tr>
                <td>[Hester2010]</td>
                <td>R. Hester, R. Summers, R. Iliescu, and T. Coleman, \"HumMod: An integrative model of integrative biomedicine,\" in The Interservice/Industry Training, Simulation & Education Conference (I/ITSEC), 2010. </td>
        </tr>
        <tr>
                <td>[Hester2011]</td>
                <td>R. L. Hester, R. Iliescu, R. Summers, and T. G. Coleman, \"Systems biology and integrative physiological modelling,\" The Journal of physiology, vol. 589, pp. 1053-1060, 2011. </td>
        </tr>
        <tr>
                <td>[Hester2011]</td>
                <td>R. L. Hester, A. J. Brown, L. Husband, R. Iliescu, D. Pruett, R. Summers, et al., \"HumMod: a modeling environment for the simulation of integrative human physiology,\" Frontiers in Physiology, vol. 2, 2011. </td>
        </tr>
        <tr>
                <td>[Heyeraas1987]</td>
                <td>K. J. Heyeraas and K. Aukland, \"Interlobular arterial resistance: Influence of renal arterial pressure and angiotensin II,\" Kidney Int, vol. 31, pp. 1291-1298, 06//print 1987. </td>
        </tr>
        <tr>
                <td>[Heyndrickx1976]</td>
                <td>G. Heyndrickx, D. H. Boettcher, and S. F. Vatner, \"Effects of angiotensin, vasopressin, and methoxamine on cardiac function and blood flow distribution in conscious dogs,\" Am J Physiol, vol. 231, pp. 1579-1587, 1976. </td>
        </tr>
        <tr>
                <td>[Higgins1975]</td>
                <td>H. P. Higgins, J. M. Hershman, J. G. Kenimer, R. A. Patillo, T. A. Bayley, and P. Walfish, \"The Thyrotoxicosis of Hydatidiform Mole,\" Annals of Internal Medicine, vol. 83, pp. 307-311, 1975. </td>
        </tr>
        <tr>
                <td>[Hogan1990]</td>
                <td>M. C. Hogan, D. E. Bebout, A. T. Gray, P. D. Wagner, J. B. West, and P. E. Haab, Muscle maximal O2 uptake at constant O2 delivery with and without CO in the blood vol. 69, 1990. </td>
        </tr>
        <tr>
                <td>[HOLLENBERG1975]</td>
                <td>N. K. HOLLENBERG, D. F. ADAMS, H. SOLOMON, W. R. CHENITZ, B. M. BURGER, H. L. ABRAMS, et al., \"RENAL VASCULAR TONE IN ESSENTIAL AND SECONDARY HYPERTENSION: HEMODYNAMIC AND ANGIOGRAPHIC RESPONSES TO VASODILATORS,\" Medicine, vol. 54, pp. 29-44, 1975. </td>
        </tr>
        <tr>
                <td>[Hollifield1981]</td>
                <td>J. W. Hollifield and P. E. Slaton, \"Thiazide diuretics, hypokalemia and cardiac arrhythmias,\" Acta Medica Scandinavica, vol. 209, pp. 67-73, 1981. </td>
        </tr>
        <tr>
                <td>[Hollifield1981]</td>
                <td>J. W. Hollifield and P. E. Slaton, \"Thiazide diuretics, hypokalemia and cardiac arrhythmias,\" Acta Medica Scandinavica, vol. 209, pp. 67-73, 1981. </td>
        </tr>
        <tr>
                <td>[Hood1983]</td>
                <td>V. L. Hood and R. L. Tannen, \"pH control of lactic acid and keto acid production: a mechanism of acid-base regulation,\" Miner Electrolyte Metab, vol. 9, pp. 317-25, 1983. </td>
        </tr>
        <tr>
                <td>[Hornbein1963]</td>
                <td>T. F. Hornbein and A. Roos, Specificity of H ion concentration as a carotid chemoreceptor stimulus vol. 18, 1963. </td>
        </tr>
        <tr>
                <td>[Hornbein1961]</td>
                <td>T. F. Hornbein, Z. J. Griffo, and A. Roos, QUANTITATION OF CHEMORECEPTOR ACTIVITY: INTERRELATION OF HYPOXIA AND HYPERCAPNIA vol. 24, 1961. </td>
        </tr>
        <tr>
                <td>[Horowitz2003]</td>
                <td>M. Horowitz, \"Matching the heart to heat-induced circulatory load: heat-acclimatory responses,\" Physiology, vol. 18, pp. 215-221, 2003. </td>
        </tr>
        <tr>
                <td>[Horvath1956]</td>
                <td>S. M. Horvath, G. B. Spurr, B. K. Hutt, and L. H. Hamilton, Metabolic Cost of Shivering vol. 8, 1956. </td>
        </tr>
        <tr>
                <td>[Horwitz1977]</td>
                <td>L. D. Horwitz, J. M. Atkins, and M. Saito, \"Effect of digitalis on left ventricular function in exercising dogs,\" Circulation research, vol. 41, pp. 744-750, 1977. </td>
        </tr>
        <tr>
                <td>[Hsieh1965]</td>
                <td>A. C. L. Hsieh, T. Nagasaka, and L. D. Carlson, Effects of immersion of the hand in cold water on digital blood flow vol. 20, 1965. </td>
        </tr>
        <tr>
                <td>[Hucka2003]</td>
                <td>M. Hucka, A. Finney, H. M. Sauro, H. Bolouri, J. C. Doyle, H. Kitano, et al., \"The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models,\" Bioinformatics, vol. 19, pp. 524-531, 2003. </td>
        </tr>
        <tr>
                <td>[Hucka2004]</td>
                <td>M. Hucka, A. Finney, B. J. Bornstein, S. M. Keating, B. E. Shapiro, J. Matthews, et al., \"Evolving a lingua franca and associated software infrastructure for computational systems biology: the Systems Biology Markup Language (SBML) project,\" Systems biology, vol. 1, pp. 41-53, 2004. </td>
        </tr>
        <tr>
                <td>[Hunter2003]</td>
                <td>P. J. Hunter and T. K. Borg, \"Integration from proteins to organs: the Physiome Project,\" Nature Reviews Molecular Cell Biology, vol. 4, pp. 237-243, 2003. </td>
        </tr>
        <tr>
                <td>[Hunter2009]</td>
                <td>P. J. Hunter and M. Viceconti, \"The VPH-physiome project: standards and tools for multiscale modeling in clinical applications,\" Biomedical Engineering, IEEE Reviews in, vol. 2, pp. 40-53, 2009. </td>
        </tr>
        <tr>
                <td>[Hunter2002]</td>
                <td>P. Hunter, P. Robbins, and D. Noble, \"The IUPS human physiome project,\" Pflügers Archiv, vol. 445, pp. 1-9, 2002. </td>
        </tr>
        <tr>
                <td>[Hunter2008]</td>
                <td>P. J. Hunter, E. J. Crampin, and P. M. Nielsen, \"Bioinformatics, multiscale modeling and the IUPS Physiome Project,\" Briefings in bioinformatics, vol. 9, pp. 333-343, 2008. </td>
        </tr>
        <tr>
                <td>[Hunter2006]</td>
                <td>P. J. Hunter, W. W. Li, A. D. McCulloch, and D. Noble, \"Multiscale modeling: Physiome project standards, tools, and databases,\" Computer, vol. 39, pp. 48-54, 2006. </td>
        </tr>
        <tr>
                <td>[Huth1959]</td>
                <td>E. Huth, R. Squires, and J. Elkinton, \"Experimental potassium depletion in normal human subjects. II. Renal and hormonal factors in the development of extracellular alkalosis during depletion,\" Journal of Clinical Investigation, vol. 38, p. 1149, 1959. </td>
        </tr>
        <tr>
                <td>[Charan1984]</td>
                <td>N. B. Charan, G. M. Turk, and R. Dhand, \"Gross and subgross anatomy of bronchial circulation in sheep,\" J Appl Physiol, vol. 57, pp. 658-664, 1984. </td>
        </tr>
        <tr>
                <td>[Charles1994]</td>
                <td>J. B. Charles and C. M. Lathers, \"Summary of Lower Body Negative Pressure Experiments During Space Flight,\" The Journal of Clinical Pharmacology, vol. 34, pp. 571-583, 1994. </td>
        </tr>
        <tr>
                <td>[Chen2004]</td>
                <td>M. Chen, M. Haluzik, N. J. Wolf, J. Lorenzo, K. R. Dietz, M. L. Reitman, et al., \"Increased insulin sensitivity in paternal Gnas knockout mice is associated with increased lipid clearance,\" Endocrinology, vol. 145, pp. 4094-4102, 2004. </td>
        </tr>
        <tr>
                <td>[Cherrington1987]</td>
                <td>A. Cherrington, R. Stevenson, K. Steiner, M. Davis, S. Myers, B. Adkins, et al., \"Insulin, glucagon, and glucose as regulators of hepatic glucose uptake and production in vivo,\" Diabetes/metabolism reviews, vol. 3, pp. 307-332, 1987. </td>
        </tr>
        <tr>
                <td>[Chiasson1976]</td>
                <td>J. Chiasson, J. Liljenquist, F. Finger, and W. Lacy, \"Differential sensitivity of glycogenolysis and gluconeogenesis to insulin infusions in dogs,\" Diabetes, vol. 25, pp. 283-291, 1976. </td>
        </tr>
        <tr>
                <td>[Chopra1976]</td>
                <td>I. J. Chopra, \"An assessment of daily production and significance of thyroidal secretion of 3, 3', 5'-triiodothyronine (reverse T3) in man,\" The Journal of Clinical Investigation, vol. 58, pp. 32-40, 1976. </td>
        </tr>
        <tr>
                <td>[CHOPRA1975]</td>
                <td>I. J. CHOPRA, J. M. HERSHMAN, and R. W. HORNABROOK, \"Serum Thyroid Hormone and Thyrotropin Levels in Subjects from Endemic Goiter Regions of New Guinea,\" The Journal of Clinical Endocrinology & Metabolism, vol. 40, pp. 326-333, 1975. </td>
        </tr>
        <tr>
                <td>[Christie1934]</td>
                <td>R. V. Christie and C. A. McIntosh, \"THE MEASUREMENT OF THE INTRAPLEURAL PRESSURE IN MAN AND ITS SIGNIFICANCE,\" The Journal of Clinical Investigation, vol. 13, pp. 279-294, 1934. </td>
        </tr>
        <tr>
                <td>[Christlieb1968]</td>
                <td>A. R. Christlieb, N. P. Couch, E. A. Amsterdam, S. J. Dobrzinsky, and R. B. Hickler, \"Renin extraction by the human liver,\" Experimental Biology and Medicine, vol. 128, pp. 821-823, 1968. </td>
        </tr>
        <tr>
                <td>[Iampietro1960]</td>
                <td>P. F. Iampietro, J. A. Vaughan, R. F. Goldman, M. B. Kreider, F. Masucci, and D. E. Bass, Heat production from shivering vol. 15, 1960. </td>
        </tr>
        <tr>
                <td>[Ibsen1980]</td>
                <td>H. Ibsen, N. J. Christensen, H. Hollnagel, A. Leth, A. M. Kappelgaard, and J. Giese, \"Plasma noradrenaline concentration in hypertensive and normotensive forty-year-old individuals: Relationship to plasma renin concentration,\" Scandinavian Journal of Clinical & Laboratory Investigation, vol. 40, pp. 333-339, 1980. </td>
        </tr>
        <tr>
                <td>[Ichihara1997]</td>
                <td>A. Ichihara, E. W. Inscho, J. D. Imig, R. E. Michel, and L. G. Navar, \"Role of Renal Nerves in Afferent Arteriolar Reactivity in Angiotensin-Induced Hypertension,\" Hypertension, vol. 29, pp. 442-449, January 1, 1997 1997. </td>
        </tr>
        <tr>
                <td>[Ikeda1979]</td>
                <td>N. Ikeda, F. Marumo, M. Shirataka, and T. Sato, \"A model of overall regulation of body fluids,\" Annals of biomedical engineering, vol. 7, pp. 135-166, 1979. </td>
        </tr>
        <tr>
                <td>[Imai2008]</td>
                <td>J. Imai, H. Katagiri, T. Yamada, Y. Ishigaki, T. Suzuki, H. Kudo, et al., \"Regulation of Pancreatic ß Cell Mass by Neuronal Signals from the Liver,\" Science, vol. 322, pp. 1250-1254, November 21, 2008 2008. </td>
        </tr>
        <tr>
                <td>[Imaizumi1993]</td>
                <td>T. Imaizumi, M. Sugimachi, Y. Harasawa, S. Ando, K. Sunagawa, Y. Hirooka, et al., \"Contribution of wall mechanics to the dynamic properties of aortic baroreceptors,\" American Journal of Physiology-Heart and Circulatory Physiology, vol. 264, pp. H872-H880, 1993. </td>
        </tr>
        <tr>
                <td>[Issekutz1964]</td>
                <td>B. Issekutz, H. I. Miller, P. Paul, and K. Rodahl, Source of fat oxidation in exercising dogs vol. 207, 1964. </td>
        </tr>
        <tr>
                <td>[Ito1990]</td>
                <td>S. Ito and O. A. Carretero, \"An in vitro approach to the study of macula densa-mediated glomerular hemodynamics,\" Kidney Int, vol. 38, pp. 1206-10, Dec 1990. </td>
        </tr>
        <tr>
                <td>[Ito1992]</td>
                <td>S. Ito, O. A. Carretero, K. Abe, L. A. Juncos, and K. Yoshinaga, \"Macula Densa Control of Renin Release and Glomerular Hemodynamics,\" The Tohoku Journal of Experimental Medicine, vol. 166, pp. 27-39, 1992. </td>
        </tr>
        <tr>
                <td>[Itoh1985]</td>
                <td>S. Itoh and O. A. Carretero, \"Role of the macula densa in renin release,\" Hypertension, vol. 7, p. I49, 1985. </td>
        </tr>
        <tr>
                <td>[Iwanishi2000]</td>
                <td>M. Iwanishi, M. P. Czech, and A. D. Cherniack, \"The Protein-tyrosine Kinase Fer Associates with Signaling Complexes Containing Insulin Receptor Substrate-1 and Phosphatidylinositol 3-Kinase,\" Journal of Biological Chemistry, vol. 275, pp. 38995-39000, December 15, 2000 2000. </td>
        </tr>
        <tr>
                <td>[Jackson1982]</td>
                <td>I. M. D. Jackson, \"Thyrotropin-Releasing Hormone,\" New England Journal of Medicine, vol. 306, pp. 145-155, 1982. </td>
        </tr>
        <tr>
                <td>[Jacobson1957]</td>
                <td>L. O. Jacobson, E. Goldwasser, W. Fried, and L. Plzak, \"Role of the Kidney in Erythropoiesis,\" Nature, vol. 179, pp. 633-634, 03/23/print 1957. </td>
        </tr>
        <tr>
                <td>[Jamison1972]</td>
                <td>R. Jamison and F. B. Lacy, \"Evidence for urinary dilution by the collecting tubule,\" Am. J. Physiol, vol. 223, pp. 898-902, 1972. </td>
        </tr>
        <tr>
                <td>[Jamison1971]</td>
                <td>R. L. Jamison, J. Buerkert, F. Lacy, D. Marcus, and B. Henton, \"A micropuncture study of collecting tubule function in rats with hereditary diabetes insipidus,\" Journal of Clinical Investigation, vol. 50, p. 2444, 1971. </td>
        </tr>
        <tr>
                <td>[Jan1977]</td>
                <td>K. M. Jan and S. Chien, Effect of hematocrit variations on coronary hemodynamics and oxygen utilization vol. 233, 1977. </td>
        </tr>
        <tr>
                <td>[Jans1987]</td>
                <td>A. W. Jans, K. Amsler, B. Griewel, and R. K. Kinne, \"Regulation of intracellular pH in LLC-PK< sub> 1</sub> cells studied using< sup> 31</sup> P-NMR spectroscopy,\" Biochimica et Biophysica Acta (BBA)-Molecular Cell Research, vol. 927, pp. 203-212, 1987. </td>
        </tr>
        <tr>
                <td>[Jaspan1981]</td>
                <td>J. Jaspan, K. Polonsky, M. Lewis, J. Pensler, W. Pugh, A. Moossa, et al., \"Hepatic metabolism of glucagon in the dog: contribution of the liver to overall metabolic disposal of glucagon,\" Am J Physiol, vol. 240, pp. E233-E244, 1981. </td>
        </tr>
        <tr>
                <td>[Jelinek1993]</td>
                <td>L. J. Jelinek, S. Lok, G. B. Rosenberg, R. A. Smith, F. J. Grant, S. Biggs, et al., \"Expression cloning and signaling properties of the rat glucagon receptor,\" Science, vol. 259, pp. 1614-1616, 1993. </td>
        </tr>
        <tr>
                <td>[Jelkmann2011]</td>
                <td>W. Jelkmann, \"Regulation of erythropoietin production,\" The Journal of Physiology, vol. 589, pp. 1251-1258, March 15, 2011 2011. </td>
        </tr>
        <tr>
                <td>[Jelkmann1987]</td>
                <td>W. Jelkmann and J. Seidl, \"Dependence of erythropoietin production on blood oxygen affinity and hemoglobin concentration in rats,\" Biomedica biochimica acta, vol. 46, pp. S304-8, 1987 1987. </td>
        </tr>
        <tr>
                <td>[JÉQuier2002]</td>
                <td>E. JÉQuier, \"Leptin Signaling, Adiposity, and Energy Balance,\" Annals of the New York Academy of Sciences, vol. 967, pp. 379-388, 2002. </td>
        </tr>
        <tr>
                <td>[Johns1989]</td>
                <td>E. J. Johns, \"Role of angiotensin II and the sympathetic nervous system in the control of renal function,\" Journal of Hypertension, vol. 7, pp. 695-702, 1989. </td>
        </tr>
        <tr>
                <td>[Jordan1998]</td>
                <td>J. Jordan, J. R. Shannon, B. K. Black, R. H. Lance, M. D. Squillante, F. Costa, et al., \"NN-Nicotinic Blockade as an Acute Human Model of Autonomic Failure,\" Hypertension, vol. 31, pp. 1178-1184, May 1, 1998 1998. </td>
        </tr>
        <tr>
                <td>[Joseph1952]</td>
                <td>J. Joseph and A. Nightingale, \"Electromyography of muscles of posture: leg muscles in males,\" The Journal of Physiology, vol. 117, pp. 484-491, August 28, 1952 1952. </td>
        </tr>
        <tr>
                <td>[Jungblut2008]</td>
                <td>P. R. Jungblut, H. G. Holzhütter, R. Apweiler, and H. Schlüter, \"The speciation of the proteome,\" Chemistry Central Journal, vol. 2, pp. 1-10, 2008. </td>
        </tr>
        <tr>
                <td>[Källskog1975]</td>
                <td>Ö. Källskog and M. Wolgast, \"Effect of elevated interstitial pressure on the renal cortical hemodynamics,\" Acta Physiologica Scandinavica, vol. 95, pp. 364-372, 1975. </td>
        </tr>
        <tr>
                <td>[Kamel1990]</td>
                <td>K. S. Kamel, J. H. Ethier, B. J. Stinebaugh, F. X. Schloeder, and M. L. Halperin, \"Removal of an inorganic acid load in subjects with ketoacidosis of chronic fasting,\" Kidney Int, vol. 38, pp. 507-511, 09//print 1990. </td>
        </tr>
        <tr>
                <td>[Kamel1998]</td>
                <td>K. S. Kamel, S.-H. Lin, S. Cheema-Dhadli, E. B. Marliss, and M. L. Halperin, \"Prolonged total fasting: A feast for the integrative physiologist,\" Kidney Int, vol. 53, pp. 531-539, 03//print 1998. </td>
        </tr>
        <tr>
                <td>[Kamon1968]</td>
                <td>E. Kamon and H. S. Belding, Heat uptake and dermal conductance in forearm and hand when heated vol. 24, 1968. </td>
        </tr>
        <tr>
                <td>[Kappagoda1976]</td>
                <td>C. Kappagoda and R. Linden, \"The use of SI units in cardiovascular studies,\" British heart journal, vol. 38, p. 219, 1976. </td>
        </tr>
        <tr>
                <td>[Katkov1980]</td>
                <td>V. E. Katkov and V. V. Chestukhin, \"Blood pressure and oxygenation in different cardiovascular compartments of a normal man during postural exposures,\" Aviat Space Environ Med, vol. 51, pp. 1234-42, Nov 1980. </td>
        </tr>
        <tr>
                <td>[Katschinski2004]</td>
                <td>D. M. Katschinski, \"On heat and cells and proteins,\" Physiology, vol. 19, pp. 11-15, 2004. </td>
        </tr>
        <tr>
                <td>[Katsura1992]</td>
                <td>K. Katsura, B. Asplund, A. Ekholm, and B. K. Siesjo, \"Extra- and Intracellular pH in the Brain During Ischaemia, Related to Tissue Lactate Content in Normo- and Hypercapnic rats,\" Eur J Neurosci, vol. 4, pp. 166-176, 1992. </td>
        </tr>
        <tr>
                <td>[Kelly1992]</td>
                <td>R. A. Kelly and T. W. Smith, \"Use and misuse of digitalis blood levels,\" Heart disease and stroke : a journal for primary care physicians, vol. 1, pp. 117-122, 1992 May-Jun 1992. </td>
        </tr>
        <tr>
                <td>[Kelso1982]</td>
                <td>S. Kelso and J. Boulant, \"Effect of synaptic blockade on thermosensitive neurons in hypothalamic tissue slices,\" Am J Physiol, vol. 243, pp. R480-R490, 1982. </td>
        </tr>
        <tr>
                <td>[Kervran1990]</td>
                <td>A. Kervran, M. Dubrasquet, P. Blache, J. Martinez, and D. Bataille, \"Metabolic clearance rates of oxyntomodulin and glucagon in the rat: contribution of the kidney,\" Regulatory Peptides, vol. 31, pp. 41-52, 10/29/ 1990. </td>
        </tr>
        <tr>
                <td>[Kety1948]</td>
                <td>S. S. Kety and C. F. Schmidt, \"THE EFFECTS OF ALTERED ARTERIAL TENSIONS OF CARBON DIOXIDE AND OXYGEN ON CEREBRAL BLOOD FLOW AND CEREBRAL OXYGEN CONSUMPTION OF NORMAL YOUNG MEN 1,\" The Journal of Clinical Investigation, vol. 27, pp. 484-492, 1948. </td>
        </tr>
        <tr>
                <td>[Khokhar1976]</td>
                <td>A. Khokhar, J. Slater, M. L. Forsling, and N. Payne, \"Effect of vasopressin on plasma volume and renin release in man,\" Clinical Science, vol. 50, pp. 415-424, 1976. </td>
        </tr>
        <tr>
                <td>[Kiil1990]</td>
                <td>F. Kiil, \"The paradox of renal bicarbonate reabsorption,\" Physiology, vol. 5, pp. 13-17, 1990. </td>
        </tr>
        <tr>
                <td>[Kim0000]</td>
                <td>H. H. Kim, S. Lee, T. Y. Jeon, H. C. Son, Y. J. Kim, and M. S. Sim, \"Post-prandial plasma ghrelin levels in people with different breakfast hours,\" Eur J Clin Nutr, vol. 58, pp. 692-695, //print 0000. </td>
        </tr>
        <tr>
                <td>[Kimura1983]</td>
                <td>S. Kimura, Y. Miura, M. Adachi, M. Adachi, M. Nezu, S. Toriyabe, et al., \"The effect of sodium depletion on plasma norepinephrine kinetics in patients with essential hypertension,\" Japanese circulation journal, vol. 47, pp. 1232-1241, 1983/10// 1983. </td>
        </tr>
        <tr>
                <td>[Kintner2000]</td>
                <td>D. B. Kintner, M. K. Anderson, J. H. Fitzpatrick, Jr., K. A. Sailor, and D. D. Gilboe, \"31P-MRS-based determination of brain intracellular and interstitial pH: its application to in vivo H+ compartmentation and cellular regulation during hypoxic/ischemic conditions,\" Neurochem Res, vol. 25, pp. 1385-96, Oct 2000. </td>
        </tr>
        <tr>
                <td>[Kintner2000]</td>
                <td>D. B. Kintner, M. K. Anderson, J. H. Fitzpatrick, Jr., K. A. Sailor, and D. D. Gilboe, \"31P-MRS-based determination of brain intracellular and interstitial pH: its application to in vivo H+ compartmentation and cellular regulation during hypoxic/ischemic conditions,\" Neurochem Res, vol. 25, pp. 1385-96, Oct 2000. </td>
        </tr>
        <tr>
                <td>[Kintner1999]</td>
                <td>D. B. Kintner, M. E. Anderson, K. A. Sailor, G. Dienel, J. H. Fitzpatrick, Jr., and D. D. Gilboe, \"In vivo microdialysis of 2-deoxyglucose 6-phosphate into brain: a novel method for the measurement of interstitial pH using 31P-NMR,\" J Neurochem, vol. 72, pp. 405-12, Jan 1999. </td>
        </tr>
        <tr>
                <td>[Kirsch1993]</td>
                <td>K. A. Kirsch, F. J. Baartz, H. C. Gunga, L. Röcker, H. J. Wicke, and B. Bünsch, \"Fluid shifts into and out of superficial tissues under microgravity and terrestrial conditions,\" The clinical investigator, vol. 71, pp. 687-689, 1993/09/01 1993. </td>
        </tr>
        <tr>
                <td>[Kirsch1993]</td>
                <td>K. A. Kirsch, F. J. Baartz, H. C. Gunga, L. Röcker, H. J. Wicke, and B. Bünsch, \"Fluid shifts into and out of superficial tissues under microgravity and terrestrial conditions,\" The clinical investigator, vol. 71, pp. 687-689, 1993/09/01 1993. </td>
        </tr>
        <tr>
                <td>[Kjeldsen1983]</td>
                <td>S. E. Kjeldsen, I. Eide, I. Aakesson, and P. Leren, \"Increased arterial catecholamine concentrations in 50-year-old men with essential hypertension,\" Scandinavian Journal of Clinical & Laboratory Investigation, vol. 43, pp. 343-349, 1983. </td>
        </tr>
        <tr>
                <td>[Knepper1977]</td>
                <td>M. A. Knepper, R. A. Danielson, G. M. Saidel, and R. S. Post, \"Quantitative analysis of renal medullary anatomy in rats and rabbits,\" Kidney Int, vol. 12, pp. 313-323, 1977. </td>
        </tr>
        <tr>
                <td>[Knepper2003]</td>
                <td>M. A. Knepper, G. M. Saidel, V. C. Hascall, and T. Dwyer, Concentration of solutes in the renal inner medulla: interstitial hyaluronan as a mechano-osmotic transducer vol. 284, 2003. </td>
        </tr>
        <tr>
                <td>[Koeffler1981]</td>
                <td>H. P. Koeffler and E. Goldwasser, \"Erythropoietin Radioimmunoassay in Evaluating Patients with Polycythemia,\" Annals of Internal Medicine, vol. 94, pp. 44-47, 1981. </td>
        </tr>
        <tr>
                <td>[Kofranek2007]</td>
                <td>J. Kofranek, S. Matousek, and M. Andrlik, \"Border flux balance approach towards modelling acid-base chemistry and blood gases transport,\" in In: Proceedings of the 6th EUROSIM congress on modelling and simulation. Ljubljana: University of Ljubljana, 2007, pp. 1-9. </td>
        </tr>
        <tr>
                <td>[Kofranek2011]</td>
                <td>J. Kofranek, S. Matousek, J. Rusz, P. Stodulka, P. Privitzer, M. Matejak, et al., \"The Atlas of Physiology and Pathophysiology: Web-based multimedia enabled interactive simulations,\" Computer methods and programs in biomedicine, vol. 104, pp. 143-153, 2011. </td>
        </tr>
        <tr>
                <td>[Kofránek2002]</td>
                <td>J. Kofránek, Andrlík, Michal, Kripner, Tomáš, and Mašek, Jan, \"From art to industry in design of biomedical simulators. Experience of the Golem simulator project.,\" presented at the The 6th World Multiconference on Systemics, Cybernetics and Informatics., Orlando, Florida, USA, 2002. </td>
        </tr>
        <tr>
                <td>[Kofránek2013]</td>
                <td>J. Kofránek, Mateják, M., Privitzer, P., Tribula, M., Kulhánek, T., Šilar, J., Pecinovský, R., \"HumMod-Golem Edition: large scale model of integrative physiology for virtual patient simulators,\" in World Congress in Computer Science 2013 (WORLDCOMP'13), International Conference on Modeling, Simulation and Visualisation Methods (MSV'13), 2013, pp. 182-188. </td>
        </tr>
        <tr>
                <td>[Kofránek2008]</td>
                <td>J. Kofránek, J. Rusz, and S. Matoušek, \"Vzkříšení Guytonova diagramu-Od obrázku k simulačnímu modelu,\" MEDSOFT 2008, vol. 2008, pp. 37-56, 2008. </td>
        </tr>
        <tr>
                <td>[Kofránek2009]</td>
                <td>J. Kofránek, M. Mateják, and P. Privitzer, \"Leaving toil to machines - building simulation kernel of educational software in modern software environments,\" in Mefanet 2009, Masaryk University, Brno, 2009. </td>
        </tr>
        <tr>
                <td>[Kofránek2010]</td>
                <td>J. Kofránek, M. Mateják, and P. Privitzer, \"Web simulator creation technology,\" MEFANET report, vol. 3, pp. 52-97, 2010. </td>
        </tr>
        <tr>
                <td>[Jiří2011]</td>
                <td>J. Kofránek, M. Mateják, and P. Privitzer, \"HumMod - large scale physiological model in Modelica,\" in 8th. International Modelica Conference, Dresden, Germany, 2011. </td>
        </tr>
        <tr>
                <td>[Kofránek2008]</td>
                <td>J. Kofránek, M. Mateják, P. Privitzer, and M. Tribula, \"Causal or acausal modeling: labour for humans or labour for machines,\" Technical Conmputing Prague, pp. 1-16, 2008. </td>
        </tr>
        <tr>
                <td>[Kokot1994]</td>
                <td>M. Kokot, F. Kokot, E. Franek, A. Wiecek, M. Nowicki, and J. Duława, \"Effect of isobaric hyperoxemia on erythropoietin secretion in hypertensive patients,\" Hypertension, vol. 24, pp. 486-90, October 1, 1994 1994. </td>
        </tr>
        <tr>
                <td>[Kotani2004]</td>
                <td>K. Kotani, O. D. Peroni, Y. Minokoshi, O. Boss, and B. B. Kahn, \"GLUT4 glucose transporter deficiency increases hepatic lipid production and peripheral lipid utilization,\" The Journal of clinical investigation, vol. 114, pp. 1666-1675, 2004. </td>
        </tr>
        <tr>
                <td>[Kraig1985]</td>
                <td>R. P. Kraig, W. A. Pulsinelli, and F. Plum, \"Heterogeneous Distribution of Hydrogen and Bicarbonate Ions During Complete Brain Cischemia,\" in Progress in Brain Research. vol. Volume 63, K. A. H. B. K. S. K. Kogure and F. A. Welsh, Eds., ed: Elsevier, 1985, pp. 155-166. </td>
        </tr>
        <tr>
                <td>[Krasney1977]</td>
                <td>J. A. Krasney and R. C. Koehler, Influence of arterial hypoxia on cardiac and coronary dynamics in the conscious sinoaortic-denervated dog vol. 43, 1977. </td>
        </tr>
        <tr>
                <td>[Krekels1997]</td>
                <td>M. M. Krekels, N. C. Schaper, and P. W. de Leeuw, \"Sensitivity of blood pressure and renin activation during sodium restriction,\" Hypertension, vol. 30, pp. 1216-1222, 1997. </td>
        </tr>
        <tr>
                <td>[Krogh1932]</td>
                <td>A. Krogh, E. Landis, and A. Turner, \"The movement of fluid through the human capillary wall in relation to venous pressure and to the colloid osmotic pressure of the blood,\" Journal of Clinical Investigation, vol. 11, p. 63, 1932. </td>
        </tr>
        <tr>
                <td>[Tomáš2014]</td>
                <td>T. Kulhánek, M. Mateják, J. Šilar, and J. Kofránek, \"Identifikace fyziologických systémů,\" Medsoft, pp. 148-153, 2014. </td>
        </tr>
        <tr>
                <td>[Kulhánek]</td>
                <td>T. Kulhánek, J. Šilar, J. Kofránek, M. Mateják, P. Privitzer, and M. Tribula, \"Od výukového modelu k identifikaci fyziologického systému (cze) From educational models towards identification of physiological system (ENG).\"</td>
        </tr>
        <tr>
                <td>[Kulhánek2010]</td>
                <td>T. Kulhánek, J. Šilar, M. Mateják, P. Privitzer, J. Kofránek, and M. Tribula, \"Distributed computation and parameter estimation in identification of physiological systems,\" in VPH conference, 2010. </td>
        </tr>
        <tr>
                <td>[Kulhánek2013]</td>
                <td>T. Kulhánek, M. Mateják, P. P. JanŠilar, M. Tribula, F. Jezek, and J. Kofránek, \"Hybrid architecture for web simulators of pathological physiology,\" 2013. </td>
        </tr>
        <tr>
                <td>[Kulhanek2]</td>
                <td>KulhánekT. Kulhánek, F. Jezek, M. Mateják, J. Šilar, P. Privitzer, M. Tribula, et al., \"RESTful web service to build loosely coupled web based simulation of human physiology.\"</td>
        </tr>
        <tr>
                <td>[Kumagai1994]</td>
                <td>K. Kumagai and I. A. Reid, \"Angiotensin II exerts differential actions on renal nerve activity and heart rate,\" Hypertension, vol. 24, pp. 451-456, 1994. </td>
        </tr>
        <tr>
                <td>[Kunert1996]</td>
                <td>M. P. Kunert, J. F. Liard, D. J. Abraham, and J. H. Lombard, \"Low-Affinity Hemoglobin Increases Tissue PO2and Decreases Arteriolar Diameter and Flow in the Rat Cremaster Muscle,\" Microvascular Research, vol. 52, pp. 58-68, 7// 1996. </td>
        </tr>
        <tr>
                <td>[Kurtz1983]</td>
                <td>I. Kurtz, T. Maher, H. N. Hulter, M. Schambelan, and A. Sebastian, \"Effect of diet on plasma acid-base composition in normal humans,\" Kidney Int, vol. 24, pp. 670-80, Nov 1983. </td>
        </tr>
        <tr>
                <td>[Kuwahira1993]</td>
                <td>I. Kuwahira, N. Heisler, J. Piiper, and N. C. Gonzalez, \"Effect of chronic hypoxia on hemodynamics, organ blood flow and O2 supply in rats,\" Respiration Physiology, vol. 92, pp. 227-238, 5// 1993. </td>
        </tr>
        <tr>
                <td>[Lahiri1975]</td>
                <td>S. Lahiri and R. G. DeLaney, \"Stimulus inte"
                                                    + "raction in the responses of carotid body chemoreceptor single afferent fibers,\" Respir Physiol, vol. 24, pp. 249-66, Sep 1975. </td>
        </tr>
        <tr>
                <td>[Lahiri1981]</td>
                <td>S. Lahiri, A. Mokashi, E. Mulligan, and T. Nishino, Comparison of aortic and carotid chemoreceptor responses to hypercapnia and hypoxia vol. 51, 1981. </td>
        </tr>
        <tr>
                <td>[Laine1979]</td>
                <td>G. A. Laine, J. T. Hall, S. H. Laine, and J. Granger, \"Transsinusoidal fluid dynamics in canine liver during venous hypertension,\" Circulation Research, vol. 45, pp. 317-23, September 1, 1979 1979. </td>
        </tr>
        <tr>
                <td>[Laine1987]</td>
                <td>G. A. Laine, S. J. Allen, J. Katz, J. C. Gabel, and R. E. Drake, \"Outflow pressure reduces lymph flow rate from various tissues,\" Microvascular Research, vol. 33, pp. 135-142, 1// 1987. </td>
        </tr>
        <tr>
                <td>[Lake1979]</td>
                <td>C. R. Lake, \"Relationship of Sympathetic Nervous System Tone and Blood Pressure,\" Nephron, vol. 23, pp. 84-90, 1979. </td>
        </tr>
        <tr>
                <td>[Lake1976]</td>
                <td>C. R. Lake, M. G. Ziegler, and I. J. Kopin, \"Use of plasma norepinephrine for evaluation of sympathetic neuronal function in man,\" Life sciences, vol. 18, pp. 1315-1325, 1976. </td>
        </tr>
        <tr>
                <td>[LaManna1996]</td>
                <td>J. LaManna, \"Hypoxia/Ischemia and the pH Paradox,\" in Oxygen Transport to Tissue XVII. vol. 388, C. Ince, J. Kesecioglu, L. Telci, and K. Akpir, Eds., ed: Springer US, 1996, pp. 283-292. </td>
        </tr>
        <tr>
                <td>[Lambertsen1960]</td>
                <td>C. J. Lambertsen, \"CARBON DIOXIDE AND RESPIRATION IN ACID-BASE HOMEOSTASIS,\" Anesthesiology, vol. 21, pp. 642-651, 1960. </td>
        </tr>
        <tr>
                <td>[Lambertsen1953]</td>
                <td>C. J. Lambertsen, R. H. Kough, D. Y. Cooper, G. L. Emmel, H. H. Loeschcke, and C. F. Schmidt, Comparison of Relationship of Respiratory Minute Volume to pCO2 and pH of Arterial and Internal Jugular Blood in Normal Man During Hyperventilation Produced by Low Concentrations of CO2 at 1 Atmosphere and by O2 at 3.0 Atmospheres vol. 5, 1953. </td>
        </tr>
        <tr>
                <td>[Lambertsen1959]</td>
                <td>C. J. Lambertsen, S. G. Owen, H. Wendel, M. W. Stroud, A. A. Lurie, W. Lochner, et al., Respiratory and cerebral circulatory control during exercise at .21 and 2.0 atmospheres inspired pO2 vol. 14, 1959. </td>
        </tr>
        <tr>
                <td>[Landis1933]</td>
                <td>E. M. Landis and J. H. Gibbon Jr, \"The effects of temperature and of tissue pressure on the movement of fluid through the human capillary wall,\" Journal of Clinical Investigation, vol. 12, p. 105, 1933. </td>
        </tr>
        <tr>
                <td>[Landis1933]</td>
                <td>E. M. Landis and J. H. Gibbon, Jr., \"THE EFFECTS OF TEMPERATURE AND OF TISSUE PRESSURE ON THE MOVEMENT OF FLUID THROUGH THE HUMAN CAPILLARY WALL,\" The Journal of Clinical Investigation, vol. 12, pp. 105-138, 1933. </td>
        </tr>
        <tr>
                <td>[Langer1997]</td>
                <td>G. A. Langer, The myocardium: Academic Press, 1997. </td>
        </tr>
        <tr>
                <td>[Lankford1991]</td>
                <td>S. P. Lankford, C. Chou, Y. Terada, S. M. Wall, J. B. Wade, and M. A. Knepper, \"Regulation of collecting duct water permeability independent of cAMP-mediated AVP response,\" American Journal of Physiology-Renal Physiology, vol. 261, pp. F554-F566, 1991. </td>
        </tr>
        <tr>
                <td>[Larsdotter2003]</td>
                <td>E. Larsdotter Nilsson and P. Fritzson, \"BioChem-A Biological and Chemical Library for Modelica,\" in Proceedings of the 3rd International Modelica Conference (November 3-4, Linköping, Sweden), 2003. </td>
        </tr>
        <tr>
                <td>[Larsen1972]</td>
                <td>P. R. Larsen, \"Direct immunoassay of triiodothyronine in human serum,\" The Journal of Clinical Investigation, vol. 51, pp. 1939-1949, 1972. </td>
        </tr>
        <tr>
                <td>[Lash1987]</td>
                <td>J. M. Lash and H. G. Bohlen, Perivascular and tissue PO2 in contracting rat spinotrapezius muscle vol. 252, 1987. </td>
        </tr>
        <tr>
                <td>[Lassen1959]</td>
                <td>N. A. Lassen, Cerebral blood flow and oxygen consumption in man: Am Physiological Soc, 1959. </td>
        </tr>
        <tr>
                <td>[Lassen1990]</td>
                <td>N. A. Lassen, \"Is central chemoreceptor sensitive to intracellular rather than extracellular pH?,\" Clinical Physiology, vol. 10, pp. 311-319, 1990. </td>
        </tr>
        <tr>
                <td>[Latzka1999]</td>
                <td>W. A. Latzka and S. J. Montain, \"Water and electrolyte requirements for exercise,\" Clinics in sports medicine, vol. 18, pp. 513-524, 1999. </td>
        </tr>
        <tr>
                <td>[LAUGHLIN1987]</td>
                <td>M. H. LAUGHLIN, \"Skeletal muscle blood flow capacity: role of muscle pump in exercise hyperemia,\" Am J Physiol, vol. 253, p. 1004, 1987. </td>
        </tr>
        <tr>
                <td>[Laughlin1983]</td>
                <td>M. H. Laughlin and R. Armstrong, \"Rat muscle blood flows as a function of time during prolonged slow treadmill exercise,\" Am J Physiol Heart Circ Physiol, vol. 244, pp. H814-H824, 1983. </td>
        </tr>
        <tr>
                <td>[Lautt1987]</td>
                <td>W. W. Lautt, C. V. Greenway, and D. J. Legare, \"Effect of hepatic nerves, norepinephrine, angiotensin, and elevated central venous pressure on postsinusoidal resistance sites and intrahepatic pressures in cats,\" Microvascular Research, vol. 33, pp. 50-61, 1// 1987. </td>
        </tr>
        <tr>
                <td>[Layton2004]</td>
                <td>A. T. Layton, T. L. Pannabecker, W. H. Dantzler, and H. E. Layton, Two modes for concentrating urine in rat inner medulla vol. 287, 2004. </td>
        </tr>
        <tr>
                <td>[Legendre1991]</td>
                <td>B. B. Legendre, S. Estrade, R. Cassingena, P. Ronco, and A. Vandewalle, \"Why Don’t Our Feet Swell in the Upright Position?,\" J. Cell Biol, vol. 113, pp. 951-962, 1991. </td>
        </tr>
        <tr>
                <td>[Leichtweiss1969]</td>
                <td>H. P. Leichtweiss, D. W. Lübbers, C. Weiss, H. Baumgärtl, and W. Reschke, \"The oxygen supply of the rat kidney: Measurements of intrarenalpO2,\" Pflügers Archiv, vol. 309, pp. 328-349, 1969/12/01 1969. </td>
        </tr>
        <tr>
                <td>[Lemieux1971]</td>
                <td>G. Lemieux, P. Vinay, P. Robitaille, G. Plante, xE, E. rard, et al., \"The effect of ketone bodies on renal ammoniogenesis,\" The Journal of Clinical Investigation, vol. 50, pp. 1781-1791, 1971. </td>
        </tr>
        <tr>
                <td>[Lennon1966]</td>
                <td>E. Lennon, J. Lemann Jr, and J. Litzow, \"The effects of diet and stool composition on the net external acid balance of normal subjects,\" Journal of Clinical Investigation, vol. 45, p. 1601, 1966. </td>
        </tr>
        <tr>
                <td>[Lennon1966]</td>
                <td>E. Lennon, J. Lemann Jr, and J. Litzow, \"The effects of diet and stool composition on the net external acid balance of normal subjects,\" Journal of Clinical Investigation, vol. 45, p. 1601, 1966. </td>
        </tr>
        <tr>
                <td>[Levick1991]</td>
                <td>Levick, \"Capillary filtration-absorption balance reconsidered in light of dynamic extravascular factors,\" Experimental Physiology, vol. 76, pp. 825-857, November 1, 1991 1991. </td>
        </tr>
        <tr>
                <td>[Levy1959]</td>
                <td>M. N. Levy and G. Sauceda, Diffusion of oxygen from arterial to venous segments of renal capillaries vol. 196, 1959. </td>
        </tr>
        <tr>
                <td>[Liljenquist1974]</td>
                <td>J. E. Liljenquist, J. D. Bomboy, S. B. Lewis, B. C. Sinclair-Smith, P. W. Felts, W. W. Lacy, et al., \"Effects of Glucagon on Lipolysis and Ketogenesis in Normal and Diabetic Men,\" The Journal of Clinical Investigation, vol. 53, pp. 190-197, 1974. </td>
        </tr>
        <tr>
                <td>[Liljenquist1977]</td>
                <td>J. Liljenquist, G. Mueller, A. Cherrington, U. Keller, C. JL, J. Perry, et al., \"Evidence for an important role of glucagon in the regulation of hepatic glucose production in normal man,\" Journal of Clinical Investigation, vol. 59, p. 369, 1977. </td>
        </tr>
        <tr>
                <td>[Lillioja1985]</td>
                <td>S. Lillioja, C. Bogardus, D. M. Mott, A. L. Kennedy, W. C. Knowler, and B. V. Howard, \"Relationship between insulin-mediated glucose disposal and lipid metabolism in man,\" Journal of Clinical Investigation, vol. 75, p. 1106, 1985. </td>
        </tr>
        <tr>
                <td>[Lipkin1954]</td>
                <td>M. Lipkin and J. D. Hardy, Measurement of Some Thermal Properties of Human Tissues vol. 7, 1954. </td>
        </tr>
        <tr>
                <td>[Little1993]</td>
                <td>W. C. Little and C. P. Cheng, \"Effect of exercise on left ventricular-arterial coupling assessed in the pressure-volume plane,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 264, pp. H1629-H1629, 1993. </td>
        </tr>
        <tr>
                <td>[Little1975]</td>
                <td>R. Little, G. Wennergren, and B. ÖBerg, \"Aspects of the central integration of arterial baroreceptor and cardiac ventricular receptor reflexes in the cat,\" Acta Physiologica Scandinavica, vol. 93, pp. 85-96, 1975. </td>
        </tr>
        <tr>
                <td>[Livett1981]</td>
                <td>B. G. Livett, D. M. Dean, L. G. Whelan, S. Udenfriend, and J. Rossier, \"Co-release of enkephalin and catecholamines from cultured adrenal chromaffin cells,\" Nature, vol. 289, pp. 317-319, 01/22/print 1981. </td>
        </tr>
        <tr>
                <td>[Lohmeier1998]</td>
                <td>T. E. Lohmeier and D. A. Hildebrandt, \"Renal Nerves Promote Sodium Excretion in Angiotensin-Induced Hypertension,\" Hypertension, vol. 31, pp. 429-434, January 1, 1998 1998. </td>
        </tr>
        <tr>
                <td>[Lopez-Barneo1993]</td>
                <td>J. Lopez-Barneo, A. Benot, and J. Urena, Oxygen Sensing and the Electrophysiology of Arterial Chemoreceptor Cells vol. 8, 1993. </td>
        </tr>
        <tr>
                <td>[Lugliani1973]</td>
                <td>R. Lugliani, B. J. Whipp, and K. Wasserman, \"A role for the carotid body in cardiovascular control in man,\" Chest, vol. 63, pp. 744-750, 1973. </td>
        </tr>
        <tr>
                <td>[Lugliani1971]</td>
                <td>R. Lugliani, B. J. Whipp, C. Seard, and K. Wasserman, \"Effect of Bilateral Carotid-Body Resection on Ventilatory Control at Rest and during Exercise in Man,\" New England Journal of Medicine, vol. 285, pp. 1105-1111, 1971. </td>
        </tr>
        <tr>
                <td>[Maack1985]</td>
                <td>T. Maack, M. J. F. Camargo, H. D. Kleinert, J. H. Laragh, and S. A. Atlas, \"Atrial natriuretic factor: structure and functional properties,\" Kidney Int, vol. 27, pp. 607-615, 1985. </td>
        </tr>
        <tr>
                <td>[Maass-Moreno1992]</td>
                <td>R. Maass-Moreno and C. F. Rothe, \"Contribution of the large hepatic veins to postsinusoidal vascular resistance,\" Am J Physiol Gastrointest Liver Physiol, vol. 262, pp. G14-G22, 1992. </td>
        </tr>
        <tr>
                <td>[MacGregor1981]</td>
                <td>G. MacGregor, N. Markandu, J. Roulston, J. Jones, and J. Morton, \"Maintenance of blood pressure by the renin–angiotensin system in normal man,\" 1981. </td>
        </tr>
        <tr>
                <td>[Maddox1974]</td>
                <td>D. A. Maddox, W. M. Deen, and B. M. Brenner, \"Dynamics of glomerular ultrafiltration. VI. Studies in the primate,\" Kidney international, vol. 5, pp. 271-278, 1974/04// 1974. </td>
        </tr>
        <tr>
                <td>[Madison1958]</td>
                <td>L. L. Madison and D. W. Seldin, \"Ammonia Excretion and Renal Enzymatic Adaptation in Human Subjects, as Disclosed by Administration of Precursor Amino Acids12,\" The Journal of Clinical Investigation, vol. 37, pp. 1615-1627, 1958. </td>
        </tr>
        <tr>
                <td>[Majid1997]</td>
                <td>D. S. A. Majid, M. Godfrey, and S. A. Omoro, \"Pressure Natriuresis and Autoregulation of Inner Medullary Blood Flow in Canine Kidney,\" Hypertension, vol. 29, pp. 210-215, January 1, 1997 1997. </td>
        </tr>
        <tr>
                <td>[Malberti1999]</td>
                <td>F. Malberti, M. Farina, and E. Imbasciati, \"The PTH-calcium curve and the set point of calcium in primary and secondary hyperparathyroidism,\" Nephrology Dialysis Transplantation, vol. 14, pp. 2398-2406, 1999. </td>
        </tr>
        <tr>
                <td>[Malberti1999]</td>
                <td>F. Malberti, M. Farina, and E. Imbasciati, \"The PTH-calcium curve and the set point of calcium in primary and secondary hyperparathyroidism,\" Nephrology Dialysis Transplantation, vol. 14, pp. 2398-2406, 1999. </td>
        </tr>
        <tr>
                <td>[Malnic1989]</td>
                <td>G. Malnic, R. W. Berliner, and G. Giebisch, Flow dependence of K+ secretion in cortical distal tubules of the rat vol. 256, 1989. </td>
        </tr>
        <tr>
                <td>[Malo1984]</td>
                <td>J. Malo, H. Goldberg, R. Graham, H. Unruh, and C. Skoog, Effect of hypoxic hypoxia on systemic vasculature vol. 56, 1984. </td>
        </tr>
        <tr>
                <td>[Manning1987]</td>
                <td>R. D. Manning, Renal hemodynamic, fluid volume, and arterial pressure changes during hyperproteinemia vol. 252, 1987. </td>
        </tr>
        <tr>
                <td>[Manning1990]</td>
                <td>R. D. Manning, Effects of hypoproteinemia on blood volume and arterial pressure of volume-loaded dogs vol. 259, 1990. </td>
        </tr>
        <tr>
                <td>[Manning1980]</td>
                <td>R. D. Manning and A. C. Guyton, Dynamics of fluid distribution between the blood and interstitium during overhydration vol. 238, 1980. </td>
        </tr>
        <tr>
                <td>[Manning1983]</td>
                <td>R. D. Manning and A. C. Guyton, Effects of hypoproteinemia on fluid volumes and arterial pressure vol. 245, 1983. </td>
        </tr>
        <tr>
                <td>[Mantzoros2011]</td>
                <td>C. S. Mantzoros, F. Magkos, M. Brinkoetter, E. Sienkiewicz, T. A. Dardeno, S.-Y. Kim, et al., Leptin in human physiology and pathophysiology vol. 301, 2011. </td>
        </tr>
        <tr>
                <td>[Marcus1992]</td>
                <td>F. Marcus, \"Use and toxicity of digitalis,\" Heart disease and stroke: a journal for primary care physicians, vol. 1, p. 27, 1992. </td>
        </tr>
        <tr>
                <td>[Marshall1995]</td>
                <td>J. Marshall, Skeletal Muscle Vasculature and Systemic Hypoxia vol. 10, 1995. </td>
        </tr>
        <tr>
                <td>[Marshall1988]</td>
                <td>J. M. Marshall and J. D. Metcalfe, \"Analysis of the cardiovascular changes induced in the rat by graded levels of systemic hypoxia,\" The Journal of Physiology, vol. 407, pp. 385-403, December 1, 1988 1988. </td>
        </tr>
        <tr>
                <td>[Maruyama1984]</td>
                <td>H. Maruyama, A. Hisatomi, L. Orci, G. M. Grodsky, and R. H. Unger, \"Insulin within islets is a physiologic glucagon release inhibitor,\" The Journal of Clinical Investigation, vol. 74, pp. 2296-2299, 1984. </td>
        </tr>
        <tr>
                <td>[Mason1964]</td>
                <td>D. T. Mason, E. Braunwald, R. B. Karsh, and F. A. Bullock, \"Studies on Digitalis. X. Effects of Ouabain on Forearm Vascular Resistance and Venous Tone in Normal Subjects and in Patients in Heart Failure *,\" The Journal of Clinical Investigation, vol. 43, pp. 532-543, 1964. </td>
        </tr>
        <tr>
                <td>[Massara1980]</td>
                <td>F. Massara, S. Martelli, E. Cagliero, F. Camanni, and G. Molinatti, \"Influence of glucagon on plasma levels of potassium in man,\" Diabetologia, vol. 19, pp. 414-417, 1980. </td>
        </tr>
        <tr>
                <td>[Matejak2009]</td>
                <td>M. Mateják, J. Kofránek, and J. Rusz, \"Akauzální\" vzkříšení\" Guytonova diagramu,\" Medsoft 2009, p. 105, 2009. </td>
        </tr>
        <tr>
                <td>[Matejak2010]</td>
                <td>M. Mateják and J. Kofránek, \"Rozsáhlý model fyziologických regulací v Modelice,\" Medsoft, pp. 126-146, 2010. </td>
        </tr>
        <tr>
                <td>[Matejak2011]</td>
                <td>M. Mateják and J. Kofránek, \"HumMod–Golem Edition–Rozsáhlý model fyziologických systémů,\" Medsoft, pp. 182-196, 2011. </td>
        </tr>
       
        <tr>
                <td>[Matejak2012]</td>
                <td>M. Mateják, B. Nedvědová, A. Doležalová, J. Kofránek, and T. Kulhánek, \"Model ECMO oxygenátoru,\" Medsoft, pp. 205-2014, 2012. </td>
        </tr>
        <tr>
                <td>[Mathias2013]</td>
                <td>C. J. Mathias and R. Bannister, Autonomic failure: a textbook of clinical disorders of the autonomic nervous system: OUP Oxford, 2013. </td>
        </tr>
        <tr>
                <td>[Matejak2014a]</td>
                <td>M. Mateják, T. Kulhánek, J. Šilar, P. Privitzer, F. Ježek, and J. Kofránek, \"Physiolibrary - Modelica library for Physiology,\" in 10th International Modelica Conference, Lund, Sweden, 2014. </td>
        </tr>
        <tr>
                <td>[Matejak2014b]</td>
                <td>M. Mateják, \"Physiolibrary - fyziológia v Modelice,\" Medsoft, 2014. </td>
        </tr>
        <tr>
                <td>[Matejak2015]</td>
                <td>M. Mateják, T. Kulhánek, and S. Matoušek, \"Adair-based hemoglobin equilibrium with oxygen, carbon dioxide and hydrogen ion activity,\" Scandinavian Journal of Clinical & Laboratory Investigation, pp. 1-8, 2015.</td>
        </tr>
        
        <tr>
                <td>[MATSUOKA1994]</td>
                <td>T. MATSUOKA, A. DOTTA, and J. P. MORTOLA, \"Metabolic response to ambient temperature and hypoxia in sinoaortic-denervated rats,\" METHODS, vol. 14, p. 19, 1994. </td>
        </tr>
        <tr>
                <td>[Mattson1997]</td>
                <td>S. E. Mattson, H. Elmqvist, and J. F. Broenink, \"Modelica: An international effort to design the next generation modelling language,\" Journal A, vol. 38, pp. 16-19, 1997. </td>
        </tr>
        <tr>
                <td>[Mattsson1998]</td>
                <td>S. E. Mattsson, H. Elmqvist, and M. Otter, \"Physical system modeling with Modelica,\" Control Engineering Practice, vol. 6, pp. 501-510, 1998. </td>
        </tr>
        <tr>
                <td>[Mayerson1939]</td>
                <td>H. S. Mayerson, H. M. Sweeney, and L. A. Toth, THE INFLUENCE OF POSTURE ON CIRCULATION TIME vol. 125, 1939. </td>
        </tr>
        <tr>
                <td>[Mayerson1960]</td>
                <td>H. S. Mayerson, C. G. Wolfram, H. H. Shirley, and K. Wasserman, Regional differences in capillary permeability vol. 198, 1960. </td>
        </tr>
        <tr>
                <td>[Mayerson1960]</td>
                <td>H. S. Mayerson, C. G. Wolfram, H. H. Shirley, and K. Wasserman, Regional differences in capillary permeability vol. 198, 1960. </td>
        </tr>
        <tr>
                <td>[Mazzolai1999]</td>
                <td>L. Mazzolai, M. Maillard, J. Rossat, J. Nussberger, H. R. Brunner, and M. Burnier, \"Angiotensin II receptor blockade in normotensive subjects a direct comparison of three AT1 receptor antagonists,\" Hypertension, vol. 33, pp. 850-855, 1999. </td>
        </tr>
        <tr>
                <td>[McArdle2010]</td>
                <td>W. D. McArdle, F. I. Katch, and V. L. Katch, Exercise physiology: Nutrition, energy, and human performance: Lippincott Williams & Wilkins, 2010. </td>
        </tr>
        <tr>
                <td>[McGarry1976]</td>
                <td>J. D. McGarry and D. W. Foster, \"Ketogenesis and its regulation,\" The American Journal of Medicine, vol. 61, pp. 9-13, 1976. </td>
        </tr>
        <tr>
                <td>[McGarry1976]</td>
                <td>J. D. McGarry and D. W. Foster, \"Ketogenesis and its regulation,\" Am J Med, vol. 61, pp. 9-13, Jul 1976. </td>
        </tr>
        <tr>
                <td>[McGarry1975]</td>
                <td>J. McGarry, P. H. Wright, and D. W. Foster, \"Hormonal control of ketogenesis. Rapid activation of hepatic ketogenic capacity in fed rats by anti-insulin serum and glucagon,\" The Journal of Clinical Investigation, vol. 55, pp. 1202-1209, 1975. </td>
        </tr>
        <tr>
                <td>[McGarry1977]</td>
                <td>J. D. McGarry, G. P. Mannaerts, and D. W. Foster, \"A possible role for malonyl-CoA in the regulation of hepatic fatty acid oxidation and ketogenesis,\" The Journal of Clinical Investigation, vol. 60, pp. 265-270, 1977. </td>
        </tr>
        <tr>
                <td>[McKeever1958]</td>
                <td>W. McKeever, D. Gregg, and P. Canney, \"Oxygen uptake of the nonworking left ventricle,\" Circulation research, vol. 6, pp. 612-623, 1958. </td>
        </tr>
        <tr>
                <td>[MCKEEVER1958]</td>
                <td>W. P. MCKEEVER, D. E. GREGG, and P. C. CANNEY, \"Oxygen Uptake of the Nonworking Left Ventricle,\" Circulation Research, vol. 6, pp. 612-623, September 1, 1958 1958. </td>
        </tr>
        <tr>
                <td>[Mead1953]</td>
                <td>J. Mead and J. L. Whittenberger, Physical Properties of Human Lungs Measured During Spontaneous Respiration vol. 5, 1953. </td>
        </tr>
        <tr>
                <td>[Mellander1992]</td>
                <td>S. Mellander and J. Bjornberg, Regulation of Vascular Smooth Muscle Tone and Capillary Pressure vol. 7, 1992. </td>
        </tr>
        <tr>
                <td>[Mendelowitz1988]</td>
                <td>D. Mendelowitz and A. M. Scher, \"Pulsatile sinus pressure changes evoke sustained baroreflex responses in awake dogs,\" Am. J. Physiol, vol. 255, pp. H673-H678, 1988. </td>
        </tr>
        <tr>
                <td>[Metting1988]</td>
                <td>P. J. Metting, J. R. Strader, and S. L. Britton, Evaluation of whole body autoregulation in conscious dogs vol. 255, 1988. </td>
        </tr>
        <tr>
                <td>[Metting1989]</td>
                <td>P. J. Metting, P. M. Stein, B. A. Stoos, K. A. Kostrzewski, and S. L. Britton, Systemic vascular autoregulation amplifies pressor responses to vasoconstrictor agents vol. 256, 1989. </td>
        </tr>
        <tr>
                <td>[METZLER1986]</td>
                <td>C. H. METZLER, M.-E. LEE, T. N. THRASHER, and D. J. RAMSAY, \"Increased right or left atrial pressure stimulates release of atrial natriuretic peptides in conscious dogs,\" Endocrinology, vol. 119, pp. 2396-2398, 1986. </td>
        </tr>
        <tr>
                <td>[Mifflin1993]</td>
                <td>S. W. Mifflin, \"Inhibition of chemoreceptor inputs to nucleus of tractus solitarius neurons during baroreceptor stimulation,\" Am J Physiol, vol. 265, pp. R14-20, Jul 1993. </td>
        </tr>
        <tr>
                <td>[Michel1996]</td>
                <td>C. Michel, \"One hundred years of Starling's hypothesis,\" News in physiological sciences, vol. 11, pp. 229-237, 1996. </td>
        </tr>
        <tr>
                <td>[Miki1993]</td>
                <td>K. Miki, Y. Hayashida, and K. Shiraki, Cardiac-renal-neural reflex plays a major role in natriuresis induced by left atrial distension vol. 264, 1993. </td>
        </tr>
        <tr>
                <td>[Miki1989]</td>
                <td>K. Miki, Y. Hayashida, S. Sagawa, and K. Shiraki, Renal sympathetic nerve activity and natriuresis during water immersion in conscious dogs vol. 256, 1989. </td>
        </tr>
        <tr>
                <td>[Miki1989]</td>
                <td>K. Miki, Y. Hayashida, F. Tajima, J. Iwamoto, and K. Shiraki, Renal sympathetic nerve activity and renal responses during head-up tilt in conscious dogs vol. 257, 1989. </td>
        </tr>
        <tr>
                <td>[Miles1983]</td>
                <td>J. M. Miles and J. E. Gerich, \"Glucose and ketone body kinetics in diabetic ketoacidosis,\" Clin Endocrinol Metab, vol. 12, pp. 303-19, Jul 1983. </td>
        </tr>
        <tr>
                <td>[Miles1983]</td>
                <td>J. M. Miles and J. E. Gerich, \"Glucose and ketone body kinetics in diabetic ketoacidosis,\" Clin Endocrinol Metab, vol. 12, pp. 303-19, Jul 1983. </td>
        </tr>
        <tr>
                <td>[Miles1980]</td>
                <td>J. M. Miles, R. A. Rizza, M. W. Haymond, and J. E. Gerich, \"Effects of Acute Insulin Deficiency on Glucose and Ketone Body Turnover in Man: Evidence for the Primacy of Overproduction of Glucose and Ketone Bodies in the Genesis of Diabetic Ketoacidosis,\" Diabetes, vol. 29, pp. 926-930, November 1, 1980 1980. </td>
        </tr>
        <tr>
                <td>[Miles1995]</td>
                <td>P. D. Miles, M. Levisetti, D. Reichart, M. Khoursheed, A. Moossa, and J. M. Olefsky, \"Kinetics of insulin action in vivo: identification of rate-limiting steps,\" Diabetes, vol. 44, pp. 947-953, 1995. </td>
        </tr>
        <tr>
                <td>[Milledge1985]</td>
                <td>J. Milledge and P. Cotes, \"Serum erythropoietin in humans at high altitude and its relation to plasma renin,\" Journal of applied physiology (Bethesda, Md.: 1985), vol. 59, p. 360, 1985. </td>
        </tr>
        <tr>
                <td>[Miller1982]</td>
                <td>M. E. Miller, E. P. Cronkite, and J. F. Garcia, \"Plasma levels of immunoreactive erythropoietin after acute blood loss in man,\" British journal of haematology, vol. 52, pp. 545-549, 1982. </td>
        </tr>
        <tr>
                <td>[Miserocchi2001]</td>
                <td>G. Miserocchi, D. Negrini, A. Passi, and G. De Luca, Development of Lung Edema: Interstitial Fluid Dynamics and Molecular Structure vol. 16, 2001. </td>
        </tr>
        <tr>
                <td>[Mitzner1974]</td>
                <td>W. Mitzner, Hepatic outflow resistance, sinusoid pressure, and the vascular waterfall vol. 227, 1974. </td>
        </tr>
        <tr>
                <td>[Miura1977]</td>
                <td>Y. Miura, V. Campese, V. DeQuattro, and D. Meijer, \"Plasma catecholamines via an improved fluorimetric assay: comparison with an enzymatic method,\" J Lab Clin Med, vol. 89, pp. 421-427, 1977. </td>
        </tr>
        <tr>
                <td>[Mizelle1990]</td>
                <td>H. L. Mizelle, D. A. Hildebrandt, C. A. Gaillard, M. W. Brands, J.-P. Montani, M. J. Smith Jr, et al., \"Atrial natriuretic peptide induces sustained natriuresis in conscious dogs,\" American Journal of Physiology-Regulatory, Integrative and Comparative Physiology, vol. 258, pp. R1445-R1452, 1990. </td>
        </tr>
        <tr>
                <td>[Molnar1946]</td>
                <td>G. Molnar, \"Survival of hypothermia by men immersed in the ocean,\" Journal of the American Medical Association, vol. 131, pp. 1046-1050, 1946. </td>
        </tr>
        <tr>
                <td>[Monos2001]</td>
                <td>E. Monos, M. Lóránt, and E. Fehér, Influence of long-term experimental orthostatic body position on innervation density in extremity vessels vol. 281, 2001. </td>
        </tr>
        <tr>
                <td>[Monos2003]</td>
                <td>E. Monos, M. Lóránt, G. Dörnyei, V. Bérczi, and G. Nádasy, Long-Term Adaptation Mechanisms in Extremity Veins Supporting Orthostatic Tolerance vol. 18, 2003. </td>
        </tr>
        <tr>
                <td>[MONROE1960]</td>
                <td>R. G. MONROE and G. FRENCH, \"Ventricular Pressure-Volume Relationships and Oxygen Consumption in Fibrillation and Arrest,\" Circulation Research, vol. 8, pp. 260-266, January 1, 1960 1960. </td>
        </tr>
        <tr>
                <td>[MONROE1961]</td>
                <td>R. G. MONROE and G. N. FRENCH, \"Left ventricular pressure-volume relationships and myocardial oxygen consumption in the isolated heart,\" Circulation research, vol. 9, pp. 362-373, 1961. </td>
        </tr>
        <tr>
                <td>[Moore1990]</td>
                <td>L. C. Moore and D. Casellas, \"Tubuloglomerular feedback dependence of autoregulation in rat juxtamedullary afferent arterioles,\" Kidney Int, vol. 37, pp. 1402-1408, 06//print 1990. </td>
        </tr>
        <tr>
                <td>[Moore1959]</td>
                <td>E. W. Moore, M. L. Mitchell, and T. C. Chalmers, \"VARIABILITY IN ABSORPTION OF INSULIN-I131 IN NORMAL AND DIABETIC SUBJECTS AFTER SUBCUTANEOUS AND INTRAMUSCULAR INJECTION*,\" The Journal of Clinical Investigation, vol. 38, pp. 1222-1227, 1959. </td>
        </tr>
        <tr>
                <td>[Morgan1969]</td>
                <td>T. Morgan and R. W. Berliner, \"A Study by Continuous Microperfusion of Water and Electrolyte Movements in the Loop of Henle and Distal Tubule of the Rat,\" Nephron, vol. 6, pp. 388-405, 1969. </td>
        </tr>
        <tr>
                <td>[Morimoto1998]</td>
                <td>T. Morimoto and T. Itoh, \"Thermoregulation and body fluid osmolality,\" Journal of basic and clinical physiology and pharmacology, vol. 9, pp. 51-72, 1998. </td>
        </tr>
        <tr>
                <td>[Morita1985]</td>
                <td>H. Morita and S. F. Vatner, Effects of volume expansion on renal nerve activity, renal blood flow, and sodium and water excretion in conscious dogs vol. 249, 1985. </td>
        </tr>
        <tr>
                <td>[Morton1980]</td>
                <td>J. Morton, M. Tree, and J. Casals-Stenzel, \"The effect of captopril on blood pressure and angiotensins I, I1 and 111 in sodium-depleted dogs: problems associated with the measurement of angiotensin I1 after inhibition of converting enzyme,\" Clinical Science, vol. 58, p. 450, 1980. </td>
        </tr>
        <tr>
                <td>[Moses1972]</td>
                <td>S. W. Moses, N. Bashan, and A. Gutman, Glycogen Metabolism in the Normal Red Blood Cell vol. 40, 1972. </td>
        </tr>
        <tr>
                <td>[Moses1974]</td>
                <td>S. W. Moses, N. Bashan, A. Gutman, and P. A. Ockerman, Glycogen Metabolism in Glycogen-rich Erythrocytes vol. 44, 1974. </td>
        </tr>
        <tr>
                <td>[Müller]</td>
                <td>W. A. Müller, G. R. Faloona, and R. H. Unger, \"Hyperglucagonemia in diabetic ketoacidosis,\" The American Journal of Medicine, vol. 54, pp. 52-57.</td>
        <tr>
                <td>[Murphy1960]</td>
                <td>J. Murphy, \"Erythrocyte metabolism,\" J Lah Clin Med, 1960. </td>
        </tr>
        <tr>
                <td>[Murphy2008]</td>
                <td>E. Murphy and C. Steenbergen, \"Ion transport and energetics during cell death and protection,\" Physiology (Bethesda), vol. 23, pp. 115-23, Apr 2008. </td>
        </tr>
        <tr>
                <td>[Myers2010]</td>
                <td>M. G. Myers Jr, R. L. Leibel, R. J. Seeley, and M. W. Schwartz, \"Obesity and leptin resistance: distinguishing cause from effect,\" Trends in Endocrinology & Metabolism, vol. 21, pp. 643-651, 11// 2010. </td>
        </tr>
        <tr>
                <td>[MYLLE1959]</td>
                <td>M. MYLLE, \"Localization of urine acidification in the mammalian kidney’j’,\" in Fed. Proc, 1959. </td>
        </tr>
        <tr>
                <td>[Neuhofer2006]</td>
                <td>W. Neuhofer and F.-X. Beck, Survival in Hostile Environments: Strategies of Renal Medullary Cells vol. 21, 2006. </td>
        </tr>
        <tr>
                <td>[Nicoloff1972]</td>
                <td>J. T. Nicoloff, J. C. Low, J. H. Dussault, and D. A. Fisher, \"Simultaneous Measurement of Thyroxine and Triiodothyronine Peripheral Turnover Kinetics in Man,\" The Journal of Clinical Investigation, vol. 51, pp. 473-483, 1972. </td>
        </tr>
        <tr>
                <td>[Nielsen1952]</td>
                <td>M. Nielsen and H. Smith, \"Studies on the Regulation of Respiration in Acute Hypoxia: With an Appendix on Kespiratory (Control During Prolonged Hypoxia,\" Acta Physiologica Scandinavica, vol. 24, pp. 293-313, 1952. </td>
        </tr>
        <tr>
                <td>[Nielsen1988]</td>
                <td>A. M. Nielsen, G. E. Bisgard, and E. H. Vidruk, Carotid chemoreceptor activity during acute and sustained hypoxia in goats vol. 65, 1988. </td>
        </tr>
        <tr>
                <td>[Nielsen2000]</td>
                <td>S. Nielsen, T.-H. Kwon, J. Frokiar, and M. A. Knepper, \"Key roles of renal aquaporins in water balance and water-balance disorders,\" Physiology, vol. 15, pp. 136-143, 2000. </td>
        </tr>
        <tr>
                <td>[Nicholls1987]</td>
                <td>M. Nicholls and A. Richards, \"Human studies with atrial natriuretic factor,\" Endocrinology and metabolism clinics of North America, vol. 16, pp. 199-223, 1987. </td>
        </tr>
        <tr>
                <td>[Nilsson2005]</td>
                <td>E. L. Nilsson and P. Fritzson, \"Biochemical and metabolic modeling and simulation with Modelica,\" BioMedSim. Linköping, Sweden, 2005. </td>
        </tr>
        <tr>
                <td>[Nilsson2005]</td>
                <td>E. L. Nilsson and P. Fritzson, \"A Metabolic Specialization of a General Purpose Modelica Library for Biological and Biochemical Systems,\" in Paper presented at the 4th International Modelica Conference, 2005. </td>
        </tr>
        <tr>
                <td>[Nishikimi1994]</td>
                <td>T. Nishikimi, K. Miura, N. Minamino, K. Takeuchi, and T. Takeda, Role of endogenous atrial natriuretic peptide on systemic and renal hemodynamics in heart failure rats vol. 267, 1994. </td>
        </tr>
        <tr>
                <td>[NODA1993]</td>
                <td>T. NODA, C.-P. CHENG, P. P. DE TOMBE, and W. C. LITTLE, \"Curvilinearity of LV end-systolic pressure-volume and dP/dt,-end-diastolic volume relations,\" 1993. </td>
        </tr>
        <tr>
                <td>[O’ROURKE1990]</td>
                <td>S. T. O’ROURKE and P. M. VANHOUTTE, \"Adrenergic and cholinergic responsiveness of isolated canine bronchial arteries,\" Organ, vol. 6, p. 2, 1990. </td>
        </tr>
        <tr>
                <td>[Oelkers1978]</td>
                <td>W. Oelkers, M. Schöneshöfer, G. Schultze, and B. Bauer, \"Effect of prolonged low-dose infusions of ile5-angiotensin II on blood pressure, aldosterone and electrolyte excretion in sodium replete man,\" Klinische Wochenschrift, vol. 56, pp. 37-41, 1978/01/01 1978. </td>
        </tr>
        <tr>
                <td>[Oelkers1974]</td>
                <td>W. Oelkers, J. J. Brown, R. Fraser, A. F. Lever, J. J. MORTON, and J. I. S. ROBERTSON, \"Sensitization of the adrenal cortex to angiotensin II in sodium-deplete man,\" Circulation research, vol. 34, pp. 69-77, 1974. </td>
        </tr>
        <tr>
                <td>[Oelkers1974]</td>
                <td>W. Oelkers, J. J. Brown, R. Fraser, A. F. Lever, J. J. MORTON, and J. I. S. ROBERTSON, \"Sensitization of the adrenal cortex to angiotensin II in sodium-deplete man,\" Circulation research, vol. 34, pp. 69-77, 1974. </td>
        </tr>
        <tr>
                <td>[Ohneda1969]</td>
                <td>A. Ohneda, E. Aguilar-Parada, A. M. Eisentraut, and R. H. Unger, \"Control of Pancreatic Glucagon S"
             + "ecretion by Glucose,\" Diabetes, vol. 18, pp. 1-10, January 1, 1969 1969. </td>
        </tr>
        <tr>
                <td>[OCHSNER1951]</td>
                <td>A. OCHSNER, R. COLP, and G. E. BURCH, \"Normal Blood Pressure in the Superficial Venous System of Man at Rest in the Supine Position,\" Circulation, vol. 3, pp. 674-680, May 1, 1951 1951. </td>
        </tr>
        <tr>
                <td>[Olsen1985]</td>
                <td>M. E. Olsen, J. E. Hall, J.-P. Montani, A. C. Guyton, H. G. Langford, and J. E. Cornell, \"Mechanisms of angiotensin II natriuresis and antinatriuresis,\" Am J Physiol, vol. 249, pp. F299-F307, 1985. </td>
        </tr>
        <tr>
                <td>[Olszewski1980]</td>
                <td>W. L. Olszewski and A. Engeset, Intrinsic contractility of prenodal lymph vessels and lymph flow in human leg vol. 239, 1980. </td>
        </tr>
        <tr>
                <td>[Orešković2010]</td>
                <td>D. Orešković and M. Klarica, \"The formation of cerebrospinal fluid: nearly a hundred years of interpretations and misinterpretations,\" Brain research reviews, vol. 64, pp. 241-262, 2010. </td>
        </tr>
        <tr>
                <td>[Orloff1973]</td>
                <td>J. Orloff, R. W. Berliner, and S. R. Geiger, Handbook of Physiology: Section 8, Renal Physiology: American Physiological Society, 1973. </td>
        </tr>
        <tr>
                <td>[Osiba1957]</td>
                <td>S. Osiba, \"THE SEASONAL VARIATION OF BASAL METABOLISM AND ACTIVITY OF THYROID GLAND IN MAN,\" The Japanese Journal of Physiology, vol. 7, pp. 355-365, 1957. </td>
        </tr>
        <tr>
                <td>[Owen1967]</td>
                <td>O. E. Owen, A. P. Morgan, H. G. Kemp, J. M. Sullivan, M. G. Herrera, and G. F. Cahill, Jr., \"Brain Metabolism during Fasting*,\" The Journal of Clinical Investigation, vol. 46, pp. 1589-1595, 1967. </td>
        </tr>
        <tr>
                <td>[Owen1967]</td>
                <td>O. E. Owen, A. P. Morgan, H. G. Kemp, J. M. Sullivan, M. G. Herrera, and G. F. Cahill, Jr., \"Brain Metabolism during Fasting*,\" The Journal of Clinical Investigation, vol. 46, pp. 1589-1595, 1967. </td>
        </tr>
        <tr>
                <td>[Owen1983]</td>
                <td>O. E. Owen, S. Caprio, G. A. Reichard, Jr., M. A. Mozzoli, G. Boden, and R. S. Owen, \"Ketosis of starvation: a revisit and new perspectives,\" Clin Endocrinol Metab, vol. 12, pp. 359-79, Jul 1983. </td>
        </tr>
        <tr>
                <td>[Pack1993]</td>
                <td>A. Pack and A. Gottschalk, \"Mechanisms of ventilatory periodicities,\" Annals of Biomedical Engineering, vol. 21, pp. 537-544, 1993/09/01 1993. </td>
        </tr>
        <tr>
                <td>[Pagel1988]</td>
                <td>H. Pagel, W. Jelkmann, and C. Weiss, \"A comparison of the effects of renal artery constriction and anemia on the production of erythropoietin,\" Pflügers Archiv, vol. 413, pp. 62-66, 1988/11/01 1988. </td>
        </tr>
        <tr>
                <td>[Palm2013]</td>
                <td>H. Palm, J. Holzmann, R. Klein, S.-A. Schneider, and D. Gerling, \"A Novel Approach on Virtual Systems Prototyping Based on a Validated, Hierarchical, Modular Library,\" Embedded World, Nuremberg, Germany, 2013. </td>
        </tr>
        <tr>
                <td>[Pare1982]</td>
                <td>P. D. Pare, L. A. Brooks, J. Bates, L. M. Lawson, J. M. Nelems, J. L. Wright, et al., \"Exponential analysis of the lung pressure-volume curve as a predictor of pulmonary emphysema,\" The American review of respiratory disease, vol. 126, pp. 54-61, 1982/07// 1982. </td>
        </tr>
        <tr>
                <td>[Park1998]</td>
                <td>F. Park, A.-P. Zou, and A. W. Cowley, \"Arginine vasopressin–mediated stimulation of nitric oxide within the rat renal medulla,\" Hypertension, vol. 32, pp. 896-901, 1998. </td>
        </tr>
        <tr>
                <td>[Pedersen1975]</td>
                <td>E. B. Pedersen and N. Christensen, \"Catecholamines in Plasma and Urine in Patients with Essential Hypertension Determined by Double-Isotope Derivative Techniques,\" Acta Medica Scandinavica, vol. 198, pp. 373-377, 1975. </td>
        </tr>
        <tr>
                <td>[Pennes1948]</td>
                <td>H. H. Pennes, Analysis of Tissue and Arterial Blood Temperatures in the Resting Human Forearm vol. 1, 1948. </td>
        </tr>
        <tr>
                <td>[Perley1966]</td>
                <td>M. Perley and D. M. Kipnis, \"Plasma Insulin Responses to Glucose and Tolbutamide of Normal Weight and Obese Diabetic and Nondiabetic Subjects,\" Diabetes, vol. 15, pp. 867-874, December 1, 1966 1966. </td>
        </tr>
        <tr>
                <td>[Permutt1960]</td>
                <td>S. Permutt and H. B. Martin, Static pressure-volume characteristics of lungs in normal males vol. 15, 1960. </td>
        </tr>
        <tr>
                <td>[Peti-Peterdi2009]</td>
                <td>J. Peti-Peterdi, I. Toma, A. Sipos, and S. L. Vargas, \"Multiphoton imaging of renal regulatory mechanisms,\" Physiology, vol. 24, pp. 88-96, 2009. </td>
        </tr>
        <tr>
                <td>[Pfaller1982]</td>
                <td>W. Pfaller, \"Structure function correlation on rat kidney,\" Adv Anat Embryol Cell Biol, vol. 70, 1982. </td>
        </tr>
        <tr>
                <td>[PHILIPPOPOULOS1959]</td>
                <td>G. S. PHILIPPOPOULOS, \"THYROTOXICOSIS AND ITS PSYCHOSOMATIC APPROACH 1,\" The Journal of Nervous and Mental Disease, vol. 128, pp. 415-424, 1959. </td>
        </tr>
        <tr>
                <td>[Pico2003]</td>
                <td>C. Pico, P. Oliver, J. Sanchez, and A. Palou, \"Gastric leptin: a putative role in the short-term regulation of food intake,\" British Journal of Nutrition, vol. 90, pp. 735-741, 2003. </td>
        </tr>
        <tr>
                <td>[Pierson1974]</td>
                <td>R. Pierson Jr, D. Lin, and R. Phillips, \"Total-body potassium in health: effects of age, sex, height, and fat,\" American Journal of Physiology--Legacy Content, vol. 226, pp. 206-212, 1974. </td>
        </tr>
        <tr>
                <td>[Piwonka1967]</td>
                <td>R. W. Piwonka and S. Robinson, Acclimatization of highly trained men to work in severe heat vol. 22, 1967. </td>
        </tr>
        <tr>
                <td>[Pogátsa1982]</td>
                <td>G. Pogátsa, M. Z. Koltai, and G. Grósz, \"The role of the myocardial water content in heart function,\" Acta physiologica Academiae Scientiarum Hungaricae, vol. 59, pp. 305-309, 1982 1982. </td>
        </tr>
        <tr>
                <td>[POHOST1976]</td>
                <td>G. M. POHOST, J. B. NEWELL, N. P. HAMLIN, and W. J. POWELL, \"Observations on autoregulation in skeletal muscle: the effects of arterial hypoxia,\" Cardiovascular Research, vol. 10, pp. 405-412, July 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Pollack1949]</td>
                <td>A. A. Pollack and E. H. Wood, Venous Pressure in the Saphenous Vein at the Ankle in Man during Exercise and Changes in Posture vol. 1, 1949. </td>
        </tr>
        <tr>
                <td>[Porter1993]</td>
                <td>D. Porter and M. Goldberg, \"Regulation of erythropoietin production,\" Experimental hematology, vol. 21, pp. 399-404, 1993. </td>
        </tr>
        <tr>
                <td>[Potts1993]</td>
                <td>J. T. Potts, X. R. Shi, and P. B. Raven, \"Carotid baroreflex responsiveness during dynamic exercise in humans,\" American Journal of Physiology, vol. 265, pp. H1928-H1928, 1993. </td>
        </tr>
        <tr>
                <td>[Powell1983]</td>
                <td>F. L. Powell and R. W. Mazzone, \"Morphometrics of rapidly frozen goose lungs,\" Respir Physiol, vol. 51, pp. 319-32, Mar 1983. </td>
        </tr>
        <tr>
                <td>[Prabhu1993]</td>
                <td>S. D. Prabhu and G. L. Freeman, \"Left ventricular energetics in closed-chest dogs,\" Am J Physiol, vol. 265, pp. H1048-55, Oct 1993. </td>
        </tr>
        <tr>
                <td>[Prager1986]</td>
                <td>R. Prager, P. Wallace, and J. M. Olefsky, \"In vivo kinetics of insulin action on peripheral glucose disposal and hepatic glucose output in normal and obese subjects,\" Journal of Clinical Investigation, vol. 78, p. 472, 1986. </td>
        </tr>
        <tr>
                <td>[Prager1986]</td>
                <td>R. Prager, P. Wallace, and J. M. Olefsky, \"In vivo kinetics of insulin action on peripheral glucose disposal and hepatic glucose output in normal and obese subjects,\" The Journal of Clinical Investigation, vol. 78, pp. 472-481, 1986. </td>
        </tr>
        <tr>
                <td>[Prager1987]</td>
                <td>R. Prager, P. Wallace, and J. M. Olefsky, \"Hyperinsulinemia does not compensate for peripheral insulin resistance in obesity,\" Diabetes, vol. 36, pp. 327-334, 1987. </td>
        </tr>
        <tr>
                <td>[Prager1987]</td>
                <td>R. Prager, P. Wallace, and J. M. Olefsky, \"Hyperinsulinemia Does Not Compensate for Peripheral Insulin Resistance in Obesity,\" Diabetes, vol. 36, pp. 327-334, March 1, 1987 1987. </td>
        </tr>
        <tr>
                <td>[Previs2000]</td>
                <td>S. F. Previs, D. J. Withers, J. M. Ren, M. F. White, and G. I. Shulman, \"Contrasting effects of IRS-1 versus IRS-2 gene disruption on carbohydrate and lipid metabolism in vivo,\" J Biol Chem, vol. 275, pp. 38990-4, Dec 15 2000. </td>
        </tr>
        <tr>
                <td>[Prewitt1976]</td>
                <td>R. L. Prewitt and P. C. Johnson, \"The effect of oxygen on arteriolar red cell velocity and capillary density in the rat cremaster muscle,\" Microvascular Research, vol. 12, pp. 59-70, 7// 1976. </td>
        </tr>
        
        <tr>
                <td>[Proß2011]</td>
                <td>S. Proß and B. Bachmann, \"An Advanced Environment for Hybrid Modeling and Parameter Identification of Biological Systems,\" 2011. </td>
        </tr>
        <tr>
                <td>[Pruett2014]</td>
                <td>W. A. Pruett and R. L. Hester, \"Parathyroid hormone secretion by multiple distinct cell populations, a time dynamic mathematical model,\" Physiological reports, vol. 2, 2014. </td>
        </tr>
        <tr>
                <td>[Pruett2013]</td>
                <td>W. A. Pruett, L. D. Husband, G. Husband, M. Dakhlalla, K. Bellamy, T. G. Coleman, et al., \"A Population Model of Integrative Cardiovascular Physiology,\" PloS one, vol. 8, p. e74329, 2013. </td>
        </tr>
        <tr>
                <td>[Pruett2013]</td>
                <td>W. A. Pruett, L. D. Husband, G. Husband, M. Dakhlalla, K. Bellamy, T. G. Coleman, et al., \"A Population Model of Integrative Cardiovascular Physiology,\" PloS one, vol. 8, p. e74329, 2013. </td>
        </tr>
        <tr>
                <td>[Puceat1999]</td>
                <td>M. Puceat, \"pHi regulatory ion transporters: an update on structure, regulation and cell function,\" Cell Mol Life Sci, vol. 55, pp. 1216-29, Aug 15 1999. </td>
        </tr>
        <tr>
                <td>[Purves1970]</td>
                <td>M. J. Purves, \"The effect of hypoxia, hypercapnia and hypotension upon carotid body blood flow and oxygen consumption in the cat,\" The Journal of Physiology, vol. 209, pp. 395-416, August 1, 1970 1970. </td>
        </tr>
        <tr>
                <td>[Quinton1991]</td>
                <td>P. Quinton and M. Reddy, \"Regulation of absorption in the human sweat duct,\" in The Identification of the CF (Cystic Fibrosis) Gene, ed: Springer, 1991, pp. 159-172. </td>
        </tr>
        <tr>
                <td>[Rabie2008]</td>
                <td>T. Rabie and H. H. Marti, Brain Protection by Erythropoietin: A Manifold Task vol. 23, 2008. </td>
        </tr>
        <tr>
                <td>[Raeder1995]</td>
                <td>E. A. Raeder, P. Albrecht, M. Perrott, and R. J. Cohen, \"Kinetics of Cycle Length Dependence of Ventricular Repolarization,\" Journal of Cardiovascular Electrophysiology, vol. 6, pp. 163-169, 1995. </td>
        </tr>
        <tr>
                <td>[Rahmouni2002]</td>
                <td>K. Rahmouni, W. G. Haynes, and A. L. Mark, \"Cardiovascular and sympathetic effects of leptin,\" Current hypertension reports, vol. 4, pp. 119-125, 2002. </td>
        </tr>
        <tr>
                <td>[Rahn1946]</td>
                <td>H. Rahn, A. B. Otis, L. E. Chadwick, and W. O. Fenn, THE PRESSURE-VOLUME DIAGRAM OF THE THORAX AND LUNG vol. 146, 1946. </td>
        </tr>
        <tr>
                <td>[Raine1986]</td>
                <td>A. E. Raine, P. Erne, E. Bürgisser, F. B. Müller, P. Bolli, F. Burkart, et al., \"Atrial natriuretic peptide and atrial pressure in patients with congestive heart failure,\" New England Journal of Medicine, vol. 315, pp. 533-537, 1986. </td>
        </tr>
        <tr>
                <td>[Randle1986]</td>
                <td>P. J. Randle, \"Fuel selection in animals,\" Biochemical Society Transactions, vol. 14, p. 799, 1986. </td>
        </tr>
        <tr>
                <td>[Rappaport1973]</td>
                <td>A. M. Rappaport, \"The microcirculatory hepatic unit,\" Microvascular Research, vol. 6, pp. 212-228, 9// 1973. </td>
        </tr>
        <tr>
                <td>[Raskin1975]</td>
                <td>P. Raskin, Y. Fujita, and R. H. Unger, \"Effect of insulin-glucose infusions on plasma glucagon levels in fasting diabetics and nondiabetics,\" The Journal of Clinical Investigation, vol. 56, pp. 1132-1138, 1975. </td>
        </tr>
        <tr>
                <td>[Rasmussen1999]</td>
                <td>B. B. Rasmussen and R. R. Wolfe, \"Regulation of fatty acid oxidation in skeletal muscle,\" Annual review of nutrition, vol. 19, pp. 463-484, 1999. </td>
        </tr>
        <tr>
                <td>[Raven1984]</td>
                <td>P. B. Raven, D. Rohm-Young, and C. G. Blomqvist, Physical fitness and cardiovascular response to lower body negative pressure vol. 56, 1984. </td>
        </tr>
        <tr>
                <td>[Reed1993]</td>
                <td>R. K. Reed, M. Ishibashi, M. Townsley, J. Parker, and A. Taylor, \"Blood-to-tissue clearance vs. lymph analysis in determining capillary transport characteristics for albumin in skin,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 264, pp. H1394-H1394, 1993. </td>
        </tr>
        <tr>
                <td>[Regoli1962]</td>
                <td>D. Regoli, R. Hess, H. Brunner, G. Peters, and F. Gross, \"Interrelationship of renin content in kidneys and blood pressure in renal hypertensive rats,\" Archives internationales de pharmacodynamie et de thérapie, vol. 140, p. 416, 1962. </td>
        </tr>
        <tr>
                <td>[Reid1980]</td>
                <td>J. L. Reid, D. H. Jones, G. Fitzgerald, D. Davies, and A. Boobis, \"Catecholamine Turnover in Essential Hypertension,\" Clinical and Experimental Hypertension, vol. 2, pp. 395-408, 1980. </td>
        </tr>
        <tr>
                <td>[Reichard1974]</td>
                <td>G. A. Reichard, Jr., O. E. Owen, A. C. Haff, P. Paul, and W. M. Bortz, \"Ketone-body production and oxidation in fasting obese humans,\" The Journal of Clinical Investigation, vol. 53, pp. 508-515, 1974. </td>
        </tr>
        <tr>
                <td>[Reissmann1965]</td>
                <td>K. R. Reissmann, D. A. Diederich, K. Ito, and J. Schmaus, \"Influence of disappearance rate and distribution space on plasma concentration of erythropoietin in normal rats,\" J Lab Clin Med, vol. 65, pp. 967-975, 1965. </td>
        </tr>
        <tr>
                <td>[Reivich1964]</td>
                <td>M. Reivich, Arterial Pco2 and cerebral hemodynamics vol. 206, 1964. </td>
        </tr>
        <tr>
                <td>[Renkin1986]</td>
                <td>E. M. Renkin, Some consequences of capillary permeability to macromolecules: Starling's hypothesis reconsidered vol. 250, 1986. </td>
        </tr>
        <tr>
                <td>[Renkin1996]</td>
                <td>E. M. Renkin and V. L. Tucker, \"Atria1 Natriuretic Peptide as a Regulator of Transvascdar Fluid Balance,\" 1996. </td>
        </tr>
        <tr>
                <td>[Renkin1996]</td>
                <td>E. Renkin and V. Tucker, \"Atrial Natriuretic Peptide as a Regulator of Transvascular Fluid Balance,\" Physiology, vol. 11, pp. 138-143, 1996. </td>
        </tr>
        <tr>
                <td>[Renkin1992]</td>
                <td>E. M. Renkin, V. Tucker, K. Rew, D. O'Loughlin, M. Wong, and L. Sibley, Plasma volume expansion with colloids increases blood-tissue albumin transport vol. 262, 1992. </td>
        </tr>
        <tr>
                <td>[Ridgway1974]</td>
                <td>E. C. Ridgway, B. D. Weintraub, and F. Maloof, \"Metabolic Clearance and Production Rates of Human Thyrotropin,\" The Journal of Clinical Investigation, vol. 53, pp. 895-903, 1974. </td>
        </tr>
        <tr>
                <td>[Risöe1994]</td>
                <td>C. Risöe, W. Tan, and O. A. Smiseth, \"Effect of carotid sinus baroreceptor reflex on hepatic and splenic vascular capacitance in vagotomized dogs,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 266, pp. H1528-H1528, 1994. </td>
        </tr>
        <tr>
                <td>[Roach1957]</td>
                <td>M. R. Roach and A. C. Burton, \"THE REASON FOR THE SHAPE OF THE DISTENSIBILITY CURVES OF ARTERIES,\" Canadian Journal of Biochemistry and Physiology, vol. 35, pp. 681-690, 1957/08/01 1957. </td>
        </tr>
        <tr>
                <td>[Roarty1988]</td>
                <td>T. P. Roarty and H. Raff, \"Renin response to graded haemorrhage in conscious rats,\" Clinical and Experimental Pharmacology and Physiology, vol. 15, pp. 373-378, 1988. </td>
        </tr>
        <tr>
                <td>[Robin1958]</td>
                <td>E. D. Robin, R. D. Whaley, C. H. Crump, A. G. Bickelmann, and D. M. Travis, Acid-Base Relations Between Spinal Fluid and Arterial Blood With Special Reference to Control of Ventilation vol. 13, 1958. </td>
        </tr>
        <tr>
                <td>[Roblitz2013]</td>
                <td>S. Roblitz, C. Stotzel, P. Deuflhard, H. M. Jones, D. O. Azulay, P. H. van der Graaf, et al., \"A mathematical model of the human menstrual cycle for the administration of GnRH analogues,\" J Theor Biol, vol. 321, pp. 8-27, Mar 21 2013. </td>
        </tr>
        <tr>
                <td>[Röblitz2013]</td>
                <td>S. Röblitz, C. Stötzel, P. Deuflhard, H. M. Jones, D.-O. Azulay, P. H. van der Graaf, et al., \"A mathematical model of the human menstrual cycle for the administration of GnRH analogues,\" Journal of theoretical biology, vol. 321, pp. 8-27, 2013. </td>
        </tr>
        <tr>
                <td>[Rodgers1998]</td>
                <td>C. D. Rodgers and M. Vranic, \"Mediation of glucoregulation at rest and during exercise by the glucose-fatty acid cycle: in vivo and in vitro studies,\" Canadian journal of applied physiology, vol. 23, pp. 534-557, 1998. </td>
        </tr>
        <tr>
                <td>[Rodriguez-Nichols1984]</td>
                <td>F. Rodriguez-Nichols, E. Laughrey, and R. L. Tannen, Response of renal NH3 production to chronic respiratory acidosis vol. 247, 1984. </td>
        </tr>
        <tr>
                <td>[Rogers1993]</td>
                <td>R. F. Rogers, J. F. Paton, and J. S. Schwaber, \"NTS neuronal responses to arterial pressure and pressure changes in the rat,\" American Journal of Physiology, vol. 265, pp. R1355-R1355, 1993. </td>
        </tr>
        <tr>
                <td>[Roos1971]</td>
                <td>A. Roos, \"Intracellular pH and buffering power of rat brain,\" Am J Physiol, vol. 221, pp. 176-81, Jul 1971. </td>
        </tr>
        <tr>
                <td>[ROSS1965]</td>
                <td>J. ROSS, J. W. LINHART, and E. BRAUNWALD, \"Effects of Changing Heart Rate in Man by Electrical Stimulation of the Right Atrium: Studies at Rest, during Exercise, and with Isoproterenol,\" Circulation, vol. 32, pp. 549-558, October 1, 1965 1965. </td>
        </tr>
        <tr>
                <td>[Rother1998]</td>
                <td>K. I. Rother, Y. Imai, M. Caruso, F. Beguinot, P. Formisano, and D. Accili, \"Evidence That IRS-2 Phosphorylation Is Required for Insulin Action in Hepatocytes,\" Journal of Biological Chemistry, vol. 273, pp. 17491-17497, July 10, 1998 1998. </td>
        </tr>
        <tr>
                <td>[Rothman1991]</td>
                <td>D. L. Rothman, I. Magnusson, L. D. Katz, R. G. Shulman, and G. I. Shulman, \"Quantitation of hepatic glycogenolysis and gluconeogenesis in fasting humans with 13C NMR,\" Science, vol. 254, pp. 573-576, 1991. </td>
        </tr>
        <tr>
                <td>[Roush1995]</td>
                <td>W. Roush, \"An \"off switch\" for red blood cells,\" Science, vol. 268, pp. 27-28, April 7, 1995 1995. </td>
        </tr>
        <tr>
                <td>[Rowell1989]</td>
                <td>L. B. Rowell, D. G. Johnson, P. B. Chase, K. A. Comess, and D. R. Seals, Hypoxemia raises muscle sympathetic activity but not norepinephrine in resting humans vol. 66, 1989. </td>
        </tr>
        <tr>
                <td>[Ruderman2001]</td>
                <td>N. Ruderman and J. S. Flier, \"Chewing the Fat--ACC and Energy Balance,\" Science, vol. 291, pp. 2558-2559, March 30, 2001 2001. </td>
        </tr>
        <tr>
                <td>[Ruskoaho1992]</td>
                <td>H. Ruskoaho, \"Atrial natriuretic peptide: synthesis, release, and metabolism,\" Pharmacological Reviews, vol. 44, pp. 479-602, 1992. </td>
        </tr>
        <tr>
                <td>[Rutter2006]</td>
                <td>G. A. Rutter and E. V. Hill, Insulin Vesicle Release: Walk, Kiss, Pause … Then Run vol. 21, 2006. </td>
        </tr>
        <tr>
                <td>[Sagawa1988]</td>
                <td>K. Sagawa, L. Maughan, H. Suga, and K. Sunagawa, Cardiac contraction and the pressure-volume relationship vol. 480: Oxford University Press New York, 1988. </td>
        </tr>
        <tr>
                <td>[Sage1981]</td>
                <td>J. I. Sage, R. L. Van Uitert, and T. E. Duffy, \"Simultaneous Measurement of Cerebral Blood Flow and Unidirectional Movement of Substances Across the Blood-Brain Barrier: Theory, Method, and Application to Leucine,\" Journal of Neurochemistry, vol. 36, pp. 1731-1738, 1981. </td>
        </tr>
        <tr>
                <td>[Saltin1966]</td>
                <td>B. Saltin and L. Hermansen, Esophageal, rectal, and muscle temperature during exercise vol. 21, 1966. </td>
        </tr>
        <tr>
                <td>[Sands1999]</td>
                <td>J. M. Sands, Urea Transport: It’s Not Just “Freely Diffusible” Anymore vol. 14, 1999. </td>
        </tr>
        <tr>
                <td>[Sartorius1949]</td>
                <td>O. Sartorius, J. Roemmelt, R. Pitts, D. Calhoon, and P. Miner, \"The renal regulation of acid-base balance in man. IV. The nature of the renal compensations in ammonium chloride acidosis,\" Journal of Clinical Investigation, vol. 28, p. 423, 1949. </td>
        </tr>
        <tr>
                <td>[Sasaki1985]</td>
                <td>S. Sasaki, T. Shiigai, and J. Takeuchi, \"Intracellular pH in the isolated perfused rabbit proximal straight tubule,\" Am. J. Physiol, vol. 249, pp. F417-F423, 1985. </td>
        </tr>
        <tr>
                <td>[Sato1977]</td>
                <td>K. Sato, \"The physiology, pharmacology, and biochemistry of the eccrine sweat gland,\" in Reviews of Physiology, Biochemistry and Pharmacology, Volume 79, ed: Springer, 1977, pp. 51-131. </td>
        </tr>
        <tr>
                <td>[Sato1989]</td>
                <td>K. Sato, W. Kang, K. Saga, and K. Sato, \"Biology of sweat glands and their disorders. I. Normal sweat gland function,\" Journal of the American Academy of Dermatology, vol. 20, pp. 537-563, 1989. </td>
        </tr>
        <tr>
                <td>[Sato1989]</td>
                <td>K. Sato, W. Kang, K. Saga, and K. Sato, \"Biology of sweat glands and their disorders. II. Disorders of sweat gland function,\" Journal of the American Academy of Dermatology, vol. 20, pp. 713-726, 1989. </td>
        </tr>
        <tr>
                <td>[Sato1996]</td>
                <td>A. Sato, Y. Sato, A. Suzuki, and S. Uchida, \"Reflex modulation of catecholamine secretion and adrenal sympathetic nerve activity by acupuncture-like stimulation in anesthetized rat,\" Jpn J Physiol, vol. 46, pp. 411-21, Oct 1996. </td>
        </tr>
        <tr>
                <td>[Savin1983]</td>
                <td>V. J. Savin, \"Ultrafiltration in single isolated human glomeruli,\" Kidney Int, vol. 24, pp. 748-753, 12//print 1983. </td>
        </tr>
        <tr>
                <td>[Seals1991]</td>
                <td>D. R. Seals, D. G. Johnson, and R. F. Fregosi, \"Hyperoxia lowers sympathetic activity at rest but not during exercise in humans,\" Am J Physiol, vol. 260, pp. R873-8, May 1991. </td>
        </tr>
        <tr>
                <td>[Seeliger1999]</td>
                <td>E. Seeliger, K. Lohmann, B. Nafz, P. B. Persson, and H. W. Reinhardt, \"Pressure-dependent renin release: effects of sodium intake and changes of total body sodium,\" American Journal of Physiology-Regulatory, Integrative and Comparative Physiology, vol. 277, pp. R548-R555, 1999. </td>
        </tr>
        <tr>
                <td>[Sheiner1977]</td>
                <td>L. Sheiner, B. Rosenberg, and V. Marathe, \"Estimation of population characteristics of pharmacokinetic parameters from routine clinical data,\" Journal of Pharmacokinetics and Biopharmaceutics, vol. 5, pp. 445-479, 1977/10/01 1977. </td>
        </tr>
        <tr>
                <td>[Shek1998]</td>
                <td>E. W. Shek, M. W. Brands, and J. E. Hall, \"Chronic Leptin Infusion Increases Arterial Pressure,\" Hypertension, vol. 31, pp. 409-414, January 1, 1998 1998. </td>
        </tr>
        <tr>
                <td>[Sherwood2004]</td>
                <td>L. Sherwood and C. Learning, \"Human physiology: from cells to systems,\" 2004. </td>
        </tr>
        <tr>
                <td>[Shigemi1994]</td>
                <td>K. Shigemi, M. J. Brunner, and A. A. Shoukas, \"-and -Adrenergic mechanisms in the control of vascular capacitance by the carotid sinus baroreflex system,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 267, pp. H201-H201, 1994. </td>
        </tr>
        <tr>
                <td>[ScHADE1975]</td>
                <td>D. S. ScHADE and R. Eaton, \"Glucagon regulation of plasma ketone body concentration in human diabetes,\" Journal of Clinical Investigation, vol. 56, p. 1340, 1975. </td>
        </tr>
        <tr>
                <td>[Schade1975]</td>
                <td>D. S. Schade and R. P. Eaton, \"Glucagon regulation of plasma ketone body concentration in human diabetes,\" The Journal of Clinical Investigation, vol. 56, pp. 1340-1344, 1975. </td>
        </tr>
        <tr>
                <td>[Schaefer1958]</td>
                <td>K. E. Schaefer, Respiratory Pattern and Respiratory Response to CO2 vol. 13, 1958. </td>
        </tr>
        <tr>
                <td>[Schally1966]</td>
                <td>A. V. Schally, C. Y. Bowers, T. W. Redding, and J. F. Barrett, \"Isolation of thyrotropin releasing factor (TRF) from porcine hypothalamus,\" Biochem Biophys Res Commun, vol. 25, pp. 165-9, Oct 20 1966. </td>
        </tr>
        <tr>
                <td>[Schling2002]</td>
                <td>P. Schling and G. Löffler, \"Cross talk between adipose tissue cells: impact on pathophysiology,\" Physiology, vol. 17, pp. 99-104, 2002. </td>
        </tr>
        <tr>
                <td>[Schmid-Schonbein1990]</td>
                <td>G. W. Schmid-Schonbein, Microlymphatics and lymph flow vol. 70, 1990. </td>
        </tr>
        <tr>
                <td>[SCHNEIDER1985]</td>
                <td>E. G. SCHNEIDER, K. J. RADKE, D. A. ULDERICH, and R. E. TAYLOR JR, \"Effect of Osmolality on Aldosterone Secretion*,\" Endocrinology, vol. 116, pp. 1621-1626, 1985. </td>
        </tr>
        <tr>
                <td>[Scholer1973]</td>
                <td>D. Scholer, M. Birkhäuser, A. Peytremann, A. Riondel, M. Vallotton, and A. Muller, \"Response of plasma aldosterone to angiotensin II, ACTH and potassium in man,\" Acta endocrinologica, vol. 72, pp. 293-307, 1973. </td>
        </tr>
        <tr>
                <td>[Schreiber1996]</td>
                <td>M. Schreiber, A. Steele, J. Goguen, A. Levin, and M. Halperin, \"Can a severe degree of ketoacidosis develop overnight?,\" Journal of the American Society of Nephrology, vol. 7, pp. 192-7, February 1, 1996 1996. </td>
        </tr>
        <tr>
                <td>[Schreider1957]</td>
                <td>E. Schreider, \"Ecological Rules and Body-heat Regulation in Man,\" Nature, vol. 179, pp. 915-916, 05/04/print 1957. </td>
        </tr>
        <tr>
                <td>[Schreij1996]</td>
                <td>G. Schreij, P. N. van Es, P. M. Schiffers, and P. W. de Leeuw, \"Renal extraction of atrial natriuretic peptide in hypertensive patients with or without renal artery stenosis,\" Hypertension, vol. 27, pp. 1254-1258, 1996. </td>
        </tr>
        <tr>
                <td>[Schrier1970]</td>
                <td>R. W. Schrier, K. M. McDonald, R. Wells, and D. P. Lauler, \"Influence of hematocrit and colloid on whole blood viscosity during volume expansion,\" Am. J. Physiol, vol. 218, p. 77, 1970. </td>
        </tr>
        <tr>
                <td>[Schwartz1987]</td>
                <td>N. S. Schwartz, W. E. Clutter, S. D. Shah, and P. E. Cryer, \"Glycemic thresholds for activation of glucose counterregulatory systems are higher than the threshold for symptoms,\" The Journal of Clinical Investigation, vol. 79, pp. 777-781, 1987. </td>
        </tr>
        <tr>
                <td>[Schwartz1996]</td>
                <td>M. W. Schwartz, D. G. Baskin, T. R. Bukowski, J. L. Kuijper, D. Foster, G. Lasser, et al., \"Specificity of leptin action on elevated blood glucose levels and hypothalamic neuropeptide Y gene expression in ob/ob mice,\" Diabetes, vol. 45, pp. 531-535, 1996. </td>
        </tr>
        <tr>
                <td>[Siesjö1973]</td>
                <td>B. Siesjö, \"Metabolic control of intracellular pH,\" Scandinavian Journal of Clinical & Laboratory Investigation, vol. 32, pp. 97-104, 1973. </td>
        </tr>
        <tr>
                <td>[Siesjö1971]</td>
                <td>B. K. Siesjö and L. Nilsson, \"The Influence of Arterial Hypoxemia upon Labile Phosphates and upon Extracellular and Intracellular Lactate and Pyruvate Concentrations in the Rat Brain,\" Scandinavian Journal of Clinical & Laboratory Investigation, vol. 27, pp. 83-96, 1971. </td>
        </tr>
        <tr>
                <td>[Silvers1980]</td>
                <td>G. W. Silvers, T. L. Petty, and R. E. Stanford, \"Elastic recoil changes in early emphysema,\" Thorax, vol. 35, pp. 490-495, July 1, 1980 1980. </td>
        </tr>
        <tr>
                <td>[Silverthorn2007]</td>
                <td>D. U. Silverthorn, B. R. Johnson, and W. C. Ober, Human physiology: Pearson/Benjamin Cummings, 2007. </td>
        </tr>
        <tr>
                <td>[Simpson1971]</td>
                <td>D. P. Simpson, \"Control of hydrogen ion homeostasis and renal acidosis,\" Medicine (Baltimore), vol. 50, pp. 503-41, Nov 1971. </td>
        </tr>
        <tr>
                <td>[Sinclair2005]</td>
                <td>E. M. Sinclair and D. J. Drucker, Proglucagon-Derived Peptides: Mechanisms of Action and Therapeutic Potential vol. 20, 2005. </td>
        </tr>
        <tr>
                <td>[Skarlatos1993]</td>
                <td>S. Skarlatos, N. DiPaola, R. A. Frankel, R. W. Pomerantz, P. H. Brand, P. J. Metting, et al., \"Spontaneous pressure-flow relationships in renal circulation of conscious dogs,\" Am J Physiol, vol. 264, pp. H1517-27, May 1993. </td>
        </tr>
        <tr>
                <td>[Skov1996]</td>
                <td>K. Skov, J. Fenger-Gron, and M. J. Mulvany, \"Effects of an angiotensin-converting enzyme inhibitor, a calcium antagonist, and an endothelin receptor antagonist on renal afferent arteriolar structure,\" Hypertension, vol. 28, pp. 464-471, 1996. </td>
        </tr>
        <tr>
                <td>[Smith2013]</td>
                <td>L. Smith, E. Butterworth, J. Bassingthwaighte, and H. Sauro, \"SBML and CellML translation in Antimony and JSim,\" Bioinformatics, p. btt641, 2013. </td>
        </tr>
        <tr>
                <td>[Sodja2009]</td>
                <td>A. Sodja and B. Zupančič, \"Modelling thermal processes in buildings using an object-oriented approach and Modelica,\" Simulation Modelling Practice and Theory, vol. 17, pp. 1143-1159, 2009. </td>
        </tr>
        <tr>
                <td>[Sonnenberg1973]</td>
                <td>H. Sonnenberg, \"Proximal and distal tubular function in salt-deprived and in salt-loaded deoxycorticosterone acetate-escaped rats,\" Journal of clinical Investigation, vol. 52, p. 263, 1973. </td>
        </tr>
        <tr>
                <td>[Speroff2005]</td>
                <td>L. Speroff and M. A. Fritz, Clinical gynecologic endocrinology and infertility: lippincott Williams & wilkins, 2005. </td>
        </tr>
        <tr>
                <td>[Squires1959]</td>
                <td>R. D. Squires and E. J. Huth, \"Experimental potassium depletion in normal human subjects. I. Relation of ionic intakes to the renal conservation of potassium,\" Journal of Clinical Investigation, vol. 38, p. 1134, 1959. </td>
        </tr>
        <tr>
                <td>[Stainsby1973]</td>
                <td>W. N. Stainsby, \"Local Control of Regional Blood Flow,\" Annual Review of Physiology, vol. 35, pp. 151-168, 1973. </td>
        </tr>
        <tr>
                <td>[Stanton1986]</td>
                <td>B. A. Stanton, \"Regulation by adrenal corticosteroids of sodium and potassium transport in loop of Henle and distal tubule of rat kidney,\" The Journal of Clinical Investigation, vol. 78, pp. 1612-1620, 1986. </td>
        </tr>
        <tr>
                <td>[Starke1987]</td>
                <td>A. Starke, T. Imamura, and R. H. Unger, \"Relationship of glucagon suppression by insulin and somatostatin to the ambient glucose concentration,\" The Journal of Clinical Investigation, vol. 79, pp. 20-24, 1987. </td>
        </tr>
        <tr>
                <td>[Stenvinkel1997]</td>
                <td>P. Stenvinkel, O. Heimbürger, and F. Lönnqvist, \"Serum leptin concentrations correlate to plasma insulin concentrations independent of body fat content in chronic renal failure,\" Nephrology Dialysis Transplantation, vol. 12, pp. 1321-1325, 1997. </td>
        </tr>
        <tr>
                <td>[STERNS1981]</td>
                <td>R. H. STERNS, M. COX, P. U. FEIG, and I. SINGER, \"Internal Potassium Balance and the Control of the Plasma Potassium Concentration,\" Medicine, vol. 60, pp. 339-354, 1981. </td>
        </tr>
        <tr>
                <td>[Stevens]</td>
                <td>P. M. Stevens and L. E. Lamb, \"Effects of lower body negative pressure on the cardiovascular system,\" American Journal of Cardiology, vol. 16, pp. 506-515.</td>
        <tr>
                <td>[Stewart1981]</td>
                <td>P. A. Stewart, How to understand acid-base: a quantitative acid-base primer for biology and medicine: Edward Arnold London, 1981. </td>
        </tr>
        <tr>
                <td>[Stick1992]</td>
                <td>C. Stick, H. Jaeger, and E. Witzleb, Measurements of volume changes and venous pressure in the human lower leg during walking and running vol. 72, 1992. </td>
        </tr>
        <tr>
                <td>[Stone1968]</td>
                <td>H. Stone, Thompson HK, and K. Schmidt-Nielsen, Influence of erythrocytes on blood viscosity vol. 214, 1968. </td>
        </tr>
        <tr>
                <td>[Stonestreet1998]</td>
                <td>B. S. Stonestreet, S. S. Ocampo, and W. Oh, Reductions in cardiac output in hypoxic young pigs: systemic and regional perfusion and oxygen metabolism vol. 85, 1998. </td>
        </tr>
        <tr>
                <td>[Storstein1982]</td>
                <td>L. Storstein, \"Clinical and circulatory aspects of digitalis in heart failure,\" European heart journal, vol. 3, pp. 59-64, 1982. </td>
        </tr>
        <tr>
                <td>[Stothert1992]</td>
                <td>J. C. Stothert, J. O. Basadre, G. B. Gbaanador, J. T. Flynn, L. Traber, and D. Traber, \"Bronchial blood flow during changes in inhaled oxygen and carbon dioxide concentrations in conscious sheep,\" Circulatory shock, vol. 36, pp. 120-126, 1992/02// 1992. </td>
        </tr>
        <tr>
                <td>[Stratton1985]</td>
                <td>J. R. Stratton, M. A. PFEIFER, J. L. Ritchie, and J. B. HALTER, \"Hemodynamic effects of epinephrine- Concentration-effect study in humans,\" Journal of Applied Physiology, vol. 58, pp. 1199-1206, 1985. </td>
        </tr>
        <tr>
                <td>[Suga1979]</td>
                <td>H. Suga, Total mechanical energy of a ventricle model and cardiac oxygen consumption vol. 236, 1979. </td>
        </tr>
        <tr>
                <td>[SUGA1974]</td>
                <td>H. SUGA and K. SAGAWA, \"Instantaneous Pressure-Volume Relationships and Their Ratio in the Excised, Supported Canine Left Ventricle,\" Circulation Research, vol. 35, pp. 117-126, July 1, 1974 1974. </td>
        </tr>
        <tr>
                <td>[SUGA1976]</td>
                <td>H. SUGA, K. SAGAWA, and D. P. KOSTIUK, \"Controls of ventricular contractility assessed by pressure-volume ratio, Emax,\" Cardiovascular Research, vol. 10, pp. 582-592, September 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Sugimoto1966]</td>
                <td>T. Sugimoto, K. Sagawa, and A. Guyton, Effect of tachycardia on cardiac output during normal and increased venous return vol. 211, 1966. </td>
        </tr>
        <tr>
                <td>[Summers1997]</td>
                <td>R. L. Summers, J. P. Montani, L. H. Woodward, T. G. Coleman, and J. E. Hall, \"Theoretical analysis of the mechanisms of chronic hyperinsulinemia,\" Computers in Biology and Medicine, vol. 27, pp. 249-256, 5// 1997. </td>
        </tr>
        <tr>
                <td>[SURKS1976]</td>
                <td>M. I. SURKS and J. H. OPPENHEIMER, \"Incomplete Suppression of Thyrotropin Secretion after Single Injection of Large L-Triiodothyronine Doses into Hypothyroid Rats,\" Endocrinology, vol. 99, pp. 1432-1441, 1976. </td>
        </tr>
        <tr>
                <td>[SURKS1977]</td>
                <td>M. I. SURKS and B. M. LIFSCHITZ, \"Biphasic Thyrotropin Suppression in Euthyroid and Hypothyroid Rats,\" Endocrinology, vol. 101, pp. 769-775, 1977. </td>
        </tr>
        <tr>
                <td>[SURKS1977]</td>
                <td>M. I. SURKS and B. M. LIFSCHITZ, \"Biphasic Thyrotropin Suppression in Euthyroid and Hypothyroid Rats,\" Endocrinology, vol. 101, pp. 769-775, 1977. </td>
        </tr>
        <tr>
                <td>[Swanson1975]</td>
                <td>G. D. Swanson and J. W. Bellville, Step changes in end-tidal CO2: methods and implications vol. 39, 1975. </td>
        </tr>
        <tr>
                <td>[Symons1999]</td>
                <td>J. D. Symons, T. I. Musch, K. S. Hageman, and C. L. Stebbins, \"Regional blood flow responses to acute ANG II infusion: effects of nitric oxide synthase inhibition,\" Journal of cardiovascular pharmacology, vol. 34, pp. 116-123, 1999. </td>
        </tr>
        <tr>
                <td>[Szlyk1984]</td>
                <td>P. C. Szlyk, C. King, D. B. Jennings, S. M. Cain, and C. K. Chapler, \"The role of aortic chemoreceptors during acute anemia,\" Canadian journal of physiology and pharmacology, vol. 62, pp. 519-523, 1984/05// 1984. </td>
        </tr>
        <tr>
                <td>[Schumacker]</td>
                <td>S. P. T. and C. S. M., \"The concept of a critical oxygen delivery,\" Intensive Care Medicine, vol. 13, pp. 223-229, January 1, 0001.</td>
        <tr>
                <td>[Takeshita1979]</td>
                <td>A. Takeshita, A. L. Mark, D. L. Eckberg, and F. M. Abboud, Effect of central venous pressure on arterial baroreflex control of heart rate vol. 236, 1979. </td>
        </tr>
        <tr>
                <td>[Talbott1941]</td>
                <td>J. H. Talbott, \"The Physiologic and Therapeutic Effects of Hypothermia,\" New England Journal of Medicine, vol. 224, pp. 281-288, 1941. </td>
        </tr>
        <tr>
                <td>[Laboratory2008]</td>
                <td>L. o. B. a. C. A. Teaching. (2008). Physiolibrary in Matlab and Simuling. Available: http://www.physiome.cz/simchips </td>
        </tr>
        <tr>
                <td>[Thomas1974]</td>
                <td>R. C. Thomas, \"Intracellular pH of snail neurones measured with a new pH-sensitive glass micro-electrode,\" The Journal of Physiology, vol. 238, pp. 159-180, April 1, 1974 1974. </td>
        </tr>
        <tr>
                <td>[Thomas1976]</td>
                <td>R. C. Thomas, \"The effect of carbon dioxide on the intracellular pH and buffering power of snail neurones,\" The Journal of Physiology, vol. 255, pp. 715-735, March 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Thomas1977]</td>
                <td>R. C. Thomas, \"The role of bicarbonate, chloride and sodium ions in the regulation of intracellular pH in snail neurones,\" The Journal of Physiology, vol. 273, pp. 317-338, December 1, 1977 1977. </td>
        </tr>
        <tr>
                <td>[Thomas1998]</td>
                <td>S. R. Thomas, \"Cycles and separations in a model of the renal medulla,\" American Journal of Physiology-Renal Physiology, vol. 275, pp. F671-F690, 1998. </td>
        </tr>
        <tr>
                <td>[Thompson1928]</td>
                <td>W. O. Thompson, P. K. Thompson, and M. E. Dailey, \"THE EFFECT OF POSTURE UPON THE COMPOSITION AND VOLUME OF THE BLOOD IN MAN 1,\" The Journal of Clinical Investigation, vol. 5, pp. 573-604, 1928. </td>
        </tr>
        <tr>
                <td>[Tikkanen1985]</td>
                <td>I. Tikkanen, K. Metsärinne, F. Fyhrquist, and R. Leidenius, \"Plasma atrial natriuretic peptide in cardiac disease and during infusion in healthy volunteers,\" The Lancet, vol. 326, pp. 66-69, 1985. </td>
        </tr>
        <tr>
                <td>[Topor2004]</td>
                <td>Z. Topor, M. Pawlicki, and J. Remmers, \"A Computational Model of the Human Respiratory Control System: Responses to Hypoxia and Hypercapnia,\" Annals of Biomedical Engineering, vol. 32, pp. 1530-1545, 2004/11/01 2004. </td>
        </tr>
        <tr>
                <td>[Toussaint1962]</td>
                <td>C. Toussaint and P. Vereerstraeten, Effects of blood pH changes on potassium excretion in the dog vol. 202, 1962. </td>
        </tr>
        <tr>
                <td>[Tummescheit2002]</td>
                <td>H. Tummescheit, \"Design and implementation of object-oriented model libraries using modelica,\" 2002. </td>
        </tr>
        <tr>
                <td>[Tummescheit1998]</td>
                <td>H. Tummescheit and J. Eborn, \"Design of a thermo-hydraulic model library in Modelica,\" in 12th European Simulation Multiconference, 1998. </td>
        </tr>
        <tr>
                <td>[Turcotte1999]</td>
                <td>L. P. Turcotte, \"ROLE OF FATS IN EXERCISE: Types and Quality,\" Clinics in Sports Medicine, vol. 18, pp. 485-498, 7/1/ 1999. </td>
        </tr>
        <tr>
                <td>[Unger1970]</td>
                <td>R. H. Unger, E. Aguilar-Parada, xFc, W. A. ller, and A. M. Eisentraut, \"Studies of pancreatic alpha cell function in normal and diabetic subjects,\" The Journal of Clinical Investigation, vol. 49, pp. 837-848, 1970. </td>
        </tr>
        <tr>
                <td>[Ursino2001]</td>
                <td>M. Ursino, E. Magosso, and G. Avanzolini, \"An integrated model of the human ventilatory control system: the response to hypoxia,\" Clinical Physiology, vol. 21, pp. 465-477, 2001. </td>
        </tr>
        <tr>
                <td>[Van1999]</td>
                <td>P. Van De Borne, S. Heron, H. Nguyen, P. Unger, M. Leeman, J. L. Vincent, et al., \"Arterial baroreflex control of the sinus node during dobutamine exercise stress testing,\" Hypertension, vol. 33, pp. 987-991, 1999. </td>
        </tr>
        <tr>
                <td>[Van1928]</td>
                <td>D. D. Van Slyke, A. B. Hastings, A. Hiller, and J. Sendroy, \"STUDIES OF GAS AND ELECTROLYTE EQUILIBRIA IN BLOOD: XIV. THE AMOUNTS OF ALKALI BOUND BY SERUM ALBUMIN AND GLOBULIN,\" Journal of Biological Chemistry, vol. 79, pp. 769-780, October 1, 1928 1928. </td>
        </tr>
        <tr>
                <td>[VANDERWEELE1993]</td>
                <td>D. A. VANDERWEELE and T. R. SCOTT, \"Pancreatic glucagon suppresses gustatory responsiveness to glucose,\" 1993. </td>
        </tr>
        <tr>
                <td>[Verrey1996]</td>
                <td>F. Verrey and J. Beron, \"Activation and supply of channels and pumps by aldosterone,\" News in physiological sciences, vol. 11, pp. 126-132, 1996. </td>
        </tr>
        <tr>
                <td>[Vizek1987]</td>
                <td>M. Vizek, C. K. Pickett, and J. V. Weil, Increased carotid body hypoxic sensitivity during acclimatization to hypobaric hypoxia vol. 63, 1987. </td>
        </tr>
        <tr>
                <td>[Wade1970]</td>
                <td>J. G. Wade, C. P. Larson, R. F. Hickey, W. K. Ehrenfeld, and J. W. Severinghaus, \"Effect of Carotid Endarterectomy on Carotid Chemoreceptor and Baroreceptor Function in Man,\" New England Journal of Medicine, vol. 282, pp. 823-829, 1970. </td>
        </tr>
        <tr>
                <td>[Wagner1988]</td>
                <td>E. M. Wagner and W. A. Mitzner, \"Effect of hypoxia on bronchial circulation,\" J. Appl. Physiol, vol. 65, pp. 1627-1633, 1988. </td>
        </tr>
        <tr>
                <td>[Wagner1990]</td>
                <td>E. M. Wagner and W. A. Mitzner, \"Effect of left atrial pressure on bronchial vascular hemodynamics,\" J Appl Physiol, vol. 69, pp. 837-842, 1990. </td>
        </tr>
        <tr>
                <td>[Wagner2004]</td>
                <td>E. M. Wagner, D. Kratky, G. Haemmerle, A. Hrzenjak, G. M. Kostner, E. Steyrer, et al., \"Defective uptake of triglyceride-associated fatty acids in adipose tissue causes the SREBP-1c-mediated induction of lipogenesis,\" Journal of lipid research, vol. 45, pp. 356-365, 2004. </td>
        </tr>
        <tr>
                <td>[Wahren1970]</td>
                <td>J. Wahren, \"Human forearm muscle metabolism during exercise. IV. Glucose uptake at different work intensities,\" Scandinavian Journal of Clinical and Laboratory Investigation, vol. 25, pp. 129-135, 1970/03// 1970. </td>
        </tr>
        <tr>
                <td>[Wahren2007]</td>
                <td>J. Wahren and K. Ekberg, \"Splanchnic regulation of glucose production,\" Annu. Rev. Nutr., vol. 27, pp. 329-345, 2007. </td>
        </tr>
        <tr>
                <td>[Warner1962]</td>
                <td>H. R. Warner and A. Cox, A mathematical model of heart rate control by sympathetic and vagus efferent information vol. 17, 1962. </td>
        </tr>
        <tr>
                <td>[Warren1943]</td>
                <td>J. V. Warren, A. J. Merrill, and E. A. Stead, Jr., \"THE RÔLE OF THE EXTRACELLULAR FLUID IN THE MAINTENANCE OF A NORMAL PLASMA VOLUME,\" The Journal of Clinical Investigation, vol. 22, pp. 635-641, 1943. </td>
        </tr>
        <tr>
                <td>[Waterlow1967]</td>
                <td>J. C. Waterlow, \"Lysine turnover in man measured by intravenous infusion of L-</td>
        </tr>
        <tr>
                <td>[U-14C]</td>
                <td>1993]        P. D. Watson, \"Sieving of electrolytes at capillary wall of cat skeletal muscle by osmotic water flow,\" AMERICAN JOURNAL OF PHYSIOLOGY, vol. 265, pp. H1869-H1869, 1993. </td>
        </tr>
        <tr>
                <td>[Weber1977]</td>
                <td>K. T. Weber and J. S. Janicki, Myocardial oxygen consumption: the role of wall force and shortening vol. 233, 1977. </td>
        </tr>
        <tr>
                <td>[Weber2000]</td>
                <td>D. S. Weber and J. H. Lombard, Elevated salt intake impairs dilation of rat skeletal muscle resistance arteries via ANG II suppression vol. 278, 2000. </td>
        </tr>
        <tr>
                <td>[Weidmann1978]</td>
                <td>P. Weidmann, C. Beretta-Piccoli, W. H. Ziegler, G. Keusch, Z. Gluck, and F. C. Reubi, \"Age versus urinary sodium for judging renin, aldosterone, and catecholamine levels: Studies in normal subjects and patients with essential hypertension,\" Kidney Int, vol. 14, pp. 619-628, 12//print 1978. </td>
        </tr>
        <tr>
                <td>[Weidmann1986]</td>
                <td>P. Weidmann, L. Hasler, M. Gnädinger, R. E. Lang, D. E. Uehlinger, S. Shaw, et al., \"Blood levels and renal effects of atrial natriuretic peptide in normal man,\" Journal of Clinical Investigation, vol. 77, p. 734, 1986. </td>
        </tr>
        <tr>
                <td>[Weil1971]</td>
                <td>J. V. Weil, E. Byrne-Quinn, I. E. Sodal, G. F. Filley, and R. F. Grover, \"Acquired attenuation of chemoreceptor function in chronically hypoxic man at high altitude,\" The Journal of Clinical Investigation, vol. 50, pp. 186-195, 1971. </td>
        </tr>
        <tr>
                <td>[Wells1938]</td>
                <td>H. S. Wells, J. B. Youmans, and D. G. Miller, Jr., \"TISSUE PRESSURE (INTRACUTANEOUS, SUBCUTANEOUS, AND INTRAMUSCULAR) AS RELATED TO VENOUS PRESSURE, CAPILLARY FILTRATION, AND OTHER FACTORS 12,\" The Journal of Clinical Investigation, vol. 17, pp. 489-499, 1938. </td>
        </tr>
        <tr>
                <td>[Wennergren1976]</td>
                <td>G. Wennergren, R. Little, and B. ÖBerg, \"Studies on the central integration of excitatory chemoreceptor influences and inhibitory baroreceptor and cardiac receptor influences,\" Acta Physiologica Scandinavica, vol. 96, pp. 1-18, 1976. </td>
        </tr>
        <tr>
                <td>[Wetter2013]</td>
                <td>M. Wetter, \"Modeling of Heat Transfer in Rooms in the Modelica Buildings Library,\" 2013. </td>
        </tr>
        <tr>
                <td>[Whalen1974]</td>
                <td>W. Whalen, P. Nair, D. Buerk, and C. Thuning, \"Tissue PO2 in normal and denervated cat skeletal muscle,\" Am J Physiol, vol. 227, pp. 1221-1225, 1974. </td>
        </tr>
        <tr>
                <td>[Whittaker1933]</td>
                <td>S. R. F. Whittaker and F. R. Winton, \"The apparent viscosity of blood flowing in the isolated hindlimb of the dog, and its variation with corpuscular concentration,\" The Journal of Physiology, vol. 78, pp. 339-369, July 10, 1933 1933. </td>
        </tr>
        <tr>
                <td>[Widmaier2006]</td>
                <td>E. P. Widmaier, H. Raff, and K. T. Strang, Vander's human physiology: McGraw-Hill Higher Education, 2006. </td>
        </tr>
        <tr>
                <td>[Wiederholt1967]</td>
                <td>M. Wiederholt, K. Hierholzer, E. Windhager, and G. Giebisch, Microperfusion study of fluid reabsorption in proximal tubules of rat kidneys vol. 213, 1967. </td>
        </tr>
        <tr>
                <td>[WILLIAMS1977]</td>
                <td>G. H. WILLIAMS and L. M. BRALEY, \"Effects of dietary sodium and potassium intake and acute stimulation on aldosterone output by isolated human adrenal cells,\" The Journal of Clinical Endocrinology & Metabolism, vol. 45, pp. 55-64, 1977. </td>
        </tr>
        <tr>
                <td>[L.1989]</td>
                <td>L. R. Williams and R. W. Leggett, \"Reference values for resting blood flow to organs of man,\" Clinical Physics and Physiological Measurement, vol. 10, p. 187, 1989. </td>
        </tr>
        <tr>
                <td>[Williamson1993]</td>
                <td>J. Williamson and P. B. Raven, \"Unilateral carotid-cardiac baroreflex responses in humans,\" American Journal of Physiology, vol. 265, pp. H1033-H1033, 1993. </td>
        </tr>
        <tr>
                <td>[Williamson1993]</td>
                <td>J. Williamson and P. B. Raven, \"Unilateral carotid-cardiac baroreflex responses in humans,\" American Journal of Physiology, vol. 265, pp. H1033-H1033, 1993. </td>
        </tr>
        <tr>
                <td>[Winearls1986]</td>
                <td>C. Winearls, M. Pippard, M. Downing, D. Oliver, C. Reid, and P. Mary Cotes, \"EFFECT OF HUMAN ERYTHROPOIETIN DERIVED FROM RECOMBINANT DNA ON THE ANAEMIA OF PATIENTS MAINTAINED BY CHRONIC HAEMODIALYSIS,\" The Lancet, vol. 328, pp. 1175-1178, 11/22/ 1986. </td>
        </tr>
        <tr>
                <td>[Winegrad1971]</td>
                <td>A. I. Winegrad and R. S. Clements Jr, \"Diabetic ketoacidosis,\" The Medical clinics of North America, vol. 55, pp. 899-911, 1971. </td>
        </tr>
        <tr>
                <td>[WINER1969]</td>
                <td>N. WINER, D. S. CHOKSHI, M. S. YOON, and A. D. FREEDMAN, \"Adrenergic receptor mediation of renin secretion,\" The Journal of Clinical Endocrinology & Metabolism, vol. 29, pp. 1168-1175, 1969. </td>
        </tr>
        <tr>
                <td>[Wolfe1998]</td>
                <td>R. R. Wolfe, \"Metabolic interactions between glucose and fatty acids in humans,\" The American Journal of Clinical Nutrition, vol. 67, pp. 519S-526S, March 1, 1998 1998. </td>
        </tr>
        <tr>
                <td>[Wolgast1981]</td>
                <td>M. Wolgast, M. Larson, and K. Nygren, \"Functional characteristics of the renal interstitium,\" American Journal of Physiology-Renal Physiology, vol. 241, pp. F105-F111, 1981. </td>
        </tr>
        <tr>
                <td>[WOLLHEIM1964]</td>
                <td>F. A. WOLLHEIM, S. BELFRAGE, C. CÖSTER, and H. LINDHOLM, \"Primary “acquired” hypogammaglobulinemia,\" Acta medica Scandinavica, vol. 176, pp. 1-16, 1964. </td>
        </tr>
        <tr>
                <td>[Wong2004]</td>
                <td>S. L. Wong, A. M. DePaoli, J. H. Lee, and C. S. Mantzoros, \"Leptin hormonal kinetics in the fed state: effects of adiposity, age, and gender on endogenous leptin production and clearance rates,\" The Journal of Clinical Endocrinology & Metabolism, vol. 89, pp. 2672-2677, 2004. </td>
        </tr>
        <tr>
                <td>[Woo1972]</td>
                <td>S. L. Y. Woo, A. S. Kobayashi, C. Lawrence, and W. A. Schlegel, \"Mathematical model of the corneo-scleral shell as applied to intraocular pressure-volume relations and applanation tonometry,\" Annals of Biomedical Engineering, vol. 1, pp. 87-98, 1972/09/01 1972. </td>
        </tr>
        <tr>
                <td>[Woodbury1956]</td>
                <td>D. M. Woodbury, \"Effect of acute hyponatremia on distribution of water and electrolytes in various tissues of the rat,\" Am. J. Physiol, vol. 185, pp. 281-286, 1956. </td>
        </tr>
        <tr>
                <td>[Work1987]</td>
                <td>J. Work and R. L. Jamison, \"Effect of adrenalectomy on transport in the rat medullary thick ascending limb,\" J Clin Invest, vol. 80, pp. 1160-4, Oct 1987. </td>
        </tr>
        <tr>
                <td>[Wright1982]</td>
                <td>F. S. Wright, \"Flow-dependent transport processes: filtration, absorption, secretion,\" Am J Physiol, vol. 243, pp. F1-11, Jul 1982. </td>
        </tr>
        <tr>
                <td>[Wyndham1966]</td>
                <td>C. H. Wyndham, N. B. Strydom, J. F. Morrison, C. G. Williams, G. A. Bredell, and J. Peter, Fatigue of the sweat gland response vol. 21, 1966. </td>
        </tr>
        <tr>
                <td>[Xenopoulos1994]</td>
                <td>N. P. Xenopoulos and R. J. Applegate, \"The effect of vagal stimulation on left ventricular systolic and diastolic performance,\" American Journal of Physiology-Heart and Circulatory Physiology, vol. 35, p. H2167, 1994. </td>
        </tr>
        <tr>
                <td>[Xie1995]</td>
                <td>S. Xie, R. Reed, B. Bowen, and J. Bert, \"A model of human microvascular exchange,\" Microvascular research, vol. 49, pp. 141-162, 1995. </td>
        </tr>
        <tr>
                <td>[Xie1995]</td>
                <td>S. L. Xie, R. K. Reed, B. D. Bowen, and J. L. Bert, \"A Model of Human Microvascular Exchange,\" Microvascular Research, vol. 49, pp. 141-162, 3// 1995. </td>
        </tr>
        <tr>
                <td>[Yandle1986]</td>
                <td>T. G. Yandle, A. M. Richards, M. G. Nicholls, R. Cuneo, E. A. Espiner, and J. H. Livesey, \"Metabolic clearance rate and plasma half life of alpha-human atrial natriuretic peptide in man,\" Life Sci, vol. 38, pp. 1827-33, May 19 1986. </td>
        </tr>
        <tr>
                <td>[Young1982]</td>
                <td>D. B. Young, \"Relationship between plasma potassium concentration and renal potassium excretion,\" Am J Physiol, vol. 242, pp. F599-F603, 1982. </td>
        </tr>
        <tr>
                <td>[Young1988]</td>
                <td>D. B. Young, Quantitative analysis of aldosterone's role in potassium regulation vol. 255, 1988. </td>
        </tr>
        <tr>
                <td>[Young1983]</td>
                <td>D. B. Young and A. W. Paulsen, \"Interrelated effects of aldosterone and plasma potassium on potassium excretion,\" Am J Physiol, vol. 244, pp. F28-F34, 1983. </td>
        </tr>
        <tr>
                <td>[Young1977]</td>
                <td>D. B. Young, Y. Pan, and A. C. Guyton, \"Control of extracellular sodium concentration by antidiuretic hormone-thirst feedback mechanism,\" Am J Physiol, vol. 232, 1977. </td>
        </tr>
        <tr>
                <td>[Young1976]</td>
                <td>D. B. Young, R. E. McCAA, Y.-J. Pan, and A. C. Guyton, \"Effectiveness of the aldosterone sodium and potassium feedback control system,\" Am. J. Physiol, vol. 231, pp. 945-953, 1976. </td>
        </tr>
        <tr>
                <td>[Young1984]</td>
                <td>D. B. Young, T. E. Jackson, U. Tipayamontri, and R. C. Scott, Effects of sodium intake on steady-state potassium excretion vol. 246, 1984. </td>
        </tr>
        <tr>
                <td>[Young1984]</td>
                <td>D. B. Young, T. E. Jackson, U. Tipayamontri, and R. C. Scott, Effects of sodium intake on steady-state potassium excretion vol. 246, 1984. </td>
        </tr>
        <tr>
                <td>[Zachariah1986]</td>
                <td>P. K. Zachariah, D. C. Bloedow, T. P. Moyer, S. G. Sheps, A. Schirger, and R. D. Fealey, \"Pharmacodynamics of midodrine, an antihypotensive agent,\" Clin Pharmacol Ther, vol. 39, pp. 586-91, May 1986. </td>
        </tr>
        <tr>
                <td>[Zambraski1976]</td>
                <td>E. J. Zambraski, G. F. DiBona, and G. J. Kaloyanides, \"Specificity of Neural Effect on Renal Tubular Sodium Reabsorption,\" Experimental Biology and Medicine, vol. 151, pp. 543-546, March 1, 1976 1976. </td>
        </tr>
        <tr>
                <td>[Zou1998]</td>
                <td>A.-P. Zou, F. Wu, and A. W. Cowley, \"Protective effect of angiotensin II-induced increase in nitric oxide in the renal medullary circulation,\" Hypertension, vol. 31, pp. 271-276, 1998. </td>
        </tr>
        <tr>
                <td>[Zupančič2013]</td>
                <td>B. Zupančič and A. Sodja, \"Computer-aided physical multi-domain modelling: Some experiences from education and industrial applications,\" Simulation Modelling Practice and Theory, vol. 33, pp. 45-67, 2013.  </td>
        </tr>

</table>
</html>"));
    end References;

    package Examples

      model RedCells
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-44,0},{-4,40}})));
        Physiolibrary.Organs.Blood.RedCells redCells
          annotation (Placement(transformation(extent={{44,4},{64,24}})));
      equation
        connect(busConnector, redCells.busConnector) annotation (Line(
            points={{-24,20},{11.1,20},{11.1,20.8},{46.2,20.8}},
            color={0,0,255},
            thickness=0.5));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end RedCells;

      model Heart
        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        Physiolibrary.Organs.Heart.Heart heart(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{6,24},{26,44}})));
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-80,14},{-40,54}})));
        Fluid.Components.Conductor systemic(redeclare package Medium = Blood,
            Conductance=1.250102626409427e-07*(5/90))
                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={18,-12})));
        Fluid.Components.Conductor pulmonary(redeclare package Medium = Blood,
            Conductance=1.250102626409427e-07*(5/12))
          annotation (Placement(transformation(extent={{2,66},{22,86}})));
      equation
        connect(heart.leftVentricle, systemic.q_in) annotation (Line(
            points={{24,28},{42,28},{42,-12},{28,-12}},
            color={127,0,0},
            thickness=0.5));
        connect(systemic.q_out, heart.rightAtrium) annotation (Line(
            points={{8,-12},{-6,-12},{-6,40},{8,40}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmonary.q_out, heart.leftAtrium) annotation (Line(
            points={{22,76},{38,76},{38,39.8},{23.8,39.8}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmonary.q_in, heart.rightVentricle) annotation (Line(
            points={{2,76},{-16,76},{-16,28},{8,28}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.Pericardium, busConnector.Pericardium_Pressure) annotation (
           Line(points={{20,44},{20,48},{-78,48},{-78,34},{-60,34}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(heart.Sympathicus, busConnector.GangliaGeneral_NA) annotation (
            Line(points={{15.2,36},{-58,36},{-58,34},{-60,34}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(heart.Parasympathicus, busConnector.VagusNerve_NA_Hz) annotation (
           Line(points={{9.8,32},{-60,32},{-60,34}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end Heart;

      model HeartAndPulmonaryCirculation
        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        Physiolibrary.Organs.Heart.Heart heart(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{6,24},{26,44}})));
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-80,14},{-40,54}})));
        Fluid.Components.Conductor systemic(redeclare package Medium = Blood,
            Conductance=1.250102626409427e-07*(5/90))
                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={18,-12})));
        Lungs.Components.PulmonaryCirculation pulmonaryCirculation(redeclare
            package Blood = Blood)
          annotation (Placement(transformation(extent={{2,60},{30,88}})));
        Fluid.Sensors.PressureMeasure meanPressure(redeclare package Medium =
              Blood)
          annotation (Placement(transformation(extent={{70,22},{90,42}})));
      equation
        connect(heart.leftVentricle, systemic.q_in) annotation (Line(
            points={{24,28},{42,28},{42,-12},{28,-12}},
            color={127,0,0},
            thickness=0.5));
        connect(systemic.q_out, heart.rightAtrium) annotation (Line(
            points={{8,-12},{-6,-12},{-6,40},{8,40}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.leftAtrium, pulmonaryCirculation.q_out) annotation (Line(
            points={{23.8,39.8},{48,39.8},{48,74},{30,74}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmonaryCirculation.q_in, heart.rightVentricle) annotation (Line(
            points={{2,74},{-20,74},{-20,28},{8,28}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.leftVentricle,meanPressure.port)  annotation (Line(
            points={{24,28},{42,28},{42,16},{80,16},{80,22}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmonaryCirculation.busConnector, busConnector) annotation (Line(
            points={{2,81},{-60,81},{-60,34}},
            color={0,0,255},
            thickness=0.5));
        connect(heart.Pericardium, busConnector.Pericardium_Pressure) annotation (
           Line(points={{20,44},{20,46},{4,46},{4,34},{-60,34}}, color={0,0,127}));
        connect(heart.Sympathicus, busConnector.GangliaGeneral_NA) annotation (
            Line(points={{15.2,36},{4,36},{4,34},{-60,34}}, color={0,0,127}));
        connect(heart.Parasympathicus, busConnector.VagusNerve_NA_Hz) annotation (
           Line(points={{9.8,32},{4,32},{4,34},{-60,34}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end HeartAndPulmonaryCirculation;

      model RespiratoryAndCardiovascular

        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        replaceable package Air = Media.Air constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                 annotation ( choicesAllMatching = true);
        replaceable package PleuralFluid = Physiolibrary.Media.Water constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                          annotation ( choicesAllMatching = true);

        parameter Types.Frequency RespirationRate(displayUnit="1/min")=0.2     "Respiration rate";
        parameter Types.Pressure Pmin(displayUnit="Pa")=-1000
                                       "Negative pressure gradient caused by respiratory muscles";
        parameter Types.Pressure Pmax(displayUnit="Pa")=0     "Positive presure gradient caused by respiratory muscles";
        parameter Real RespiratoryMusclePressureCycle[:, 3] = {{0, Pmax, 0}, {3 / 8, Pmin, 0}, {1, Pmax, 0}} "Absolute external lungs pressure during respiration cycle scaled to time period (0,1)";

        Physiolibrary.Organs.Heart.Heart heart(redeclare package Blood = Blood)
          annotation (Placement(transformation(extent={{4,-44},{24,-24}})));
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-82,-56},{-42,-16}})));
        Systems.Systemic systemic(redeclare package Blood = Blood) annotation (
            Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={14,-80})));
        Lungs.Lungs pulmonary(redeclare package Blood = Blood, nPorts=2)
          annotation (Placement(transformation(extent={{0,-8},{28,20}})));
        Fluid.Sensors.PressureMeasure meanPressure(redeclare package Medium = Blood)
          annotation (Placement(transformation(extent={{68,-46},{88,-26}})));
        Fluid.Sources.PressureSource               environment(redeclare
            package
            Medium = Air, y(m_flow(start=0.0050764996707716465)))                                "External environment" annotation (
          Placement(transformation(extent={{-38,64},{-18,84}})));
        Types.Constants.FractionConst Exercise_MusclePump_Effect(k=1)
          annotation (Placement(transformation(extent={{-90,-86},{-82,-78}})));
        Physiolibrary.Organs.Blood.RedCells redCells
          annotation (Placement(transformation(extent={{-72,46},{-92,66}})));
        Fluid.Sources.VolumeOutflowSource volumeOutflowSource(SolutionFlow(
              displayUnit="l/min") = 0.000109, redeclare package Medium = Air)
          annotation (Placement(transformation(extent={{52,64},{72,84}})));
        Types.Constants.PressureConst respMusclePressure(k(displayUnit="Pa") = -300)
          annotation (Placement(transformation(extent={{38,22},{46,30}})));
        inner Modelica.Fluid.System system(T_ambient=310.15)   "Human body system setting" annotation (
          Placement(transformation(extent={{76,16},{96,36}})));
      equation
        connect(heart.leftVentricle, systemic.port_a) annotation (Line(
            points={{22,-40},{28,-40},{28,-80},{24,-80}},
            color={127,0,0},
            thickness=0.5));
        connect(systemic.port_b, heart.rightAtrium) annotation (Line(
            points={{4,-80},{-6,-80},{-6,-28},{6,-28}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.leftVentricle,meanPressure.port)  annotation (Line(
            points={{22,-40},{40,-40},{40,-52},{78,-52},{78,-46}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.rightVentricle, pulmonary.blood_in) annotation (Line(
            points={{6,-40},{-26,-40},{-26,0},{0,0},{0,0.4}},
            color={127,0,0},
            thickness=0.5));
        connect(pulmonary.blood_out, heart.leftAtrium) annotation (Line(
            points={{28,0.4},{38,0.4},{38,-28.2},{21.8,-28.2}},
            color={127,0,0},
            thickness=0.5));
        connect(Exercise_MusclePump_Effect.y, busConnector.Exercise_MusclePump_Effect)
          annotation (Line(points={{-81,-82},{-70,-82},{-70,-36},{-62,-36}},
                                                                           color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(busConnector, systemic.busConnector) annotation (Line(
            points={{-62,-36},{-36,-36},{-36,-76},{3.8,-76}},
            color={0,0,255},
            thickness=0.5));
        connect(busConnector, pulmonary.busConnector) annotation (Line(
            points={{-62,-36},{-36,-36},{-36,11.6},{0,11.6}},
            color={0,0,255},
            thickness=0.5));
        connect(busConnector, redCells.busConnector) annotation (Line(
            points={{-62,-36},{-62,62.8},{-74.2,62.8}},
            color={0,0,255},
            thickness=0.5));
        connect(respMusclePressure.y, pulmonary.respiratotyMusclePressure)
          annotation (Line(points={{47,26},{62,26},{62,12},{25.2,12},{25.2,11.6}},
              color={0,0,127}));
        connect(environment.y, pulmonary.airways[1]) annotation (Line(
            points={{-18,74},{14,74},{14,19.265}},
            color={127,0,0},
            thickness=0.5));
        connect(volumeOutflowSource.q_in, pulmonary.airways[2]) annotation (Line(
            points={{52,74},{14,74},{14,20.455}},
            color={127,0,0},
            thickness=0.5));
        connect(heart.Pericardium, busConnector.Pericardium_Pressure) annotation (
           Line(points={{18,-24},{18,-18},{-62,-18},{-62,-36}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(heart.Sympathicus, busConnector.GangliaGeneral_NA) annotation (
            Line(points={{13.2,-32},{-32,-32},{-32,-36},{-62,-36}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(heart.Parasympathicus, busConnector.VagusNerve_NA_Hz) annotation (
           Line(points={{7.8,-36},{-62,-36}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end RespiratoryAndCardiovascular;

      model Cardiovascular2
        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        Systems.CardioVascularSystem cardioVascularSystem2_1(
                                                          redeclare package Blood =
              Blood)
          annotation (Placement(transformation(extent={{34,-16},{54,4}})));
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-44,-4},{-4,36}})));
        Types.Constants.PressureConst pressure(k=-445.99288489321)
          annotation (Placement(transformation(extent={{-54,-42},{-46,-34}})));
        Types.Constants.FractionConst Exercise_MusclePump_Effect(k=1)
          annotation (Placement(transformation(extent={{-58,-70},{-50,-62}})));
        inner Modelica.Fluid.System system(T_ambient=310.15)   "Human body system setting" annotation (
          Placement(transformation(extent={{64,62},{84,82}})));
      equation
        connect(busConnector, cardioVascularSystem2_1.busConnector) annotation (
            Line(
            points={{-24,16},{28,16},{28,2},{36,2}},
            color={0,0,255},
            thickness=0.5));
        connect(pressure.y, busConnector.Pericardium_Pressure) annotation (Line(
              points={{-45,-38},{-24,-38},{-24,16}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(Exercise_MusclePump_Effect.y, busConnector.Exercise_MusclePump_Effect)
          annotation (Line(points={{-49,-66},{-32,-66},{-32,16},{-24,16}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end Cardiovascular2;

      model Cardiovascular
        replaceable package Blood = Physiolibrary.Media.Blood                   constrainedby
          Physiolibrary.Media.Interfaces.PartialMedium                                                                                     annotation ( choicesAllMatching = true);
        Systems.Cardiovascular       cardioVascularSystem2_1(
                                                          redeclare package Blood =
              Blood, systemic(peripheral(bone(elasticVessel(
                  massFractions_start=Blood.VenousDefault)))))
          annotation (Placement(transformation(extent={{34,-16},{54,4}})));
        Types.BusConnector busConnector
          annotation (Placement(transformation(extent={{-44,-4},{-4,36}})));
        Types.Constants.PressureConst pressure(k=-445.99288489321)
          annotation (Placement(transformation(extent={{-54,-42},{-46,-34}})));
        Types.Constants.FractionConst Exercise_MusclePump_Effect(k=1)
          annotation (Placement(transformation(extent={{-58,-70},{-50,-62}})));
        inner Modelica.Fluid.System system(T_ambient=310.15)   "Human body system setting" annotation (
          Placement(transformation(extent={{60,44},{80,64}})));
      equation
        connect(busConnector, cardioVascularSystem2_1.busConnector) annotation (
            Line(
            points={{-24,16},{28,16},{28,2},{36,2}},
            color={0,0,255},
            thickness=0.5));
        connect(pressure.y, busConnector.Pericardium_Pressure) annotation (Line(
              points={{-45,-38},{-24,-38},{-24,16}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(Exercise_MusclePump_Effect.y, busConnector.Exercise_MusclePump_Effect)
          annotation (Line(points={{-49,-66},{-32,-66},{-32,16},{-24,16}}, color={0,0,
                127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=1200, __Dymola_Algorithm="Dassl"));
      end Cardiovascular;
    end Examples;
  end Organs;
  annotation (
    preferredView = "info",
    version = "3.0.0-beta1",
    versionDate = "2022-08-24",
    dateModified = "2022-08-24 17:14:41Z",
    uses(Modelica(version = "4.0.0"), Complex(version = "4.0.0"), Chemical(version = "1.4.0")),
    conversion(
      from(version = "BioChem-1.0.1", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertBioChem_1.0.1_to_Physiolibrary_2.3.mos", to = "3.0.0"),
      from(version = "0.4980", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_0.4980_to_2.3.mos", to = "3.0.0"),
      from(version = "1.0", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.0_to_3.0.mos", to = "3.0.0"),
      from(version = "1.1", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.1_to_3.0.mos", to = "3.0.0"),
      from(version = "1.2", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_1.2_to_3.0.mos", to = "3.0.0"),
      from(version = "2.0", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.0_to_3.0.mos", to = "3.0.0"),
      from(version = "2.1", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_3.0.mos", to = "3.0.0"),
      from(version = "2.1.0", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_3.0.mos", to = "3.0.0"),
      from(version = "2.1.1", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_3.0.mos", to = "3.0.0"),
      from(version = "2.1.2", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.1_to_3.0.mos", to = "3.0.0"),
      from(version = "2.2.0", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.2_to_3.0.mos", to = "3.0.0"),
      from(version = "2.3.0", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.3_to_3.0.mos", to = "3.0.0"),
      from(version = "2.3.1", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.3_to_3.0.mos", to = "3.0.0"),
      from(version = "2.3.2", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_2.3_to_3.0.mos", to = "3.0.0"),
      from(version = "3.0.0-alpha11", script = "modelica://Physiolibrary/Resources/Scripts/Dymola/ConvertPhysiolibrary_from_3.0.0-alpha11_to_3.0.0.mos", to = "3.0.0")),
    Documentation(revisions = "<html>
<p>Copyright (c) 2023, Marek Matej&aacute;k, Ph.D. </p>
<p>All rights reserved. </p>
<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: </p>
<ol>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. </li>
<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. </li>
<li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </li>
</ol>
<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
</html>", info = "<html>
<ul>
<li>Web pages: <a href=\"http://www.physiolibrary.org\">www.physiolibrary.org</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Overview\">Overview</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Connectors\">Connectors</a></li>
<li><a href=\"modelica://Physiolibrary.UsersGuide.Contact\">Contact</a> </li>
</ul>
<p><br>The origin of this Modelica Physiolibrary was in the first version of our HumMod Golem Edition model implementation, where it was called HumMod.Library. As the successors of Guyton&apos;s Medical Physiology School write, the original HumMod model is &ldquo;The best, most complete, mathematical model of human physiology ever created&rdquo;.</p>
<p>We are also developing many types of smaller physiological models for use in medical education, so it was essential to separate this library from our HumMod Modelica implementation. This separation improves the quality of the next HumMod release and provides a useful Modelica library to modelers in this bioscience.</p>
<p>The library contains only carefully-chosen elementary physiological laws, which are the basis of more complex physiological processes.</p>
<p><br>Physiology is a very progressive discipline, that examines how the living body works. And it is no surprise that all processes in the human body are driven by physical laws of nature. The great challenge is to marry old empirical experiments with the &ldquo;new&rdquo; physical principles. Many teams and projects in the word deal with this formalization of physiology, for example: Physiome, SBML, EuroPhysiome, VPH, CellML etc. It is our hope that this library helps this unflagging effort of physiologists to exactly describe the processes.</p>
</html>"));
end Physiolibrary;
